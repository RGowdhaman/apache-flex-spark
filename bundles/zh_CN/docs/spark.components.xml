<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components"><apiName>spark.components</apiName><apiDetail/><apiClassifier id="spark.components:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
  DataRenderer 类是 Spark 中数据组件的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:DataRenderer
    <strong>Properties</strong>
    data=""
  
    <strong>Events</strong>
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataRenderer 类是 Spark 中数据组件的基类。 
 
  <p><b>注意</b>：在更高版本中可能会删除此类。</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components:DataRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataRenderer:DataRenderer"><apiName>DataRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DataRenderer:data:get"><apiName>data</apiName><shortdesc>
      由 IDataRenderer 接口定义的 data 属性实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      由 IDataRenderer 接口定义的 <codeph>data</codeph> 属性实现。
      
      <p>此属性为 Bindable；它分派“dataChange”事件</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TextArea"><apiName>TextArea</apiName><shortdesc>
  TextArea 是一个文本输入控件，让用户输入和编辑多行格式化文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="content"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style:verticalScrollPolicy">
  指示在哪些条件下会显示垂直滑动条。
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:TextArea" playerVersion="Flash10" type="String">
<description conref="spark.components.Scroller#style:horizontalScrollPolicy">
  指示在哪些条件下会显示水平滑动条。
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:TextArea" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="scroller" owner="spark.components:TextArea" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      外观中的可选 Scroller，用于滚动 RichEditableText。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller in the skin,
      used to scroll the RichEditableText.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TextArea&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TextArea
    <strong>Properties</strong>
    heightInLines="<i>Calculated default</i>"  <b>[Spark theme only]</b>
    textFlow="<i>TextFlow</i>"  <b>[Spark theme only]</b>
    typicalText=null  <b>[Spark theme only]</b>
    widthInChars="<i>Calculated default</i>"  <b>[Spark theme only]</b>
  
    <strong>Styles</strong>
    horizontalScrollPolicy="auto"  <b>[Spark theme only]</b>
    symbolColor=""
    verticalScrollPolicy="auto"  <b>[Spark theme only]</b>
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextArea 是一个文本输入控件，让用户输入和编辑多行格式化文本。
   <p><b>Spark 主题的外观使用 RichEditableText 类。这意味着，Spark TextArea 控件支持基于 Flash 文本引擎 (FTE) 的 Text Layout Framework (TLF) 库。</b>组合后，可以在这些层上使用高质量的国际印刷效果和布局编辑文本。外观包括一个可以显示水平滚动条和垂直滚动条（用于滚动文本）的 Scroller，并支持使用鼠标滚轮垂直滚动。可以通过 <codeph>textDisplay</codeph> 形式访问 RichEditableText，通过 <codeph>scroller</codeph> 形式访问 Scroller。</p>
  
  <p><b>Mobile 主题的外观使用 StyleableStageText 类。</b>由于 StyleableStageText 使用本机文本字段，它可以在移动设备上实现更好的文本输入和操作体验，但您应该注意它有一些<xref href="supportClasses/StyleableStageText.html">限制和差异</xref>。由于 StageText 不能度量文本，必须对 TextArea 给出显式、百分比形式或基于约束的 <codeph>width</codeph> 和 <codeph>height</codeph>。StyleableStageText 可以作为 <codeph>textDisplay</codeph> 访问。如果您希望使用基于 TextField 的外观而不是基于 StageText 的外观，请将 <codeph>skinClass</codeph> 属性设置为<codeph>“spark.skins.mobile.TextAreaSkin”</codeph>。</p>
   <p>可以使用 <codeph>text</codeph> 属性设置要显示的文本或获取用户已输入的文本。</p>
   <p>使用 CSS 样式（例如 <codeph>fontFamily</codeph> 和 <codeph>fontSize</codeph>）设置文本格式。</p>
   <p>对于 Spark 主题，可以通过 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 属性以随字体大小缩放的方式指定 TextArea 的宽度和高度，也可以使用 <codeph>typicalText</codeph> 属性。请注意，如果使用 <codeph>typicalText</codeph>，则 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 属性将被忽略。对于所有主题，您也可以指定一个显式宽度或高度（以像素为单位），或者使用宽度和高度的百分比形式或约束，例如 <codeph>left</codeph> 和 <codeph>right</codeph> 或者 <codeph>top</codeph> 和 <codeph>bottom</codeph>。</p>
   <p>可以使用 <codeph>maxChars</codeph> 属性限制用户可以输入的字符数，使用 <codeph>restrict</codeph> 限制用户可以输入的字符。要使用该控件输入密码，请将 <codeph>displayAsPassword</codeph> 属性设置为 <codeph>true</codeph>。</p>
   <p>对于 Mobile 主题，特定于软键盘的属性 <codeph>autoCapitalize</codeph>、<codeph>autoCorrect</codeph>、<codeph>returnKeyLabel</codeph> 和 <codeph>softKeyboardType</codeph> 属性指定键盘提示。如果软键盘存在但它不支持提示表示的功能，则提示被忽略。在只有硬件键盘的移动环境中，这些提示将被忽略。 
  </p>
  
  <p><b>Spark 主题的文本区域</b></p>
 
  <p>Spark TextArea 控件和 MX TextArea 控件之间的最重要区别如下所示：
  <ul>
    <li>Spark TextArea 可提供更佳的印刷效果和文本布局，且能更好地支持各国语言。</li>
    <li>Spark TextArea 有面向对象模型的富文本，但 MX 版本却没有。</li>
    <li>在显示大量文本时，Spark TextArea 性能表现得更好。</li>
    <li>Spark TextArea 嵌入字体的方式与 MX 版本不同。要了解如何在嵌入字体时使用 <codeph>embedAsCFF</codeph> 属性，请参阅“字体”文档。</li>
  </ul></p>
   <p>Spark TextArea 控件使用 TLF 面向对象模型的富文本，其中，诸如分段、段落、范围、超链接和图像等文本布局元素在运行时由 ActionScript 对象表示。可以通过编程方式访问或操纵这些对象。TLF 中用于表示富文本的中心对象是 TextFlow。通过将 TextArea 控件的 <codeph>textFlow</codeph> 属性设置为 TextFlow 实例，来指定该控件的富文本。</p>
 
  <p>如果不需要显示含有多种格式的文本，请将 TextArea 的 <codeph>text</codeph> 属性设置为纯文本字符串。有关 <codeph>text</codeph> 属性和 <codeph>textFlow</codeph> 属性如何进行交互（例如，可以设置一个属性，然后获取另一个属性）的信息，请参阅这两个属性的描述。</p>
   <p>编译时，可以将 TLF 标记标签放在 TextArea 标签内，如下例所示：
  <pre>
  &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:TextArea>
  </pre>
  在此示例中，MXML 编译器设置了 TextArea <codeph>content</codeph> 属性，从而导致基于所指定的 FlowElement 创建 TextFlow 对象。</p>
   <p>TextArea 控件不包含任何用于更改文本格式的用户界面，但是包含可以用于以编程方式设置文本格式的 API。例如，可以创建一个按钮，当单击该按钮时，选定文本可变为粗体。</p>
   <p>默认文本格式由 CSS 样式确定，例如 <xref href="supportClasses/SkinnableTextBase.html#style:fontFamily">fontFamily</xref> 和 <xref href="supportClasses/SkinnableTextBase.html#style:fontSize">fontSize</xref>。TextFlow 对象中的任何格式信息都会覆盖 CSS 样式确定的默认格式。</p>
   <p>可以使用样式控制 TextArea 内容的许多特征。以下是一些常用示例：</p>
   <ul><li>使用 <codeph>lineHeight</codeph> 样式控制行间距。</li>
  <li>使用 <codeph>paragraphSpaceBefore</codeph> 和 <codeph>paragraphSpaceAfter</codeph> 样式控制段间距。</li>
  <li>使用 <codeph>textAlign</codeph> 和 <codeph>textAlignLast</codeph> 样式将文本对齐或两端对齐。</li>
  <li>使用 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> 和 <codeph>paddingBottom</codeph> 样式从控件的边框插入文本。</li>
  </ul>
   <p>默认情况下，文本在控件的右边缘换行。如果文本超出了 TextArea 范围，会自动显示垂直滚动条。如果将 <codeph>lineBreak</codeph> 样式设置为 <codeph>explicit</codeph>，则仅在显式换行符处开始新行。如果在 <codeph>text</codeph> 中使用 CR (<codeph>\r</codeph>)、LF (<codeph>\n</codeph>) 或 CR+LF (<codeph>\r\n</codeph>)，或者在 TLF 标记中使用 <codeph>&lt;p></codeph> 和 <codeph>&lt;br/></codeph>，也会产生相同的效果。在这些情况下，如果任何文本行宽于控件，都会自动显示水平滚动条。</p>
    <p>Spark TextArea 可以显示从左到右 (LTR) 书写的文本（如法语）、从右到左 (RTL) 书写的文本（如阿拉伯语）以及双向书写的文本（如阿拉伯语语句中的法语语句）。如果文本的主要书写方向为从右到左，请将 <codeph>direction</codeph> 样式设置为 <codeph>rtl</codeph>。<codeph>textAlign</codeph> 样式默认为 <codeph>start</codeph>，这样，当 <codeph>direction</codeph> 为 <codeph>ltr</codeph> 时，文本左对齐；当 <codeph>direction</codeph> 为 <codeph>rtl</codeph> 时，文本右对齐。要获得反向对齐，请将 <codeph>textAlign</codeph> 设置为 <codeph>end</codeph>。</p>
   <p>Spark TextArea 还支持在一个编辑会话内执行无限次撤消/重做操作。编辑会话在控件获得键盘焦点时启动，在控件失去焦点时结束。</p>
   <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
   <p>对于 Spark 主题，TextArea 控件具有以下默认特性：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>188 个像素宽 × 149 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>36 个像素宽 × 36 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.TextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
   <p>对于 Mobile 主题，TextArea 控件具有以下默认特性：</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.mobile.StageTextAreaSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="TextAreaExample.mxml"><swfblock conref="examples/TextAreaExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#TextArea/text"><linktext>text</linktext></link><link href="spark.components.xml#TextArea/textFlow"><linktext>textFlow</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Scroller"><linktext>spark.components.Scroller</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="" invalidHref="spark.skins.mobile.StageTextAreaSkin.xml"><linktext>spark.skins.mobile.StageTextAreaSkin</linktext></link><link href="" invalidHref="spark.skins.mobile.TextAreaSkin.xml"><linktext>spark.skins.mobile.TextAreaSkin</linktext></link><link href="spark.skins.spark.xml#TextAreaSkin"><linktext>spark.skins.spark.TextAreaSkin</linktext></link></related-links><apiConstructor id="spark.components:TextArea:TextArea"><apiName>TextArea</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:TextArea:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>TextLayoutFormat 对象。
          
          </apiDesc></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>String 的 Vector（用于指定所请求格式的名称），或 <codeph>null</codeph>（用于请求所有格式）。
                   </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>一个字符位置，用于指定所选内容的固定末尾。
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>一个字符位置，用于指定所选内容的可移动末尾。
                   </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#getFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="spark.components.RichEditableText#scrollToRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>unknown</apiData></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#scrollToRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:TextArea:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>要应用到选区的 TextLayoutFormat。
         
          </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>相对于 text 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区保持固定的终点。
         
          </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>相对于 text 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区的终点。 
         
          </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.RichEditableText#setFormatOfRange()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:TextArea:content:get"><apiName>content</apiName><shortdesc>
      该属性旨在编译时用于 MXML；在运行时获得或设置富文本内容并改用 textFlow 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      该属性旨在编译时用于 MXML；在运行时获得或设置富文本内容并改用 <codeph>textFlow</codeph> 属性。Adobe 建议运行时使用 <codeph>textFlow</codeph> 属性获得或设置富文本内容，因为它是 TextFlow（而不是 Object）的强类型。在 Text Layout Framework 中，TextFlow 是富文本内容的规范表示。
           <p><codeph>content</codeph> 属性是 TextArea 的默认属性，因此可以编写 MXML，如以下示例所示：
      <pre>
      &lt;s:TextArea>Hello &lt;s:span fontWeight="bold">World&lt;/s:span>&lt;/s:TextArea>
      </pre>
      在此示例中，指定为内容的 String 和 SpanElement 用于创建 TextFlow。</p>
           <p>该属性的类型为 Object，因为可以将其设置为 String、FlowElement 或 String 和 FlowElement 的 Array。在上述示例中，内容为二元数组。第一个数组元素是字符串“Hello”。第二个数组元素是含有粗体文本“World”的 SpanElement 对象。</p>
     
      <p>无论指定内容的方式为何，内容都会转换为 TextFlow 对象。当获得该属性的值时，即获得生成的 TextFlow 对象。</p>
     
      <p><b>对于 Mobile 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextArea:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
      控件的默认高度（以行为单位测量）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      控件的默认高度（以行为单位测量）。
           <p>有关 Spark 主题，请参阅 <b>spark.components.RichEditableText.heightInLines</b>。</p>
           <p><b>对于 Mobile 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/heightInLines"><linktext>spark.components.RichEditableText.heightInLines</linktext></link></related-links></apiValue><apiValue id="spark.components:TextArea:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      用于表示该组件显示的富文本的 TextFlow。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      用于表示该组件显示的富文本的 TextFlow。
           <p>有关 Spark 主题，请参阅 <b>spark.components.RichEditableText.textFlow</b>。</p>
           <p><b>对于 Mobile 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link></related-links></apiValue><apiValue id="spark.components:TextArea:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      控件的默认宽度（使用 em 单位测量）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      控件的默认宽度（使用 em 单位测量）。
           <p>有关 Spark 主题，请参阅 <b>spark.components.RichEditableText.widthInChars</b>。</p>
           <p><b>对于 Mobile 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Grid"><apiName>Grid</apiName><shortdesc>
  Grid 控件在可滚动表或“网格”中显示一列称为其数据提供程序的数据项（每行一个项）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Grid&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Grid 
    <strong>Properties</strong>
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IDataGridElement</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Grid 控件在可滚动表或“网格”中显示一列称为其<i>数据提供程序</i>的数据项（每行一个项）。由 GridColumn 对象定义的每个网格的列基于相应行的项显示值。网格的数据提供程序是可以更改的，说明可以添加、删除或更改其项。同样，列的列表也是可以更改的。
 
  <p>Grid 组件旨在用作 DataGrid 外观部件或其它自定义组合组件的元素。因此，它的外观不可以设置，它不包含滚动条且不提供默认的鼠标或键盘事件处理。</p>
 
  <p>每个可见 Grid <i>单元格</i>都由使用 <codeph>itemRenderer</codeph> 属性创建的 GridItemRenderer 实例显示。为每列指定一个项呈示器。显示前，每个项呈示器实例会使用相应行的数据提供程序项的值进行配置。根据需要创建项呈示器，然后使创建开销保持最低值、能够共用和重复使用。</p>
 
  <p>Grid 控件根据 <codeph>selectionMode</codeph> 属性支持选定内容。可使用选择方法（如 <codeph>setSelectedIndex</codeph> 或 <codeph>selectionContainsIndex()</codeph>）以编程方式修改或查询所选行或单元格的索引集。</p>
 
  <p>Grid 控件基于 <codeph>selectionMode</codeph> 属性以及对应行索引和列索引属性（如 <codeph>hoverRowIndex</codeph> 和 <codeph>columnRowIndex</codeph>）显示悬停、插入标记和选定内容指示符。指示符可以是任何可视元素。实现 IGridVisualElement 的指示符可以根据在其中使用的行和列来对自身进行配置。</p>
 
  <p>Grid 控件支持平滑滚动。其垂直和水平滚动位置定义网格的可视部件的像素原点，网格的布局仅根据需要显示尽可能多的单元格项呈示器来填充可用空间。  </p>
 
  <p>Grid 控件支持基于项呈示器的内容自动计算其高度的高度可变的行。此支持称为网格<i>虚拟化</i>，因为从（像素）滚动位置到行和列索引的映射通常基于有关网格单元格的首选大小的不完整信息。Grid 缓存已滚动到视图的计算的行高度并基于单个 <codeph>typicalItem</codeph> 估算其余值。</p>
 
  <p>不支持 DataGrid 项呈示器中的转换。GridItemRenderer 类已禁用了其 <codeph>transitions</codeph> 属性，因此对此进行设置也无效。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links><adobeApiEvent id="spark.components:Grid_spark.events.GridCaretEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  插入标记更改后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridCaretEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridCaretEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  插入标记更改后分派。  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  在单元格上双击鼠标时分派
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在单元格上双击鼠标时分派
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  在单元格上单击鼠标时分派
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在单元格上单击鼠标时分派
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  在鼠标离开网格单元格时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在鼠标离开网格单元格时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  在鼠标指向网格单元格时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在鼠标指向网格单元格时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  在 Grid 单元格上释放鼠标按钮时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在 Grid 单元格上释放鼠标按钮时分派。在拖动操作期间，释放鼠标按钮时也会在 <codeph>gridMouseDown</codeph> 事件后分派，即使鼠标不再位于 Grid 中也如此。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  如果在释放按钮之前移动鼠标，则在 gridMouseDown 事件后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  如果在释放按钮之前移动鼠标，则在 <codeph>gridMouseDown</codeph> 事件后分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Grid_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  在 Grid 单元格上按下鼠标按钮时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在 Grid 单元格上按下鼠标按钮时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Grid:Grid"><apiName>Grid</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Grid:addSelectedCell"><apiName>addSelectedCell</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_CELL 或 GridSelectionMode.MULTIPLE_CELLS，将单元格添加到选定内容并将尖号位置设置为该单元格。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>rowIndex</codeph> 或 <codeph>columnIndex</codeph> 无效，或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的列索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，将单元格添加到选定内容并将尖号位置设置为该单元格。对于所有其它选择模式，此方法不起作用。
     
      <p><codeph>rowIndex</codeph> 是包含所选单元格的项的数据提供程序中的索引。<codeph>columnIndex</codeph> 是包含所选单元格的列的 <codeph>columns</codeph> 中的索引。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:addSelectedIndex"><apiName>addSelectedIndex</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.MULTIPLE_ROWS，将此行添加到选定内容并将尖号位置设置为此行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>index</codeph> 无效或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，将此行添加到选定内容并将尖号位置设置为此行。对于所有其它选择模式，此方法不起作用。
     
      <p><codeph>rowIndex</codeph> 是包含所选单元格的项的数据提供程序中的索引。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:clearSelection"><apiName>clearSelection</apiName><shortdesc>
      如果 selectionMode 不是 GridSelectionMode.NONE，则删除所有所选行和单元格。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果选定内容更改，则为 <codeph>true</codeph>；如果之前没进行任何选择，则为 <codeph>false</codeph>。
        
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 不是 <codeph>GridSelectionMode.NONE</codeph>，则删除所有所选行和单元格。删除尖号并设置初始项目的锚点。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:ensureCellIsVisible"><apiName>ensureCellIsVisible</apiName><shortdesc>
      如果需要，设置 verticalScrollPosition 和 horizontalScrollPosition 属性以使指定的单元格完全可见。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>项呈示器的单元格的从零开始的行索引，或 -1 以指定一列。
      
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>项呈示器的单元格的从零开始的列索引，或 -1 以指定一行。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果需要，设置 <codeph>verticalScrollPosition</codeph> 和 <codeph>horizontalScrollPosition</codeph> 属性以使指定的单元格完全可见。如果 <codeph>rowIndex</codeph> 为 -1，且指定了 <codeph>columnIndex</codeph>，则只需调整 <codeph>horizontalScrollPosition</codeph> 以使指定的列可见。如果 <codeph>columnIndex</codeph> 为 -1，且指定了 <codeph>rowIndex</codeph>，则只需调整 <codeph>verticalScrollPosition</codeph> 以使指定的行可见。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellAt"><apiName>getCellAt</apiName><shortdesc>
      返回在指定网格坐标处重叠像素的单元格的行和列索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>单元格位置，或为 null。 
      
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:CellPosition</apiOperationClassifier></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>相对于网格的像素的 x 坐标。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>相对于网格的像素的 y 坐标。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回在指定网格坐标处重叠像素的单元格的行和列索引。如果不存在这样的单元格，则返回 null。
     
      <p>以下示例函数使用此方法计算网格单元格的 <codeph>dataField</codeph> 的值。</p> 
      <pre>
      function getCellData(x:Number, y:Number):Object
      {
          var cell:CellPosition = getCellAt(x, y);
          if (!cell)
              return null;
          var GridColumn:column = grid.columns.getItemAt(cell.columnIndex);
          return grid.dataProvider.getItemAt(cell.rowIndex)[column.dataField];
      }
      </pre> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellBounds"><apiName>getCellBounds</apiName><shortdesc>
      返回指定单元格的当前像素范围，如果不存在这样的单元格，则返回 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示单元格的像素范围的 <codeph>Rectangle</codeph> 或 null。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行的从零开始的索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列的从零开始的索引。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定单元格的当前像素范围，如果不存在这样的单元格，则返回 null。报告网格坐标中的单元格范围。
     
      <p>如果指定行的所有列和位于该行之前的所有行都尚未滚动到视图，则基于列的所有 <codeph>typicalItem</codeph> 返回的范围可能只是一个近似值。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellX"><apiName>getCellX</apiName><shortdesc>
      返回指定单元格的原点的 X 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>所指定单元格的原点的 X 坐标。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行的从零开始的索引。
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列的从零开始的索引。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定单元格的原点的 X 坐标。如果不需要单元格的整个边界，此方法比 <codeph>getCellBounds().x</codeph> 更有效。
     
      <p>如果指定行的所有列和位于该行之前的所有行都尚未滚动到可视范围内，则根据列的所有 <codeph>typicalItem</codeph>，返回的值可能只是一个近似值。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellY"><apiName>getCellY</apiName><shortdesc>
      返回指定单元格的原点的 Y 坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>所指定单元格的原点的 Y 坐标。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行的从零开始的索引。
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列的从零开始的索引。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定单元格的原点的 Y 坐标。如果不需要单元格的整个边界，此方法比 <codeph>getCellBounds().y</codeph> 更有效。
     
      <p>如果指定行的所有列和位于该行之前的所有行都尚未滚动到可视范围内，则根据列的所有 <codeph>typicalItem</codeph>，返回的值可能只是一个近似值。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getCellsAt"><apiName>getCellsAt</apiName><shortdesc>
      返回 CellPosition 对象的矢量，该对象的 rowIndex 和 columnIndex 属性指定与指定网格区域重叠的单元格的行索引和列索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>对象的矢量，例如 <codeph>Vector.&lt;Object>([{rowIndex:0, columnIndex:0}, ...])</codeph>。 
      
      </apiDesc><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>区域原点处的像素的 x 坐标，相对于网格。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>区域原点处的像素的 x 坐标，相对于网格。 
     
      </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>区域的宽度，以像素为单位。 
     
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>区域的高度，以像素为单位。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回 CellPosition 对象的矢量，该对象的 <codeph>rowIndex</codeph> 和 <codeph>columnIndex</codeph> 属性指定与指定网格区域重叠的单元格的行索引和列索引。如果不存在这样的单元格，则返回空矢量。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnBounds"><apiName>getColumnBounds</apiName><shortdesc>
      返回指定列的当前像素范围，如果不存在这样的列，则返回 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示列的像素范围的 <codeph>Rectangle</codeph> 或 null。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列的从零开始的索引。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定列的当前像素范围，如果不存在这样的列，则返回 null。报告网格坐标中的列范围。
     
      <p>如果指定列中的所有单元格尚未滚动到视图，则基于列的 <codeph>typicalItem</codeph> 返回的范围可能只是一个近似值。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnIndexAt"><apiName>getColumnIndexAt</apiName><shortdesc>
      返回对应于指定坐标的列索引；如果坐标超出边界，则返回 -1。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>列索引；如果坐标超出边界，则返回 -1。 
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>相对于网格的像素的 x 坐标。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>相对于网格的像素的 y 坐标。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回对应于指定坐标的列索引；如果坐标超出边界，则返回 -1。相对于网格解析坐标。
     
      <p>如果网格的所有列或行尚未滚动到视图，则基于列的所有 <codeph>typicalItem</codeph> 返回的索引可能只是一个近似值。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getColumnWidth"><apiName>getColumnWidth</apiName><shortdesc>
      返回指定列的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>所指定列的宽度。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列的从零开始的索引。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定列的宽度。如果不需要单元格的整个边界，此方法比 <codeph>getColumnBounds().width</codeph> 更有效。
     
      <p>如果未定义指定列的宽度属性，则返回的值可能只是一个近似值。只有列滚动到可视范围内之后，才会计算实际列宽。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getItemRendererAt"><apiName>getItemRendererAt</apiName><shortdesc>
      如果请求的项呈示器可见，则返回对指定单元格当前显示的项呈示器的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>项呈示器；如果单元格位置无效，则为 null。
      
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:IGridItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>项呈示器的单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>项呈示器的单元格的从零开始的列索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果请求的项呈示器可见，则返回对指定单元格当前显示的项呈示器的引用。请注意，一旦返回的项呈示器不再可见，则会将其回收且重置其属性。  
     
      <p>如果请求的项呈示器不可见，则每次调用此方法时创建一个新的项呈示器。新的项呈示器不可见</p>
     
      <p>如果指定的列不具有明显的宽度，则该单元格的宽度基于 <codeph>typicalItem</codeph>。如果尚未指定或未测量 <codeph>typicalItem</codeph>，则项呈示器的宽度默认为 <codeph>150</codeph>。</p>
     
      <p>如果网格属性 <codeph>variableRowHeight</codeph> 为 <codeph>true</codeph>（默认值），且未对指定行缓存整个行高度，则项呈示器的高度基于 <codeph>typicalItem</codeph>。如果尚未指定或未测量 <codeph>typicalItem</codeph>，则项呈示器的高度默认为其首选高度。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getRowBounds"><apiName>getRowBounds</apiName><shortdesc>
      返回指定行的当前像素范围，如果不存在这样的行，则返回 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示行的像素范围的 <codeph>Rectangle</codeph> 或 null。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行的从零开始的索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定行的当前像素范围，如果不存在这样的行，则返回 null。报告网格坐标中的行范围。
     
      <p>如果指定行的所有列和位于该行之前的所有行都尚未滚动到视图，则基于列的所有 <codeph>typicalItem</codeph> 返回的范围可能只是一个近似值。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getRowIndexAt"><apiName>getRowIndexAt</apiName><shortdesc>
      返回对应于指定坐标的行索引；如果坐标超出边界，则返回 -1。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>对应于指定的坐标的行索引。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>x 坐标。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>y 坐标。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回对应于指定坐标的行索引；如果坐标超出边界，则返回 -1。相对于网格解析坐标。
     
      <p>如果网格的所有列或行尚未滚动到视图，则基于列的所有 <codeph>typicalItem</codeph> 返回的索引可能只是一个近似值。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getVisibleColumnIndices"><apiName>getVisibleColumnIndices</apiName><shortdesc>
      返回当前可见列的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>可见列索引的矢量。
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      返回当前可见列的索引。请注意，第一列和最后一列的项呈示器可能只有部分可见。按矢量内容的显示顺序返回这些内容。
     
      <p>以下示例函数使用此方法计算可见 GridColumn 对象的矢量。</p>
      <pre>
      function getVisibleColumns():Vector.&lt;GridColumn>
      {
          var visibleColumns = new Vector.&lt;GridColumn>;
          for each (var columnIndex:int in grid.getVisibleColumnIndices())
              visibleColumns.push(grid.columns.getItemAt(columnIndex));
          return visibleColumns;
      }
      </pre> 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:getVisibleRowIndices"><apiName>getVisibleRowIndices</apiName><shortdesc>
      返回数据提供程序索引和当前可见行的内边距索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>可见行索引的矢量。
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      返回数据提供程序索引和当前可见行的内边距索引。大于或等于 <codeph>dataProvider</codeph> 长度的索引代表内边距行。请注意，第一行和最后一行的项呈示器可能只有部分可见。按矢量内容的显示顺序返回这些内容。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:invalidateCell"><apiName>invalidateCell</apiName><shortdesc>
      如果指定的单元格可见，则它会重新显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>发生更改的单元格的从零开始的行索引，或为 -1。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>发生更改的单元格的从零开始的列索引，或为 -1。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果指定的单元格可见，则它会重新显示。如果 <codeph>variableRowHeight=true</codeph>，则执行此操作可能会导致对应行的高度发生更改。
     
      <p>如果 columnIndex 为 -1，则整个行无效。同样，如果 <codeph>rowIndex 为 -1</codeph>，则整个列无效。</p>
     
      <p>当对位于 <codeph>rowIndex</codeph> 处的数据提供程序项的任何方面所做的更改可能会影响指定单元格的显示方式时，应调用该方法。调用该方法与调用 <codeph>dataProvider.itemUpdated()</codeph> 方法类似，后者建议 Grid 显示指定项的所有行应重新显示。使用此方法可以相对提高效率，因为它将更改的范围缩小到单个单元格。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:invalidateTypicalItemRenderer"><apiName>invalidateTypicalItemRenderer</apiName><shortdesc>
      清除基于 typicalItem 属性的缓存列宽数据，并请求新的布局传递。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      清除基于 <codeph>typicalItem</codeph> 属性的缓存列宽数据，并请求新的布局传递。如果应该由 Grid 的布局所反映的 <codeph>typicalItem</codeph> 的某些方面发生了更改，则调用该方法。  
     
      <p>如果直接对 <codeph>typicalItem</codeph> 进行更改，则会自动调用该方法。这说明如果属性设置为某一新值，则该新值与当前值不具有“==”的关系。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:isCellVisible"><apiName>isCellVisible</apiName><shortdesc>
      如果指定的单元格至少部分可见，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果指定的单元格（或行，如果 columnIndex == -1）至少部分可见，则为 true
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>项呈示器的单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>项呈示器的单元格的从零开始的列索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果指定的单元格至少部分可见，则返回 <codeph>true</codeph>。如果 <codeph>columnIndex == -1</codeph>，则在指定的行至少部分可见时返回 <codeph>true</codeph>。如果 <codeph>rowIndex == -1</codeph>，则指定列至少部分可见时返回 <codeph>true</codeph>。如果 <codeph>columnIndex</codeph> 和 <codeph>rowIndex</codeph> 同时为 -1，则返回 <codeph>false</codeph>。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Grid:removeSelectedCell"><apiName>removeSelectedCell</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_CELL 或 GridSelectionMode.MULTIPLE_CELLS，删除选定内容中的单元格并将插入标记位置设置为该单元格。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>rowIndex</codeph> 或 <codeph>columnIndex</codeph> 无效，或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的列索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，删除选定内容中的单元格并将尖号位置设置为该单元格。对于所有其它选择模式，此方法不起作用。
     
      <p><codeph>rowIndex</codeph> 是包含所选单元格的项的数据提供程序中的索引。<codeph>columnIndex</codeph> 是包含所选单元格的列的 <codeph>columns</codeph> 中的索引。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:removeSelectedIndex"><apiName>removeSelectedIndex</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_ROW 或 GridSelectionMode.MULTIPLE_ROWS，删除选定内容中的此行并将尖号位置设置为此行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>index</codeph> 无效或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。 
           
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，删除选定内容中的此行并将尖号位置设置为此行。对于所有其它选择模式，此方法不起作用。
     
      <p><codeph>rowIndex</codeph> 是包含所选单元格的项的数据提供程序中的索引。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectAll"><apiName>selectAll</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.MULTIPLE_ROWS，选择所有行并删除尖号；如果 selectionMode 是 GridSelectionMode.MULTIPLE_CELLS，选择所有单元格并删除尖号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果选定内容发生更改，则为 <codeph>true</codeph>。
        
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，选择所有行并删除插入标记；如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，选择所有单元格并删除插入标记。对于所有其它选择模式，此方法不起作用。
     
      <p>如果调用此方法后向 <codeph>dataProvider</codeph> 添加项目或添加了 <codeph>columns</codeph>，将选择新的行或新列中的单元格。</p>
     
      <p>发生以下任一情况时该隐式“全选”模式将结束：
      <ul>
        <li>使用 <codeph>clearSelection</codeph> 清除选定内容</li>
        <li>使用 <codeph>setSelectedCell</codeph>、<codeph>setSelectedCells</codeph>、<codeph>setSelectedIndex</codeph> 或 <codeph>selectIndices</codeph> 之一重置选定内容</li>
        <li><codeph>dataProvider</codeph> 已刷新且 <codeph>preserveSelection</codeph> 为 false</li>
        <li><codeph>dataProvider</codeph> 已重置</li>
        <li><codeph>columns</codeph> 已刷新，<codeph>preserveSelection</codeph> 为 <codeph>false</codeph> 且 <codeph>selectionMode</codeph> 为 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph></li>
        <li><codeph>columns</codeph> 已重置且 <codeph>selectionMode</codeph> 为 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph></li> 
      </ul></p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/clearSelection"><linktext>spark.components.Grid.clearSelection</linktext></link><link href="spark.components.xml#Grid/selectIndices"><linktext>spark.components.Grid.selectIndices</linktext></link><link href="spark.components.xml#Grid/setSelectedCell"><linktext>spark.components.Grid.setSelectedCell</linktext></link><link href="spark.components.xml#Grid/setSelectedCells"><linktext>spark.components.Grid.setSelectedCells</linktext></link><link href="spark.components.xml#Grid/setSelectedIndex"><linktext>spark.components.Grid.setSelectedIndex</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectCellRegion"><apiName>selectCellRegion</apiName><shortdesc> 
      如果 selectionMode 是 GridSelectionMode.MULTIPLE_CELLS，则将选定内容设置为单元格区域中所有单元格并将尖号位置设置为单元格区域中最后一个单元格。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果单元格区域无效或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格区域原点的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格区域原点的从零开始的列索引。
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="uint"/><apiDesc>要包含在单元格区域中的行数，从 <codeph>rowIndex</codeph> 开始。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="uint"/><apiDesc>要包含在单元格区域中的列数，从 <codeph>columnIndex</codeph> 开始。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则将选定内容设置为单元格区域中的所有单元格并将尖号位置设置为单元格区域中的最后一个单元格。对于所有其它选择模式，此方法不起作用。
     
      <p><codeph>rowIndex</codeph> 是包含单元格区域的原点的项的数据提供程序中的索引。<codeph>columnIndex</codeph> 是包含单元格区域的原点的列的 <codeph>columns</codeph> 中的索引。</p>
     
      <p>如果单元格区域没有完全包含在网格中，此方法不起作用。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectIndices"><apiName>selectIndices</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.MULTIPLE_ROWS，则将选定内容设置为指定行并将尖号位置设置为 endRowIndex。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果所有索引都无效或 <codeph>startRowIndex</codeph> 大于 <codeph>endRowIndex</codeph> 或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>选定内容中第一行的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>选定内容中的行数。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则将选定内容设置为指定行并将尖号位置设置为 <codeph>endRowIndex</codeph>。对于所有其它选择模式，此方法不起作用。
     
      <p>每个索引表示要包含在选定内容中的数据提供程序中的一项。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsCellRegion"><apiName>selectionContainsCellRegion</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.MULTIPLE_CELLS 且单元格区域中的单元格位于当前选定内容中，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果当前选定内容包含单元格区域中的所有单元格，则返回 <codeph>true</codeph>。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的列索引。
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>要包含在单元格区域中的行数，从 <codeph>rowIndex</codeph> 开始。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiDesc>要包含在单元格区域中的列数，从 <codeph>columnIndex</codeph> 开始。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> 且单元格区域中的单元格位于当前选定内容中，则返回 <codeph>true</codeph>。
     
      <p><codeph>rowIndex</codeph> 必须介于 0 和数据提供程序的长度之间。<codeph>columnIndex</codeph> 必须介于 0 和 <codeph>columns</codeph> 的长度之间。 </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsCell"><apiName>selectionContainsCell</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_CELL 或 GridSelectionMode.MULTIPLE_CELLS 且单元格位于当前选定内容中，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果当前选定内容包含单元格，则返回 <codeph>true</codeph>。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的列索引。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph> 且单元格位于当前选定内容中，则返回 <codeph>true</codeph>。
     
      <p><codeph>rowIndex</codeph> 必须介于 0 和数据提供程序的长度之间。<codeph>columnIndex</codeph> 必须介于 0 和 <codeph>columns</codeph> 的长度之间。 </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsIndex"><apiName>selectionContainsIndex</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_ROW 或 GridSelectionMode.MULTIPLE_ROWS 且索引处的行位于当前选定内容中，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果选定内容包含此行，则返回 <codeph>true</codeph>。
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行的从零开始的行索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> 且 <codeph>index</codeph> 处的行位于当前选定内容中，则返回 <codeph>true</codeph>。
     
      <p><codeph>rowIndex</codeph> 是包含所选单元格的项的数据提供程序中的索引。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:selectionContainsIndices"><apiName>selectionContainsIndices</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.MULTIPLE_ROWS 且 indices 中的行位于当前选定内容中，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果当前选定内容包含这些行，则返回 <codeph>true</codeph>。
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndices</apiItemName><apiType value="Vector$int"/><apiDesc>要包含在选定内容中的从零开始的行索引的矢量。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph> 且 <codeph>indices</codeph> 中的行位于当前选定内容中，则返回 <codeph>true</codeph>。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:setSelectedCell"><apiName>setSelectedCell</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_CELL 或 GridSelectionMode.MULTIPLE_CELLS，则将选定内容和尖号位置设置为此单元格。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>rowIndex</codeph> 或 <codeph>columnIndex</codeph> 无效，或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的列索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则将选定内容和尖号位置设置为此单元格。对于所有其它选择模式，此方法不起作用。
     
      <p><codeph>rowIndex</codeph> 是包含所选单元格的项的数据提供程序中的索引。<codeph>columnIndex</codeph> 是包含所选单元格的列的 <codeph>columns</codeph> 中的索引。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiOperation id="spark.components:Grid:setSelectedIndex"><apiName>setSelectedIndex</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_ROW 或 GridSelectionMode.MULTIPLE_ROWS，则将选定内容和尖号位置设置为此行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>index</codeph> 无效，或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。 
        
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则将选定内容和尖号位置设置为此行。对于所有其它选择模式，此方法不起作用。
     
      <p><codeph>rowIndex</codeph> 是包含所选单元格的项的数据提供程序中的索引。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiOperation><apiValue id="spark.components:Grid:anchorColumnIndex:get"><apiName>anchorColumnIndex</apiName><shortdesc>
      下一个结合 Shift 键选择的锚点的列索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="anchorColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      下一个结合 Shift 键选择的<i>锚点</i>的列索引。锚点是最近选定的项。它在网格中选择多个项时定义锚点项。当您选择多个项时，这一组项从锚点扩展至插入标记项。
     
      <p>网格事件处理函数应使用此属性记录最近未结合 Shift 键的鼠标按下或键盘事件的位置，该事件定义下一个潜在移动选择的一端。尖号索引定义另一端。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:anchorRowIndex:get"><apiName>anchorRowIndex</apiName><shortdesc>
      下一个结合 Shift 键选择的锚点的行索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="anchorRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      下一个结合 Shift 键选择的<i>锚点</i>的行索引。锚点是最近选定的项。它在网格中选择多个项时定义锚点项。当您选择多个项时，这一组项从锚点扩展至插入标记项。
     
      <p>网格事件处理函数应使用此属性记录最近未结合 Shift 键的鼠标按下或键盘事件的位置，该事件定义下一个潜在移动选择的一端。尖号索引定义另一端。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/caretRowIndex"><linktext>spark.components.Grid.caretRowIndex</linktext></link><link href="spark.components.xml#Grid/caretColumnIndex"><linktext>spark.components.Grid.caretColumnIndex</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:caretColumnIndex:get"><apiName>caretColumnIndex</apiName><shortdesc>
      如果 showCaretIndicator 为 true，则为 caretIndicator 的列索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>showCaretIndicator</codeph> 为 <codeph>true</codeph>，则为 <codeph>caretIndicator</codeph> 的列索引。
     
      <p>如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则指示符将占用整行，并忽略 <codeph>caretColumnIndex</codeph>。如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则 <codeph>caretIndicator</codeph> 将占用指定单元格。</p>
     
      <p>将 <codeph>caretColumnIndex</codeph> 设置为 -1 表示未定义列索引且不显示单元格插入标记。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:caretIndicator:get"><apiName>caretIndicator</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_ROW 或 GridSelectionMode.MULTIPLE_ROWS，则为针对插入标记行显示的单个可视元素；如果 selectionMode 是 GridSelectionMode.SINGLE_CELL 或 GridSelectionMode.MULTIPLE_CELLS，则为针对插入标记单元格显示的可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则为针对插入标记行显示的单个可视元素；如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则为针对插入标记单元格显示的可视元素。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:caretRowIndex:get"><apiName>caretRowIndex</apiName><shortdesc>
      如果 showCaretIndicator 为 true，则为 caretIndicator 的行索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>showCaretIndicator</codeph> 为 <codeph>true</codeph>，则为 <codeph>caretIndicator</codeph> 的行索引。如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则指示符将占用整行，并忽略 <codeph>caretColumnIndex</codeph> 属性。如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则 <codeph>caretIndicator</codeph> 将占用指定单元格。
     
      <p>将 <codeph>caretRowIndex</codeph> 设置为 -1 表示未定义行索引且不显示插入标记。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:columnSeparator:get"><apiName>columnSeparator</apiName><shortdesc>
      显示在各列之间的可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      显示在各列之间的可视元素。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:columns:get"><apiName>columns</apiName><shortdesc>
      由该网格显示的 GridColumn 对象列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      由该网格显示的 GridColumn 对象列表。每列选择要显示的不同数据提供程序项属性。
      
      <p>GridColumn 对象仅可以显示在单个 Grid 控件的 <codeph>columns</codeph> 中。</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:dataGrid:get"><apiName>dataGrid</apiName><shortdesc>
      如果该 Grid 用作网格外观部件，则为 DataGrid 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataGridChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果该 Grid 用作网格外观部件，则为 DataGrid 控件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      与网格中的行对应的数据项的列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      与网格中的行对应的数据项的列表。每个网格列与要在网格<i>单元格</i>中显示属性的数据项的属性相关联。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/columns"><linktext>spark.components.Grid.columns</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:dataTipField:get"><apiName>dataTipField</apiName><shortdesc conref="spark.components.gridClasses.GridColumn#dataTipField">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFieldChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.gridClasses.GridColumn#dataTipField">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:dataTipFunction:get"><apiName>dataTipFunction</apiName><shortdesc conref="spark.components.gridClasses.GridColumn#dataTipFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.gridClasses.GridColumn#dataTipFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverColumnIndex:get"><apiName>hoverColumnIndex</apiName><shortdesc>
      如果 showHoverIndicator 为 true，则指定 hoverIndicator 的列索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>showHoverIndicator</codeph> 为 <codeph>true</codeph>，则指定 <codeph>hoverIndicator</codeph> 的列索引。如果 <codeph>selectionMode</codeph> 为 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则指示符将占用整行，并忽略 <codeph>hoverColumnIndex</codeph>。如果 <codeph>selectionMode</codeph> 为 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则 <codeph>hoverIndicator</codeph> 将占用指定单元格。
      
      <p>将 <codeph>hoverColumnIndex</codeph> 设置为 -1（默认值）表示未定义列索引且不显示单元格悬停指示符。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverIndicator:get"><apiName>hoverIndicator</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_ROW 或 GridSelectionMode.MULTIPLE_ROWS。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>。为鼠标下的行显示的单个可视元素。如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则为单元格的可视元素。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:hoverRowIndex:get"><apiName>hoverRowIndex</apiName><shortdesc>
      如果 showHoverIndicator 为 true，则指定 hoverIndicator 的列索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverRowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>showHoverIndicator</codeph> 为 <codeph>true</codeph>，则指定 <codeph>hoverIndicator</codeph> 的列索引。如果 <codeph>selectionMode</codeph> 为 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则指示符将占用整行，并忽略 <codeph>hoverColumnIndex</codeph>。如果 <codeph>selectionMode</codeph> 为 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则 <codeph>hoverIndicator</codeph> 将占用指定单元格。
     
      <p>将 <codeph>hoverRowIndex</codeph> 设置为 -1（默认值）表示未定义行索引且不显示悬停指示符。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      项呈示器，用于不指定项呈示器的列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      项呈示器，用于不指定项呈示器的列。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:preserveSelection:get"><apiName>preserveSelection</apiName><shortdesc>
      如果为 true，数据提供程序刷新其集合时会保留选定内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，数据提供程序刷新其集合时会保留选定内容。因为此刷新需要保存选定内容中的每一项，所以如果选定内容的大小很大，则不希望执行此操作。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc>
      此网格的测量宽度足以显示前面的 requestedColumnCount 个列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此网格的测量宽度足以显示前面的 <codeph>requestedColumnCount</codeph> 个列。如果 <codeph>requestedColumnCount</codeph> 为 -1，则测量宽度足以显示所有列。
     
      <p>如果已显式设置网格的实际大小，则此属性不起作用。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc>
      此网格的测量高度足以显示至多 requestedMaxRowCount 个行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此网格的测量高度足以显示至多 <codeph>requestedMaxRowCount</codeph> 个行。
     
      <p>如果以下任一项为 true，则此属性无效：
      <ul>
          <li>已设置 <codeph>requestedRowCount</codeph>。</li>
          <li>已显式设置网格的实际大小。</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc>
      此网格的测量宽度足以显示至少 requestedMinColumnCount 个列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此网格的测量宽度足以显示至少 <codeph>requestedMinColumnCount</codeph> 个列。
     
      <p>如果以下任一项为 true，则此属性无效：
      <ul>
          <li>已设置 <codeph>requestedColumnCount</codeph>。</li>
          <li>已显式设置网格的实际大小。</li>
          <li>网格位于 Scroller 组件内。</li>
      </ul>
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc>
      此网格的测量高度足以至少显示 requestedMinRowCount 个行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此网格的测量高度足以至少显示 <codeph>requestedMinRowCount</codeph> 个行。
     
      <p>如果以下任一项为 true，则此属性无效：
      <ul>
          <li>已设置 <codeph>requestedRowCount</codeph>。</li>
          <li>已显式设置网格的实际大小。</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc>
      此网格的测量高度足以显示前面的 requestedRowCount 个行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此网格的测量高度足以显示前面的 <codeph>requestedRowCount</codeph> 个行。 
     
      <p>如果 <codeph>requestedRowCount</codeph> 为 -1，则测量大小足以显示所有布局元素。</p>
     
      <p>如果已显式设置网格的实际大小，则此属性不起作用。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      如果为 true 且 selectionMode 属性不是 GridSelectionMode.NONE，则必须始终在网格中选中某一项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph> 且 <codeph>selectionMode</codeph> 属性不是 <codeph>GridSelectionMode.NONE</codeph>，则必须始终在网格中选中某一项。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:resizableColumns:get"><apiName>resizableColumns</apiName><shortdesc>
      指示用户能否更改列的尺寸。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resizableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
        
      </apiDefaultValue></apiValueDef><apiDesc>
      指示用户能否更改列的尺寸。 如果为 <codeph>true</codeph>，则用户可以通过在标题单元格之间拖动网格线来伸展或缩短 DataGrid 控件的列。如果为 <codeph>true</codeph>，则还必须将单个列的 <codeph>resizable</codeph> 设置为 <codeph>false</codeph> 以防止用户调整特定列的大小。  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:rowBackground:get"><apiName>rowBackground</apiName><shortdesc>
      为每行显示背景的可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowBackgroundChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      为每行显示背景的可视元素。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:rowHeight:get"><apiName>rowHeight</apiName><shortdesc>
      如果 variableRowHeight 为 false，则此属性指定每行的实际高度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      如果 <codeph>variableRowHeight</codeph> 为 <codeph>false</codeph>，则此属性指定每行的实际高度（以像素为单位）。
     
      <p>如果 <codeph>variableRowHeight</codeph> 为 <codeph>true</codeph>，将此属性的值用作尚未滚动到可视范围内的行的估计高度，而不是使用 <codeph>typicalItem</codeph> 配置的呈示器的首选高度。同样，当 Grid 使用空行填充其显示时，此属性指定空行的高度。</p>
     
      <p>如果 <codeph>variableRowHeight</codeph> 为 <codeph>false</codeph>，则此属性的默认值是为 <codeph>typicalItem</codeph> 创建的每列呈示器的最大首选高度。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:rowSeparator:get"><apiName>rowSeparator</apiName><shortdesc>
      显示在各行之间的可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      显示在各行之间的可视元素。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedCell:get"><apiName>selectedCell</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_CELL 或 GridSelectionMode.MULTIPLE_CELLS，则返回第一个选定单元格（起点为 0 行 0 列），并在移动到下一行之前处理行中的每列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:CellPosition</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则返回第一个选定单元格（起点为 0 行 0 列），并在移动到下一行之前处理行中的每列。
     
      <p>当用户通过与控件进行交互更改选定内容时，控件将分派 <codeph>selectionChange</codeph> 事件。当用户以编程方式更改选定内容时，控件将分派 <codeph>valueCommit</codeph> 事件。</p>
     
      <p> 此属性可用于初始化或绑定到 MXML 标记中的选择。<codeph>setSelectedCell()</codeph> 方法应用于程序选择更新，例如编写 keyboard 或 mouse 事件处理函数时。 </p> 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedCells:get"><apiName>selectedCells</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_CELL 或 GridSelectionMode.MULTIPLE_CELLS，则返回表示网格中选定单元格位置的 CellPosition 对象的 Vector。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiValueDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则返回表示网格中选定单元格位置的 CellPosition 对象的 Vector。
     
      <p>当用户通过与控件进行交互更改选定内容时，控件将分派 <codeph>selectionChange</codeph> 事件。当用户以编程方式更改选定内容时，控件将分派 <codeph>valueCommit</codeph> 事件。</p>
     
      <p> 此属性可用于初始化或绑定到 MXML 标记中的选择。<codeph>setSelectedCell()</codeph> 方法应用于程序选择更新，例如编写 keyboard 或 mouse 事件处理函数时。 </p> 
     
      <p>默认值为空 <codeph>Vector.&lt;CellPosition></codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_ROW 或 GridSelectionMode.MULTIPLE_ROWS，则返回第一个选定行的 rowIndex。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则返回第一个选定行的 rowIndex。 
     
      <p>当用户通过与控件进行交互更改选定内容时，控件将分派 <codeph>selectionChange</codeph> 事件。当用户以编程方式更改选定内容时，控件将分派 <codeph>valueCommit</codeph> 事件。</p>
     
      <p> 此属性可用于初始化或绑定到 MXML 标记中的选择。<codeph>setSelectedCell()</codeph> 方法应用于程序选择更新，例如编写 keyboard 或 mouse 事件处理函数时。 </p> 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_ROW 或 GridSelectionMode.MULTIPLE_ROWS，则返回选定行索引的 Vector。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/></apiValueDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则返回选定行索引的 Vector。对于所有其它选择模式，此方法不起作用。
     
      <p>当用户通过与控件进行交互更改选定内容时，控件将分派 <codeph>selectionChange</codeph> 事件。当用户以编程方式更改选定内容时，控件将分派 <codeph>valueCommit</codeph> 事件。</p>
     
      <p> 此属性可用于初始化或绑定到 MXML 标记中的选择。setSelectedCell() 方法应用于程序选择更新，例如编写 keyboard 或 mouse 事件处理函数时。 </p> > 
     
      <p>默认值为空 <codeph>Vector.&lt;int></codeph></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_ROW 或 GridSelectionMode.MULTIPLE_ROWS，则返回当前选定或 undefined（如果未选定任何行）的数据提供程序中的项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则返回当前选定或 <codeph>undefined</codeph>（如果未选定任何行）的数据提供程序中的项。  
     
      <p>当用户通过与控件进行交互更改选定内容时，控件将分派 <codeph>selectionChange</codeph> 事件。当用户以编程方式更改选定内容时，控件将分派 <codeph>valueCommit</codeph> 事件。</p>
     
      <p> 此属性可用于初始化或绑定到 MXML 标记中的选择。<codeph>setSelectedCell()</codeph> 方法应用于程序选择更新，例如编写 keyboard 或 mouse 事件处理函数时。 </p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_ROW 或 GridSelectionMode.MULTIPLE_ROWS，则返回当前选择的 dataProvider 项目的 Vector。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/></apiValueDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则返回当前选择的 dataProvider 项目的 Vector。
     
      <p>当用户通过与控件进行交互更改选定内容时，控件将分派 <codeph>selectionChange</codeph> 事件。当用户以编程方式更改选定内容时，控件将分派 <codeph>valueCommit</codeph> 事件。</p>
     
      <p> 此属性可用于初始化或绑定到 MXML 标记中的选择。setSelectedCell() 方法应用于程序选择更新，例如编写 keyboard 或 mouse 事件处理函数时。 </p> 
      
      <p>默认值为空 <codeph>Vector.&lt;Object></codeph></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Grid/dataProvider"><linktext>spark.components.Grid.dataProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:selectionIndicator:get"><apiName>selectionIndicator</apiName><shortdesc>
      如果 selectionMode 是 GridSelectionMode.SINGLE_ROW 或 GridSelectionMode.MULTIPLE_ROWS，则为针对每个选定行显示的可视元素；如果 selectionMode 是 GridSelectionMode.SINGLE_CELL 或 GridSelectionMode.MULTIPLE_CELLS，则为针对每个选定单元格显示的可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则为针对每个选定行显示的可视元素；如果 <codeph>selectionMode</codeph> 是 <codeph>GridSelectionMode.SINGLE_CELL</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则为针对每个选定单元格显示的可视元素。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectionLength:get"><apiName>selectionLength</apiName><shortdesc>
      如果 selectionMode 为 GridSelectionMode.SINGLE_ROW 或 GridSelectionMode.MULTIPLE_ROWS，则返回所选行的数量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>selectionMode</codeph> 为 <codeph>GridSelectionMode.SINGLE_ROW</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>，则返回所选行的数量；如果 <codeph>selectionMode</codeph> 为 <codeph>GridSelectionMode.SINGLE_CELLS</codeph> 或 <codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>，则返回所选单元格的数量。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:selectionMode:get"><apiName>selectionMode</apiName><shortdesc>
      控件的选择模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionModeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>GridSelectionMode.SINGLE_ROW
     
      </apiDefaultValue></apiValueDef><apiDesc>
      控件的选择模式。可能的值是：<codeph>GridSelectionMode.MULTIPLE_CELLS</codeph>、<codeph>GridSelectionMode.MULTIPLE_ROWS</codeph>、<codeph>GridSelectionMode.NONE</codeph>、<codeph>GridSelectionMode.SINGLE_CELL</codeph> 和 <codeph>GridSelectionMode.SINGLE_ROW</codeph>。
     
      <p>更改 selectionMode 会导致清除当前选定内容，并将 caretRowIndex 和 caretColumnIndex 设置为 -1。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Grid:showDataTips:get"><apiName>showDataTips</apiName><shortdesc>
      如果为 true，则显示所有可见单元格的 dataTip。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showDataTipsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则显示所有可见单元格的 dataTip。如果为 <codeph>false</codeph>（默认值），则仅当列的 <codeph>showDataTips</codeph> 属性为 <codeph>true</codeph> 时才显示 dataTip。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      网格的布局确保未指定宽度的列足以显示此默认数据提供程序项的项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="typicalItemChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      网格的布局确保未指定宽度的列足以显示此默认数据提供程序项的项呈示器。如果未指定典型项，则使用第一个数据提供程序项。
     
      <p>限制：如果 <codeph>typicalItem</codeph> 是 IVisualItem，则它不能同时是数据提供程序的成员。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Grid:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc>
      如果为 true，则每行的高度是到目前为止显示的单元格首选高度的最大值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="variableRowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则每行的高度是到目前为止显示的单元格首选高度的最大值。
     
      <p>如果为 <codeph>false</codeph>，则每行的高度恰好是 <codeph>rowHeight</codeph> 属性的值。如果未指定 <codeph>rowHeight</codeph>，则每行的高度由 <codeph>typicalItem</codeph> 属性定义。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Application"><apiName>Application</apiName><shortdesc>
  Flex 将定义一个默认容器（或 Application 容器）。这样，您无需显式定义其它容器即可向应用程序中添加内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="direction"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Application" playerVersion="Flash10" type="uint">
<description>
  应用程序的背景色。将此颜色用作应用程序的舞台颜色和 HTML 嵌入标签的背景色。
   </description>
<default>0x464646
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Application" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      定义容器控件栏区域外观的外观部件。默认情况下，ApplicationSkin 类定义以灰色背景显示在 Application 容器内容区域顶部的控件栏区域。
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the
      control bar area of the container.</shortdesc><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Application&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Application
    <strong>Properties</strong>
    applicationDPI=<i>Device dependent</i>"
    backgroundColor="0xFFFFFF"
    colorCorrection="default"
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    frameRate="24"
    pageTitle""
    preloader="<i>No default</i>"
    preloaderChromeColor="<i>No default</i>"
    resizeForSoftKeyboard=true"
    runtimeDPIProvider="RuntimeDPIProvider"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    splashScreenImage=""
    splashScreenMinimumDisplayTime="1000"
    splashScreenScaleMode="none"
    usePreloader="true"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
     <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex 将定义一个默认容器（或 Application 容器）。这样，您无需显式定义其它容器即可向应用程序中添加内容。
   <p>Application 容器具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>如果在独立 Flash Player 中，则为 375 个像素高 × 500 个像素宽；如果在浏览器中，则为所有可用空间</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素宽 × 0 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>无限制</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.ApplicationSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ApplicationContainerExample.mxml"><swfblock conref="examples/ApplicationContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Application_flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR_uncaughtError"><apiName>uncaughtError</apiName><shortdesc>
  在全局异常处理函数捕获未捕获的错误时分派
   </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.UncaughtErrorEvent.UNCAUGHT_ERROR</apiEventType><adobeApiEventClassifier>flash.events.UncaughtErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在全局异常处理函数捕获未捕获的错误时分派
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  当 HTTPService 调用失败时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 HTTPService 调用失败时分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  在 Application 经过初始化、由 LayoutManager 处理并附加到显示列表后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在 Application 经过初始化、由 LayoutManager 处理并附加到显示列表后分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Application:Application"><apiName>Application</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
           </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        指定应用程序的帧速率。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
           </apiDefaultValue></apiValueDef><apiDesc>
        指定应用程序的帧速率。
             <p><b>注意：</b>无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        指定在浏览器的标题栏中显示的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
           </apiDefaultValue></apiValueDef><apiDesc>
        指定在浏览器的标题栏中显示的字符串。此属性与 HTML<codeph>&lt;title></codeph> 标签提供相同的功能。
             <p><b>注意：</b>无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。MXML 代码中设置的值是为了供某个工具使用而设计的，用于更新随 SDK 提供的 HTML 模板。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloaderChromeColor"><apiName>preloaderChromeColor</apiName><shortdesc>
      指定默认预加载器组件使用的镶边颜色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
      指定默认预加载器组件使用的镶边颜色。此属性具有与 Spark 外观所用的 <codeph>chromeColor</codeph> 样式相同的效果。通常应将此属性设置为与 Application 容器的 <codeph>chromeColor</codeph> 样式属性相同的值。
           <p>注意：无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:preloader"><apiName>preloader</apiName><shortdesc>
      应用程序容器支持应用程序预加载器，该预加载器使用下载进度条来显示应用程序 SWF 文件的下载和初始化进度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      应用程序容器支持应用程序预加载器，该预加载器使用下载进度条来显示应用程序 SWF 文件的下载和初始化进度。默认情况下，已启用应用程序预加载器。预加载器跟踪已下载的字节数，并持续更新进度条。 
           <p>使用此属性指定用于定义自定义进度指示符的组件的路径。要创建自定义进度指示符，通常需要创建 SparkDownloadProgressBar 或 DownloadProgressBar 类的子类，或者创建用于实现 mx.preloaders.IPreloaderDisplay 接口的 flash.display.Sprite 类的子类。 </p>
           <p><b>注意：</b>无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.preloaders.SparkDownloadProgressBar.xml"><linktext>mx.preloaders.SparkDownloadProgressBar</linktext></link><link href="" invalidHref="mx.preloaders.DownloadProgressBar.xml"><linktext>mx.preloaders.DownloadProgressBar</linktext></link><link href="" invalidHref="flash.display.Sprite.xml"><linktext>flash.display.Sprite</linktext></link><link href="" invalidHref="mx.preloaders.IPreloaderDisplay.xml"><linktext>mx.preloaders.IPreloaderDisplay</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        指定在播放器停止播放前，Flash Player 或 AIR 调用堆栈的最大深度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
           </apiDefaultValue></apiValueDef><apiDesc>
        指定在播放器停止播放前，Flash Player 或 AIR 调用堆栈的最大深度。这实质上是堆栈溢出限制。
             <p><b>注意：</b>无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        指定在 Flash Player 或 AIR 假定 ActionScript 事件处理函数是挂起的因而终止该程序之前，该程序可执行的最长持续时间（以秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
           </apiDefaultValue></apiValueDef><apiDesc>
        指定在 Flash Player 或 AIR 假定 ActionScript 事件处理函数是挂起的因而终止该程序之前，该程序可执行的最长持续时间（以秒为单位）。您可以设置的最大允许值是 60 秒。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:splashScreenMinimumDisplayTime"><apiName>splashScreenMinimumDisplayTime</apiName><shortdesc>
      显示启动屏幕图像所用的时间最小值（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>1000
     
      </apiDefaultValue></apiValueDef><apiDesc>
      显示启动屏幕图像所用的时间最小值（以毫秒为单位）。使用 <codeph>splashScreenImage</codeph> 属性指定启动屏幕图像。
           <p><b>注意：</b>仅当已设置 <codeph>splashScreenImage</codeph> 属性，并且 <codeph>preloader</codeph> 属性设置为 spark.preloaders.SplashScreen 时，此属性才有效。spark.preloaders.SplashScreen 类是 Mobile Flex 的默认预加载器。无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
           <p><b>注意：</b>您必须将 frameworks\libs\mobile\mobilecomponents.swc 添加到应用程序的库路径中，以在桌面应用程序中支持启动屏幕。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/splashScreenImage"><linktext>splashScreenImage</linktext></link><link href="spark.components.xml#Application/splashScreenScaleMode"><linktext>splashScreenScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:splashScreenScaleMode"><apiName>splashScreenScaleMode</apiName><shortdesc>
      启动屏幕图像缩放模式：none 值表示图像大小已设置为匹配其固有大小。stretch 值将图像的宽度和高度设置为舞台的宽度和高度，这可能会更改内容的高宽比。letterbox 值在保持高宽比的同时将图像的宽度和高度设置为尽可能接近于舞台的宽度和高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"none"
      </apiDefaultValue></apiValueDef><apiDesc>
      启动屏幕图像缩放模式：
      
      <ul>
          <li><codeph>none</codeph> 值表示图像大小已设置为匹配其固有大小。</li>
               <li><codeph>stretch</codeph> 值将图像的宽度和高度设置为舞台的宽度和高度，这可能会更改内容的高宽比。</li>
               <li><codeph>letterbox</codeph> 值在保持高宽比的同时将图像的宽度和高度设置为尽可能接近于舞台的宽度和高度。将图像放大到舞台边界的最大指，如有必要，在舞台内添加间距以保持高宽比。</li>
               <li><codeph>zoom</codeph> 值与 <codeph>letterbox</codeph> 类似，区别在于 <codeph>zoom</codeph> 将图像放大到超过舞台边界，以删除为保持高宽比所需的间距。该设置与使用舞台的整个边界效果相同，但也可能会裁剪部分图像。</li>
      </ul>
           <p>未被图像覆盖的舞台部分显示的颜色为 Application 容器的 <codeph>backgroundColor</codeph>。</p>
           <p><b>注意：</b>仅当已设置 <codeph>splashScreenImage</codeph> 属性，并且 <codeph>preloader</codeph> 属性设置为 spark.preloaders.SplashScreen 时，此属性才有效。spark.preloaders.SplashScreen 类是 Mobile Flex 的默认预加载器。无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
           <p><b>注意：</b>您必须将 frameworks\libs\mobile\mobilecomponents.swc 添加到应用程序的库路径中，以在桌面应用程序中支持启动屏幕。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/splashScreenImage"><linktext>splashScreenImage</linktext></link><link href="spark.components.xml#Application/splashScreenMinimumDisplayTime"><linktext>splashScreenMinimumDisplayTime</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        如果设置为 true，则指定为显示应用程序 preloader。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
        如果设置为 <codeph>true</codeph>，则指定为显示应用程序 preloader。
             <p><b>注意：</b>无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
             </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:applicationDPI:get"><apiName>applicationDPI</apiName><shortdesc>
      应用程序的 DPI。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      应用程序的 DPI。默认情况下，这是应用程序当前正在其上运行的设备的 DPI。在 MXML 中设置时，Flex 会调整应用程序以将其 DPI 与 <codeph>runtimeDPI</codeph> 匹配。无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/runtimeDPI"><linktext>runtimeDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:aspectRatio:get"><apiName>aspectRatio</apiName><shortdesc>
      根据顶层舞台的宽度和高度返回其高宽比。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      根据顶层舞台的宽度和高度返回其高宽比。如果舞台的宽度大于高度，则将此舞台视为“横向”。否则，将返回纵向。
      
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:colorCorrection:get"><apiName>colorCorrection</apiName><shortdesc>
     舞台的 colorCorrection 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ColorCorrection.DEFAULT
         </apiDefaultValue></apiValueDef><apiDesc>
     舞台的 <codeph>colorCorrection</codeph> 属性的值。如果此应用程序无权访问舞台的 <codeph>colorCorrection</codeph> 属性，则 <codeph>colorCorrection</codeph> 属性的值为 <codeph>null</codeph>。
         <p>仅允许主应用程序设置 <codeph>colorCorrection</codeph> 属性。如果嵌套应用程序需要设置 color correction 属性，则它必须通过引用主应用程序的实例进行设置。</p>
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.ColorCorrection.xml"><linktext>flash.display.ColorCorrection</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      包含在 Application 容器控件栏区域中的组件集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      包含在 Application 容器控件栏区域中的组件集。Application 容器控件栏区域的位置和外观由 spark.skins.spark.ApplicationSkin 类确定。默认情况下，ApplicationSkin 类定义以灰色背景显示在 Application 容器内容区域顶部的控件栏区域。创建自定义外观以更改控件栏的默认外观。
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ApplicationSkin"><linktext>spark.skins.spark.ApplicationSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      定义容器控件栏区域的布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      定义容器控件栏区域的布局。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      如果为 true，则控件栏可见。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
           </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则控件栏可见。如果未设置 <codeph>controlBarContent</codeph> 属性的值，则该标志无效。
           <p><b>注意：</b>Application 容器不会监视 <codeph>controlBarGroup</codeph> 属性。如果有其他代码使其不可见，则 Application 容器可能不会正常更新。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      包含表示提供给此 Application 的参数的名称-值对的 Object。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      包含表示提供给此 Application 的参数的名称-值对的 Object。
           <p>可以使用 for-in 循环来提取 parameters Object 中的所有名称和值。</p>
           <p>参数有两个源：Application 的 URL 中的查询字符串和 FlashVars HTML 参数（仅适用于主 Application）的值。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:resizeForSoftKeyboard:get"><apiName>resizeForSoftKeyboard</apiName><shortdesc>
      一些设备不支持硬件键盘。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      一些设备不支持硬件键盘。而这些设备使用在必要时会在屏幕上打开的键盘。屏幕键盘也称作软键盘或虚拟键盘，用户输入信息或取消操作后会自行关闭。<codeph>true</codeph> 值表示打开或关闭软键盘时已调整应用程序的大小。  
           <p>要可以调整应用程序大小，您还必须将应用程序的 xml 描述符文件中的 <codeph>&lt;softKeyboardBehavior></codeph> 属性设置为 <codeph>none</codeph>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:runtimeDPIProvider:get"><apiName>runtimeDPIProvider</apiName><shortdesc>
      为 runtimeDPI 扩展 RuntimeDPIProvider 和重写 Flex 默认计算的类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>spark.components.RuntimeDPIProvider
     
      </apiDefaultValue></apiValueDef><apiDesc>
      为 <codeph>runtimeDPI</codeph> 扩展 RuntimeDPIProvider 和重写 Flex 默认计算的类。
     
      <p>Flex 的默认映射为：
         <adobetable class="innertable">
            
            
            
         <tgroup cols="2"><tbody><row><entry>160 DPI</entry><entry>&lt;200 DPI</entry></row><row><entry>240 DPI</entry><entry>>=200 DPI 和 &lt;280 DPI</entry></row><row><entry>320 DPI</entry><entry>>=280 DPI</entry></row></tbody></tgroup></adobetable>
      </p>
     
      无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/applicationDPI"><linktext>applicationDPI</linktext></link><link href="spark.components.xml#Application/runtimeDPI"><linktext>runtimeDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link><link href="" invalidHref="mx.core.RuntimeDPIProvider.xml"><linktext>mx.core.RuntimeDPIProvider</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:runtimeDPI:get"><apiName>runtimeDPI</apiName><shortdesc>
      应用程序当前在其上运行的设备的 DPI。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      应用程序当前在其上运行的设备的 DPI。Flex 将值舍入为 <codeph>DPIClassification</codeph> 选项之一。 
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#Application/applicationDPI"><linktext>applicationDPI</linktext></link><link href="" invalidHref="mx.core.DPIClassification.xml"><linktext>mx.core.DPIClassification</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:splashScreenImage:get"><apiName>splashScreenImage</apiName><shortdesc>
      SplashScreen 预加载器的图像类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc>
      SplashScreen 预加载器的图像类。通常将此属性设置为嵌入资源，或者在单独的 MXML 中定义的 <codeph>SplashScreenImage</codeph> 类的名称。将 splashScreenImage 设置为嵌入图像的示例：
           <pre>splashScreenImage="@Embed('Default.png')"</pre>
           <p><b>注意：</b>仅当 <codeph>preloader</codeph> 属性设置为 spark.preloaders.SplashScreen 时，属性才有效。spark.preloaders.SplashScreen 类是 Mobile Flex 的默认预加载器。无法使用 ActionScript 代码设置此属性；必须使用 MXML 代码进行设置。</p>
           <p><b>注意：</b>您必须将 frameworks\libs\mobile\mobilecomponents.swc 添加到应用程序的库路径中，以在桌面应用程序中支持启动屏幕。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.preloaders.SplashScreen.xml"><linktext>spark.preloaders.SplashScreen</linktext></link><link href="spark.components.xml#Application/splashScreenScaleMode"><linktext>splashScreenScaleMode</linktext></link><link href="spark.components.xml#Application/splashScreenMinimumDisplayTime"><linktext>splashScreenMinimumDisplayTime</linktext></link></related-links></apiValue><apiValue id="spark.components:Application:url:get"><apiName>url</apiName><shortdesc>
      从中加载此应用程序的 SWF 文件的 URL。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      从中加载此应用程序的 SWF 文件的 URL。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      可以从中查看应用程序源的 URL。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      可以从中查看应用程序源的 URL。通过设置此属性，可以将“查看源”菜单项插入到应用程序的默认上下文菜单中。选择此菜单项将在新窗口中打开 <codeph>viewSourceURL</codeph>。
           <p>您必须使用 MXML（而非 ActionScript）设置 <codeph>viewSourceURL</codeph> 属性，如以下示例所示：</p>
           <pre>
        &lt;Application viewSourceURL="http://path/to/source">
          ...
        &lt;/Application></pre>
                </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Button"><apiName>Button</apiName><shortdesc>
  Button 组件是常用的矩形按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:Button" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  文本阴影的 Alpha。
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:Button" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  文本阴影的颜色。
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:Button" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  当 emphasized 标志为 true 时应用于按钮的颜色。 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Button&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Button 
    <strong>Properties</strong>
    emphasized="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Button 组件是常用的矩形按钮。Button 组件看起来可以按压。默认外观具有一个文本标签。定义一个自定义外观类，以向控件添加图像。
 
  <p>当用户选择 Button 控件时，该控件通常使用事件侦听器来执行操作。当用户在 Button 控件上单击鼠标时，就会启用 Button 控件，此控件分派 <codeph>click</codeph> 事件和 <codeph>buttonDown</codeph> 事件。无论按钮是处于启用状态还是禁用状态，总是会分派 <codeph>mouseMove</codeph>、<codeph>mouseOver</codeph>、<codeph>mouseOut</codeph>、<codeph>rollOver</codeph>、<codeph>rollOut</codeph>、<codeph>mouseDown</codeph> 和 <codeph>mouseUp</codeph> 等事件。</p>
 
  <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
 
  <p>Button 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以显示控件的文本标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>21 个像素宽 × 21 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.ButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ButtonExample.mxml"><swfblock conref="examples/ButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonSkin"><linktext>spark.skins.spark.ButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:Button:Button"><apiName>Button</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Button:emphasized:get"><apiName>emphasized</apiName><shortdesc>
     反映焦点管理器请求的默认按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="emphasizedChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
     反映焦点管理器请求的默认按钮。当某个按钮充当容器或表单中的默认按钮时，此属性通常由焦点管理器设置。设置为 true 时，会将 <codeph>emphasized</codeph> 样式追加到按钮的 <codeph>styleName</codeph> 属性。
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.managers.FocusManager.defaultButton.xml"><linktext>mx.managers.FocusManager.defaultButton</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:CheckBox"><apiName>CheckBox</apiName><shortdesc>
  CheckBox 组件包含一个可选标签和一个小方框，该方框内可以包含/不包含复选标记。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="icon"/><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:CheckBox" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components:CheckBox" playerVersion="Flash10" theme="mobile" type="String">
<description>
  与标签相关的图标的方向。有效的 MXML 值是 <codeph>right</codeph>、<codeph>left</codeph>、<codeph>bottom</codeph> 和 <codeph>top</codeph>。
 
  <p>在 ActionScript 中，您可以使用下列常量来设置此属性：<codeph>IconPlacement.RIGHT</codeph>、<codeph>IconPlacement.LEFT</codeph>、<codeph>IconPlacement.BOTTOM</codeph> 和 <codeph>IconPlacement.TOP</codeph>。</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:CheckBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
  <pre>
  &lt;s:CheckBox
    <strong>Properties</strong>
    symbolColor="0x000000"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  CheckBox 组件包含一个可选标签和一个小方框，该方框内可以包含/不包含复选标记。 
 
  <p>用户单击 CheckBox 组件或其关联文本时，CheckBox 组件会将其 <codeph>selected</codeph> 属性设置为 <codeph>true</codeph>（表示选中）或 <codeph>false</codeph>（表示取消选中）。</p>
 
  <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
 
  <p>CheckBox 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以显示控件的文本标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>18 个像素宽 × 18 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.CheckBoxSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="CheckBoxExample.mxml"><swfblock conref="examples/CheckBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#CheckBoxSkin"><linktext>spark.skins.spark.CheckBoxSkin</linktext></link></related-links><apiConstructor id="spark.components:CheckBox:CheckBox"><apiName>CheckBox</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Group"><apiName>Group</apiName><shortdesc>
  Group 类是可视元素的容器基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="mxmlContent"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:Group" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  文本阴影的 Alpha。
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:Group" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  文本阴影的颜色。
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Group&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Group
    <strong>Properties</strong>
    blendMode="auto"
    mxmlContent="null"
    scaleGridBottom="null"
    scaleGridLeft="null"
    scaleGridRight="null"
    scaleGridTop="null"
  
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>spark.core:IGraphicElementContainer</apiBaseInterface><apiBaseInterface>spark.core:ISharedDisplayObject</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Group 类是可视元素的容器基类。Group 容器将实现 IUIComponent 接口的任何组件和实现 IGraphicElement 接口的任何组件视为子代。希望管理可视子项（可视组件和图形组件）时，使用此容器。 
 
  <p>为了改进性能和最小化应用程序大小，不能设置 Group 容器的外观。如果希望应用外观，请改用 SkinnableContainer。</p>
 
  <p><b>注意：</b>当 Group 内部存在 DisplayObject 子代（如组件或另一个 Group）时，刻度网格可能无法正常工作。如果子代是 GraphicElement 对象，并且全部共享该 Group 的 DisplayObject，则刻度网格将正常工作。</p> 
 
  <p>对 GraphicElement 子代设置下列任何属性要求 GraphicElement 创建其自己的 DisplayObject，从而使 Group 的刻度网格属性无效。</p>  
 
  <pre>
  alpha
  blendMode other than BlendMode.NORMAL or "auto"
  colorTransform
  filters
  mask
  matrix
  rotation
  scaling
  3D properties
  bounds outside the extent of the Group
  </pre>
 
  <p>Group 容器具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示其子代</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="GroupExample.mxml"><swfblock conref="examples/GroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#SkinnableContainer"><linktext>spark.components.SkinnableContainer</linktext></link></related-links><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  从内容容器中删除可视元素时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  从内容容器中删除可视元素时分派。<codeph>event.element</codeph> 是正在删除的可视元素。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Group_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  将可视元素添加到内容容器时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  将可视元素添加到内容容器时分派。<codeph>event.element</codeph> 是已添加的可视元素。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Group:Group"><apiName>Group</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Group:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementDisplayList"><apiName>invalidateGraphicElementDisplayList</apiName><shortdesc>
      请注意元素已更改且需要重新绘制的主机组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>已更改的元素。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素已更改且需要重新绘制的主机组件。Group 对 IGraphicElement 调用 <codeph>validateDisplayList()</codeph> 方法，为其赋予重新绘制的机会。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementProperties"><apiName>invalidateGraphicElementProperties</apiName><shortdesc>
      请注意元素已更改且需要验证属性的主机组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>已更改的元素。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素已更改且需要验证属性的主机组件。Group 对 IGraphicElement 调用 <codeph>validateProperties()</codeph> 方法，为其赋予提交其属性的机会。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSharing"><apiName>invalidateGraphicElementSharing</apiName><shortdesc>
      请注意元素图层已更改的主机。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>已更改大小的元素。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素图层已更改的主机。Group 使用共享的 DisplayObject 重新评估元素的序列，且可能会重新分配 DisplayObject，并因此重新绘制这些序列。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:invalidateGraphicElementSize"><apiName>invalidateGraphicElementSize</apiName><shortdesc>
      请注意元素大小已更改的主机组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>spark.core:IGraphicElement</apiOperationClassifier><apiDesc>已更改大小的元素。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      请注意元素大小已更改的主机组件。Group 对 IGraphicElement 调用 <codeph>validateSize()</codeph> 方法，为其赋予验证其大小的机会。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Group:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:Group:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:Group:baselinePositionElement:get"><apiName>baselinePositionElement</apiName><shortdesc>
      用于计算 GroupBase 的 baselinePosition 的元素 
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IVisualElement"/></apiValueDef><apiDesc>
      用于计算 GroupBase 的 baselinePosition 的元素 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:blendMode:get"><apiName>blendMode</apiName><shortdesc>
      BlendMode 类中的一个值，用于指定要使用的混合模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      BlendMode 类中的一个值，用于指定要使用的混合模式。 内部绘制位图的方法有两种。如果启用了混合模式或外部剪辑遮罩，则将通过向矢量渲染器添加有位图填充的正方形来绘制位图。  如果尝试将此属性设置为无效值，则 Flash Player 或 Adobe AIR 会将该值设置为 <codeph>BlendMode.NORMAL</codeph>。 
     
      <p>“auto”值（默认值）特定于 blendMode 的 Group 使用情况，并指明基础 blendMode 应为 <codeph>BlendMode.NORMAL</codeph>，但以下情况除外，即 <codeph>alpha</codeph> 不等于 0 或 1 时，此时 blendMode 设置为 <codeph>BlendMode.LAYER</codeph>。该行为可确保，当组为半透明时，各组中相应图形对象的合成正确无误。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/blendMode"><linktext>flash.display.DisplayObject.blendMode</linktext></link><link href="" invalidHref="flash.display.BlendMode.xml"><linktext>flash.display.BlendMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Group:scaleGridBottom:get"><apiName>scaleGridBottom</apiName><shortdesc>
      指定刻度网格的底部坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      指定刻度网格的底部坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridLeft:get"><apiName>scaleGridLeft</apiName><shortdesc>
     指定刻度网格的左侧坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     指定刻度网格的左侧坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridRight:get"><apiName>scaleGridRight</apiName><shortdesc>
     指定刻度网格的右侧坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     指定刻度网格的右侧坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:scaleGridTop:get"><apiName>scaleGridTop</apiName><shortdesc>
     指定刻度网格的顶部坐标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     指定刻度网格的顶部坐标。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Group:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc>
      此 Group 的可视内容子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      此 Group 的可视内容子项。此方法供 Flex 内部使用，不适合由开发人员直接使用。
     
      <p>内容项目仅应该是 IVisualElement 对象。因为可视元素一次仅可以处于一个容器中，所以不应该在多个 Group 容器之间共享 <codeph>mxmlContent</codeph> Array。</p>
     
      <p>如果内容是一个 Array，不要直接修改该 Array。请改用由 Group 类定义的方法。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IconPlacement"><apiName>IconPlacement</apiName><shortdesc>
      IconPlacement 类为 Button、CheckBox、RadioButton 或 ToggleButton 的 iconPlacement 样式的允许值定义常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      IconPlacement 类为 Button、CheckBox、RadioButton 或 ToggleButton 的 <codeph>iconPlacement</codeph> 样式的允许值定义常量。
      
      </apiDesc></apiClassifierDetail><apiValue id="spark.components:IconPlacement:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
          指定图标显示在标签下方。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
          指定图标显示在标签下方。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:LEFT"><apiName>LEFT</apiName><shortdesc>
          指定图标显示在标签左侧。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
          指定图标显示在标签左侧。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:RIGHT"><apiName>RIGHT</apiName><shortdesc>
          指定图标显示在标签右侧。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
          指定图标显示在标签右侧。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IconPlacement:TOP"><apiName>TOP</apiName><shortdesc>
          指定图标显示在标签上方。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
          指定图标显示在标签上方。
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextInput"><apiName>TextInput</apiName><shortdesc>
  TextInput 是一个文本输入控件，供用户输入和编辑单行统一格式文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="lineBreak"/><Exclude kind="style" name="verticalAlign"/><DefaultProperty name="text"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:TextInput&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TextInput
    <strong>Properties</strong>
    widthInChars="<i>Calculated default</i>"  <b>[applies to Spark theme]</b>
  
    <strong>Events</strong>
    enter="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableTextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextInput 是一个文本输入控件，供用户输入和编辑单行统一格式文本。
   <p><b>Spark 主题的 TextInput 外观使用 RichEditableText 类。这意味着 Spark TextInput 控件支持基于 Flash 文本引擎 (FTE) 的 Text Layout Framework (TLF) 库。</b>组合后，可以在这些层上使用高质量的国际印刷效果和布局编辑文本。</p>
 
  <p><b>Mobile 主题的 TextInput 外观使用 StyleableStageText 类而不是 RichEditableText。</b>由于 StyleableStageText 使用本机文本字段，它可以在移动设备上实现更好的文本输入和操作体验，但您应该注意它有一些<xref href="supportClasses/StyleableStageText.html">限制和差异</xref>。StageText 使用的本机文本控件对文本周围应用不同的填充。为了避免垂直滚动，基于 StageText 的 TextInput 外观尝试估计此填充并对其进行补偿。由于此问题以及本机文本控件在文本处理方式上的其他差异，使用基于 StageText 的 TextInput 控件外观的默认高度将不同于它在使用基于 TextField 的 TextInput 外观时的默认高度。
 </p>
   <p>可以使用 <codeph>text</codeph> 属性设置要显示的文本或获取用户已输入的文本。该属性是一个 String，因此如果用户输入数值，例如，会将该数值报告为“123.45”，而不是 123.45。</p>
   <p>使用 CSS 样式（例如 <codeph>fontFamily</codeph> 和 <codeph>fontSize</codeph>）设置文本格式。</p>
   <p>对于 Spark 主题，您可以使用 <codeph>widthInChars</codeph> 属性（该属性可方便地通过随字体大小缩放来指定宽度）或 <codeph>typicalText</codeph> 属性指定控件的宽度。请注意，如果使用 <codeph>typicalText</codeph>，则 <codeph>widthInChars</codeph> 属性将被忽略。对于所有主题，您也可以指定一个显式宽度（以像素为单位或以宽度的百分比形式），或者使用约束，例如 <codeph>left</codeph> 和 <codeph>right</codeph>。通常情况下，不需要执行任何操作来指定高度；控件的默认高度足以能够显示一行文本。
  </p>
   <p>可以使用 <codeph>maxChars</codeph> 属性限制用户可以输入的字符数，使用 <codeph>restrict</codeph> 限制用户可以输入的字符。要使用该控件输入密码，请将 <codeph>displayAsPassword</codeph> 属性设置为 <codeph>true</codeph>。</p>
   <p>对于 Mobile 主题，特定于软键盘的属性 <codeph>autoCapitalize</codeph>、<codeph>autoCorrect</codeph>、<codeph>returnKeyLabel</codeph> 和 <codeph>softKeyboardType</codeph> 属性指定键盘提示。如果软键盘存在但它不支持提示表示的功能，则提示被忽略。在只有硬件键盘的移动环境中，这些提示将被忽略。 
  </p>
  
  <p>当用户按下 Enter 键，而不是插入换行符时，该控件分派 <codeph>FlexEvent.ENTER</codeph> 事件，因为该控件不支持输入多行文本。默认情况下，该控件具有显式换行符。</p>
   <p>此控件是一个外观可变的控件，其默认外观包含 Spark 主题的一个 RichEditableText 实例或 Mobile 主题的一个 StyleableStageText 实例。它处理显示和编辑文本。（该外观还会处理绘制边框和背景。）此 RichEditableText 或 StyleableStageText 实例可以作为 <codeph>textDisplay</codeph> 对象进行访问。对于 Mobile 主题，如果您希望使用基于 TextField 的外观而不是基于 StageText 的外观，请将 <codeph>skinClass</codeph> 属性设置为<codeph>“spark.skins.mobile.TextInputSkin”</codeph>。</p>
   <p>对于 Spark 主题，由于其 RichEditableText 使用 TLF，Spark TextInput 控件支持显示从左到右 (LTR) 的文本（如法语）和从右到左 (RTL) 的文本（如阿拉伯语）以及双向文本（如阿拉伯语内出现法语短语）。如果文本的主要书写方向为从右到左，请将 <codeph>direction</codeph> 样式设置为 <codeph>rtl</codeph>。<codeph>textAlign</codeph> 样式默认为 <codeph>start</codeph>，这样，当 <codeph>direction</codeph> 为 <codeph>ltr</codeph> 时，文本左对齐；当 <codeph>direction</codeph> 为 <codeph>rtl</codeph> 时，文本右对齐。要获得反向对齐，请将 <codeph>textAlign</codeph> 设置为 <codeph>end</codeph>。</p>
   <p>此外，使用 TLF 后，Spark TextInput 还支持在一个编辑会话内执行无限次撤消/重做操作。编辑会话在控件获得键盘焦点时启动，在控件失去焦点时结束。</p>
   <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
   <p>对于 Spark 主题，TextInput 控件具有以下默认特性：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>128 个像素宽 × 22 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.TextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
   <p>对于 Mobile 主题，TextInput 控件具有以下默认特性：</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.mobile.StageTextInputSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="TextInputExample.mxml"><swfblock conref="examples/TextInputExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="" invalidHref="spark.skins.mobile.StageTextInputSkin.xml"><linktext>spark.skins.mobile.StageTextInputSkin</linktext></link><link href="" invalidHref="spark.skins.mobile.TextInputSkin.xml"><linktext>spark.skins.mobile.TextInputSkin</linktext></link><link href="spark.skins.spark.xml#TextInputSkin"><linktext>spark.skins.spark.TextInputSkin</linktext></link><link href="spark.components.xml#TextArea"><linktext>TextArea</linktext></link></related-links><adobeApiEvent id="spark.components:TextInput_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  当用户按下 Enter 键时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户按下 Enter 键时分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TextInput:TextInput"><apiName>TextInput</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:TextInput:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
      控件的默认宽度（使用 em 单位测量）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
           </apiDefaultValue></apiValueDef><apiDesc>
      控件的默认宽度（使用 em 单位测量）。
           <p>em 是一种印刷测量单位，相当于一个点大小。em 并非必须完全精确等于字母“M”的宽度，但是在很多字体中，“M”大约为一个 em 宽。使用控件的 <codeph>fontSize</codeph> 样式计算 em 单位的像素值。</p>
           <p>例如，如果需要 TextInput 的宽度足够输入约 20 个文本字符，则将该属性设置为 20。</p>
           <p>如果指定显性宽度、百分比宽度或 <codeph>left</codeph> 和 <codeph>right</codeph> 约束，该属性将被忽略。</p>
           <p>如果已指定 <codeph>typicalText</codeph> 属性，则该属性也将被忽略。</p>
     
      <p><b>对于 Mobile 主题，它不受支持。</b></p>
          
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:Form"><apiName>Form</apiName><shortdesc>
  通过 Spark Form 容器，您可以控制表单布局、将表单字段标记为必填或可选、处理错误消息以及将表单数据绑定到 Flex 数据模型以执行数据检查和验证。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Form">
<description>
  因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Form&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:Form&gt;
    ...
      <i>child tags</i>
    ...
  &lt;/s:Form&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  通过 Spark Form 容器，您可以控制表单布局、将表单字段标记为必填或可选、处理错误消息以及将表单数据绑定到 Flex 数据模型以执行数据检查和验证。通过它，您还可以使用样式表来配置表单的外观。
 
  <p>下表描述了 Flex 中用于创建表单的组件：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="3"><thead><row><entry>组件</entry><entry>标签</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>Form</entry>
           <entry><codeph>&lt;s:Form></codeph></entry>
           <entry>定义整个表单（包括整个表单布局）的容器。使用 FormHeading 控件和 FormItem 控件定义内容。您也可以在 Form 容器中插入其它类型的组件。</entry>
        </row><row>
           <entry>FormHeading</entry>
           <entry><codeph>&lt;s:FormHeading></codeph></entry>
           <entry>在表单中定义标题。 </entry>
        </row><row>
           <entry>FormItem</entry>
           <entry><codeph>&lt;s:FormItem></codeph></entry>
           <entry>包含一个或多个水平或垂直排列的表单子项。子容器可以是控件，也可以是其他容器。一个 Form 容器可以容纳多个 FormItem 容器。</entry>
        </row><row>
           <entry>FormLayout</entry>
           <entry><codeph>&lt;s:FormLayout></codeph></entry>
           <entry>定义 Spark Form 外观的默认布局。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example><example conref="StackedFormSkinExample.mxml"><swfblock conref="examples/StackedFormSkinExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormSkin"><linktext>spark.skins.spark.FormSkin</linktext></link></related-links><apiConstructor id="spark.components:Form:Form"><apiName>Form</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Form:invalidElements:get"><apiName>invalidElements</apiName><shortdesc>
      处于无效状态的后代元素的排序后的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      处于无效状态的后代元素的排序后的数组。数组中的项目是含有以下属性的对象：
     
      <ul>
        <li>element:UIComponent - 无效的后代元素</li>
     
        <li>position:Vector.&lt;int> - 表示显示列表树中元素位置的整数的 Vector。该属性用于对数组进行排序。</li>  
      </ul>
     
      <p>如果从表单中删除后代，则不会更新字典。</p> 
         
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
  NumericStepper 控件允许从有序集中选择编号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:NumericStepper">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  组件内容背景的 Alpha。
   </description>
<default>1
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  控制此组件的边框的可见性。
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  此组件的边框的颜色。
   </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的边框的 Alpha。
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  组件已启用但没有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  禁用组件时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  组件已启用且有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:NumericStepper" playerVersion="Flash10.5" type="Object">
<description>
  指定两端对齐要用的字间距。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.wordSpacing。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  将文本导入到 TextFlow 中时压缩或保留空白。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  确定要旋转此文本的度数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textRotation。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  文本第一行偏离容器左侧的距离。
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textIndent。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textIndent；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  指定与段落关联的制表位。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.tabStops。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  段落开始边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  段落之前要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  段落之后要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  段落结束边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  它控制列表中项目的外观。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStyleType。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  它控制列表项目标记相对于列表项目的位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStylePosition。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  指定当列表相应侧的内边距值为 <codeph>auto</codeph> 时，列表开始边缘的自动缩进。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  指定行距模型，它是行距基准和行距方向的组合。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.leadingModel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  指定容器中第一行的基线位置。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  控制文本在浮点周围的环绕方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.clearFloats。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  控制在将连续文本断开为多行时允许行断开的位置。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  指定线位置的垂直或水平行进。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#NumericStepper/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:NumericStepper" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#NumericStepper/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#NumericStepper/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:NumericStepper" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#NumericStepper/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:NumericStepper" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:NumericStepper" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:NumericStepper" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="textDisplay" owner="spark.components:NumericStepper" playerVersion="Flash10" required="true" var_type="spark.components:TextInput">
<description>
      定义 TextInput 控件的外观部件，该控件允许用户编辑 NumericStepper 组件的值。当用户按 Enter 键、将焦点从 NumericStepper 移开或增减 NumericStepper 时，会将该值舍入并提交。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a TextInput control 
      which allows a user to edit the value of
      the NumericStepper component.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:NumericStepper&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:NumericStepper
     <strong>Properties</strong>
    imeMode="null"
    maxChars="0"
    maximum="10"
    valueFormatFunction=""
    valueParseFunction=""
     <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
   baselineShift="0.0"
   blockProgression="TB"
   borderAlpha="0.5"
   borderColor="0x000000"
   borderVisible="true"
   breakOpportunity="AUTO"
   cffHinting="HORIZONTAL_STEM"
   color="0"
   contentBackgroundAlpha="1.0"
   contentBackgroundColor="0xFFFFFF"
   clearFloats="none"
   digitCase="DEFAULT"
   digitWidth="DEFAULT"
   direction="LTR"
   dominantBaseline="AUTO"
   firstBaselineOffset="AUTO"
   focusedTextSelectionColor=""
   fontFamily="Arial"
   fontLookup="DEVICE"
   fontSize="12"
   fontStyle="NORMAL"
   fontWeight="NORMAL"
   inactiveTextSelection=""
   justificationRule="AUTO"
   justificationStyle="AUTO"
   kerning="AUTO"
   leadingModel="AUTO"
   ligatureLevel="COMMON"
   lineHeight="120%"
   lineThrough="false"
   listAutoPadding="40"
   listStylePosition="outside"
   listStyleType="disc"
   locale="en"
   paragraphEndIndent="0"
   paragraphSpaceAfter="0"
   paragraphSpaceBefore="0"
   paragraphStartIndent="0"
   renderingMode="CFF"
   tabStops="null"
   textAlign="START"
   textAlignLast="START"
   textAlpha="1"
   textDecoration="NONE"
   textIndent="0"
   textJustify="INTER_WORD"
   textRotation="AUTO"
   trackingLeft="0"
   trackingRight="0"
   typographicCase="DEFAULT"
   unfocusedTextSelectionColor=""
   whiteSpaceCollapse="COLLAPSE"
   wordSpacing="100%,50%,150%"
 /&gt;
 </pre>
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components:Spinner</apiBaseClassifier></apiClassifierDef><apiDesc>
  NumericStepper 控件允许从有序集中选择编号。NumericStepper 提供与 Spinner 组件相同的功能，但增加了一个 TextInput 控件，这样可以直接编辑组件的值，而无需使用控件的箭头按钮来对其进行修改。
   <p>NumericStepper 控件包括一个单行输入文本字段和一对用于逐一显示可能值的箭头按钮。还可使用向上箭头键和向下箭头键以及鼠标滑轮遍历这些值。当用户按 Enter 键，从组件删除焦点，或通过按箭头按钮或调用 <codeph>changeValueByStep()</codeph> 方法增减 NumericStepper 时，将提交输入值。</p>
   <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
   <p>NumericStepper 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>53 个像素宽 × 23 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>40 个像素宽 × 40 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.NumericStepperSkin
              <p>spark.skins.spark.NumericStepperTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="NumericStepperExample.mxml"><swfblock conref="examples/NumericStepperExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link><link href="spark.skins.spark.xml#NumericStepperSkin"><linktext>spark.skins.spark.NumericStepperSkin</linktext></link><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:NumericStepper:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
      构造函数
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NumericStepper:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件获得焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件获得焦点时是否应启用 IME。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 IME（输入法编辑器）模式。IME 使用户能够用中文、日文和韩文输入文本。当控件获得焦点时，Flex 设置指定的 IME 模式；当该控件失去焦点时，则将其设置回为先前的值。
          <p>flash.system.IMEConversionMode 类定义此属性的有效值的常量。您还可以指定 <codeph>null</codeph> 不指定任何 IME 模式。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:NumericStepper:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      字段中最多可输入的字符数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      字段中最多可输入的字符数。0 值表示可以输入任意数目的字符。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueFormatFunction:get"><apiName>valueFormatFunction</apiName><shortdesc>
      回调对在外观的 textDisplay 属性中显示的值设置格式的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      回调对在外观的 <codeph>textDisplay</codeph> 属性中显示的值设置格式的函数。此函数使用单个 Number 作为参数并返回格式化的 String。
           <p>此函数包含下列签名：</p>
      <pre>
      funcName(value:Number):String
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:valueParseFunction:get"><apiName>valueParseFunction</apiName><shortdesc>
      回调从外观的 textDisplay 字段中显示的值提取数值的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      回调从外观的 <codeph>textDisplay</codeph> 字段中显示的值提取数值的函数。此函数使用单个 String 作为参数并返回 Number。
           <p>此函数包含下列签名：</p>
      <pre>
      funcName(value:String):Number
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NumericStepper:maximum:set"><apiName>maximum</apiName><shortdesc>
      表示 value 的最大可能值的数值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      表示 <codeph>value</codeph> 的最大可能值的数值。如果 <codeph>minimum</codeph> 或 <codeph>value</codeph> 的值大于 <codeph>maximum</codeph>，则将更改它们以反映新的 <codeph>maximum</codeph>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Spinner"><apiName>Spinner</apiName><shortdesc>
  Spinner 组件从有序集中选择值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Spinner">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="disabled" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Spinner" playerVersion="Flash10">
<description>
  正常状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的焦点外框的 Alpha。
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Spinner" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的角的半径。
   </description>
<default>2
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="decrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      定义在按下时按 <codeph>stepSize</codeph> 减小 <codeph>value</codeph> 属性的按钮的外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the  button that, 
      when pressed, decrements the value property
      by stepSize.</shortdesc></SkinPart><SkinPart name="incrementButton" owner="spark.components:Spinner" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      定义在按下时按 <codeph>stepSize</codeph> 增大 <codeph>value</codeph> 属性的按钮的外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the  button that, 
      when pressed, increments the value property
      by stepSize.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Spinner&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Spinner
    <strong>Properties</strong>
    allowValueWrap="false"
  
    <strong>Events</strong>
    change="<i>No default</i>"
     <strong>Styles</strong>
    cornerRadius="2"
    focusAlpha="0.5"
    focusColor="0x70B2EE"
    symbolColor="0x000000"
      
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spinner 组件从有序集中选择值。它使用基于 <codeph>stepSize</codeph> 属性的当前值增大或减小当前值的两个按钮。
  
  <p>Spinner 由两个必需按钮组成，一个用于增大当前值，一个用于减小当前值。用户还可使用向上箭头键和向下箭头键或鼠标滚轮遍历这些值。当用户按 Enter 键，从组件删除焦点，或通过按箭头按钮或调用 <codeph>changeValueByStep()</codeph> 方法增减 Spinner 时，将提交输入值。</p>
   <p>Spinner 组件的范围是 <codeph>value</codeph> 属性的允许的值集。允许的值为 minimum 与 <codeph>snapInterval</codeph> 属性的整数倍数之和，且小于或等于 <codeph>maximum</codeph> 值。例如：</p>
  
  <ul>
    <li><codeph>minimum</codeph> = -1</li>
    <li><codeph>maximum</codeph> = 10</li>
    <li><codeph>snapInterval</codeph> = 3</li>
  </ul>
  
  因此，该范围是 {-1,2,5,8,10}。
   <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
   <p>Spinner 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>19 个像素宽 × 23 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>12 个像素宽 × 12 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.SpinnerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="SpinnerExample.mxml"><swfblock conref="examples/SpinnerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link><link href="spark.skins.spark.xml#SpinnerSkin"><linktext>spark.skins.spark.SpinnerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Spinner_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  当 Spinner 控件的值由于用户交互操作而发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 Spinner 控件的值由于用户交互操作而发生更改时分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Spinner:Spinner"><apiName>Spinner</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Spinner:allowValueWrap:get"><apiName>allowValueWrap</apiName><shortdesc>
      当前 value 是 maximum 或 minimum 值时，为一个步长确定控件的行为。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当前 <codeph>value</codeph> 是 <codeph>maximum</codeph> 或 <codeph>minimum</codeph> 值时，为一个步长确定控件的行为。如果 <codeph>allowValueWrap</codeph> 为 <codeph>true</codeph>，则 <codeph>value</codeph> 属性会从 <codeph>maximum</codeph> 回绕到 <codeph>minimum</codeph> 值，或者从 <codeph>minimum</codeph> 回绕到 <codeph>maximum</codeph> 值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ResizeMode"><apiName>ResizeMode</apiName><shortdesc>
  ResizeMode 类定义模式的枚举，组件使用这些模式按照布局系统指定的尺寸调整其子项的大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ResizeMode 类定义模式的枚举，组件使用这些模式按照布局系统指定的尺寸调整其子项的大小。
 
  <p>组件可以更改它自己的尺寸（<codeph>width</codeph> 和 <codeph>height</codeph>）并相应地重新布局其子项（这是默认的调整大小模式）。</p>
 
  <p>组件的另一个选项是更改其比例，在这种情况下子项根本不需要更改。<codeph>Group</codeph> 支持此选项。</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:ResizeMode:NO_SCALE"><apiName>NO_SCALE</apiName><shortdesc>
      通过更改 width 和 height 调整大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>noScale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      通过更改 <codeph>width</codeph> 和 <codeph>height</codeph> 调整大小。
     
      <p>组件始终调整它自己的大小，然后按照布局或用户指定的实际大小布置其子项。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ResizeMode:SCALE"><apiName>SCALE</apiName><shortdesc>
      通过设置 scaleX 和 scaleY 属性调整大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scale</apiData><apiType value="String"/></apiValueDef><apiDesc>
      通过设置 <codeph>scaleX</codeph> 和 <codeph>scaleY</codeph> 属性调整大小。
     
      <p>组件始终调整它自己的大小，然后按照其测量大小布置其子项。对该比例进行调整以与由布局或用户指定的大小相匹配。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
  NavigatorContent 类定义了一个 Spark 容器，可以将该容器用在 MX 导航器容器（例如 ViewStack、TabNavigator 和 Accordion 容器）中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:NavigatorContent&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:NavigatorContent
    <strong>Properties</strong>
    icon="null"
    label=""
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  NavigatorContent 类定义了一个 Spark 容器，可以将该容器用在 MX 导航器容器（例如 ViewStack、TabNavigator 和 Accordion 容器）中。
 
  <p>不要在 MX 导航器容器外使用 NavigatorContent 容器。</p>
 
  <p>NavigatorContent 容器的创建策略基于其父导航器容器的创建策略： </p>
 
  <ul>
    <li>如果父代的创建策略为无，则 NavigatorContent 的创建策略也为无。</li>
    <li>如果父代的创建策略为全部，则 NavigatorContent 的创建策略也为全部。</li>
    <li>如果父代的创建策略为自动，则 NavigatorContent 的创建策略为无。</li>
  </ul>
 
  <p>NavigatorContent 容器不支持排队的创建策略。</p>
 
  <p>NavigatorContent 容器具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示其子代</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="NavigatorContentExample.mxml"><swfblock conref="examples/NavigatorContentExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.Accordion.xml"><linktext>mx.containers.Accordion</linktext></link><link href="" invalidHref="mx.containers.TabNavigator.xml"><linktext>mx.containers.TabNavigator</linktext></link><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiConstructor id="spark.components:NavigatorContent:NavigatorContent"><apiName>NavigatorContent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:NavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      由某些导航器容器显示的图标的 Class，用于代表此 Container。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="iconChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      由某些导航器容器显示的图标的 Class，用于代表此 Container。
     
      <p>例如，如果此 Container 是 TabNavigator 的一个子项，则此图标将显示在相应的选项卡中。如果此 Container 是 Accordion 的一个子项，则此图标将显示在相应的标题中。</p>
     
      <p>要将图标嵌入到 SWF 文件中，请使用 @Embed() MXML 编译器指令：</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>图像可以是 JPEG、GIF、PNG、SVG 或 SWF 文件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:NavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      由某些导航器容器显示的文本，用于代表此 Container。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      由某些导航器容器显示的文本，用于代表此 Container。
     
      <p>例如，如果此 Container 是 TabNavigator 的一个子项，则此字符串将显示在相应的选项卡中。如果此 Container 是 Accordion 的一个子项，则此字符串将显示在相应的标题中。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VSlider"><apiName>VSlider</apiName><shortdesc>
  使用 VSlider（垂直滑块）控件，用户可通过在滑块轨道的端点之间移动滑块来选择值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VSlider">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:VSlider/&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SliderBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  使用 VSlider（垂直滑块）控件，用户可通过在滑块轨道的端点之间移动滑块来选择值。滑块轨道从下向上拉伸。滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。
 
  <p>滑块可以允许最小值和最大值之间连续范围内的值，也可以限制为最小值和最大值之间具体间隔处的值。它可以使用数据提示显示其当前值。</p>
   <p>VSlider 控件具备下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>11 个像素宽 × 100 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>11 个像素宽 × 11 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.VSliderSkin
              <p>spark.skins.spark.VSliderThumbSkin</p>
              <p>spark.skins.spark.VSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VSliderExample.mxml"><swfblock conref="examples/VSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VSliderSkin"><linktext>spark.skins.spark.VSliderSkin</linktext></link><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:VSlider:VSlider"><apiName>VSlider</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
  ToggleButton 组件定义切换按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:ToggleButton">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:ToggleButton&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButton/&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToggleButton 组件定义切换按钮。单击该按钮会在弹起状态和按下状态之间进行切换。如果在按钮处于弹起状态时单击该按钮，则它会切换到按下状态。必须再次单击该按钮才可将其切换回弹起状态。
 
  <p>可以使用 <codeph>selected</codeph> 属性以编程方式获取或设置此状态。</p>
   <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
   <p>ToggleButton 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以显示控件的文本标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>21 个像素宽 × 21 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.ToggleButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ToggleButtonExample.mxml"><swfblock conref="examples/ToggleButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ToggleButtonSkin"><linktext>spark.skins.spark.ToggleButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:ToggleButton:ToggleButton"><apiName>ToggleButton</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:FormHeading"><apiName>FormHeading</apiName><shortdesc>
  Spark FormHeading 容器为 Spark Form 容器内的一组控件显示标题。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:FormHeading">
<description>
  因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:FormHeading" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的背景色。
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:FormHeading" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的背景的 Alpha 水平。有效值范围是 0.0 到 1.0。 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:FormHeading" playerVersion="Flash10.5" type="Object">
<description>
  指定两端对齐要用的字间距。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.wordSpacing。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  将文本导入到 TextFlow 中时压缩或保留空白。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  确定要旋转此文本的度数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textRotation。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  文本第一行偏离容器左侧的距离。
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textIndent。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textIndent；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  指定与段落关联的制表位。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.tabStops。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  段落开始边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  段落之前要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  段落之后要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  段落结束边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  它控制列表中项目的外观。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStyleType。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  它控制列表项目标记相对于列表项目的位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStylePosition。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  指定当列表相应侧的内边距值为 <codeph>auto</codeph> 时，列表开始边缘的自动缩进。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  指定行距模型，它是行距基准和行距方向的组合。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.leadingModel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  指定容器中第一行的基线位置。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  控制文本在浮点周围的环绕方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.clearFloats。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  控制在将连续文本断开为多行时允许行断开的位置。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  指定线位置的垂直或水平行进。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:FormHeading" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#FormHeading/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:FormHeading" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#FormHeading/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#FormHeading/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:FormHeading" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#FormHeading/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:FormHeading" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:FormHeading" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:FormHeading" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:FormHeading" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="labelDisplay" owner="spark.components:FormHeading" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      对显示此 FormItem 的标签的可视元素的引用。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the visual element that displays this FormItem's label.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:FormHeading&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:FormHeading
    <strong>Properties</strong>
    label=""
  
    <strong>Common Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="embeddedCFF"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineBreak="toFit"
    lineHeight="120%"
    lineThrough="false%"
    locale="en"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
    verticalAlign="top"
 
    <strong>Mobile Styles</strong>
    leading="2"
    letterSpacing="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spark FormHeading 容器为 Spark Form 容器内的一组控件显示标题。您可以在单个 Form 容器中包含多个 FormHeading 容器。
 
  </apiDesc><example conref="FormExample.mxml"><swfblock conref="examples/FormExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormHeadingSkin"><linktext>spark.skins.spark.FormHeadingSkin</linktext></link></related-links><apiConstructor id="spark.components:FormHeading:FormHeading"><apiName>FormHeading</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:FormHeading:label:get"><apiName>label</apiName><shortdesc>
      要在 FormHeading 组件中显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要在 FormHeading 组件中显示的文本。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
  HScrollBar（水平 ScrollBar）控件可以在因数据太多而不能在显示区域中以水平方向完全显示时控制显示的数据部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[ <p>The <code>&lt;s:HScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:HScrollBar
     <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  HScrollBar（水平 ScrollBar）控件可以在因数据太多而不能在显示区域中以水平方向完全显示时控制显示的数据部分。
 
  <p>尽管可以使用 HScrollBar 控件作为独立控件，但通常将其结合作为另一组组件的一部分来提供滚动功能。</p>
   <p>HScrollBar 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>85 个像素宽 × 15 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>35 个像素宽 × 35 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.HScrollBarSkin
              <p>spark.skins.spark.HScrollBarThumbSkin</p>
              <p>spark.skins.spark.HScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="HScrollBarExample.mxml"><swfblock conref="examples/HScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HScrollBarSkin"><linktext>spark.skins.spark.HScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:HScrollBar_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  在 horizontalScrollPosition 由于 mouseWheel 事件而发生变化时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在 <codeph>horizontalScrollPosition</codeph> 由于 <codeph>mouseWheel</codeph> 事件而发生变化时分派。
 
  <p>默认行为会按“步长”的事件 <codeph>delta</codeph> 数量进行水平滚动。视口的 <codeph>getHorizontalScrollPositionDelta</codeph> 方法使用 <codeph>LEFT</codeph> 或 <codeph>RIGHT</codeph>（具体取决于滚动方向）来确定步长的宽度。</p>
 
  <p>对事件调用 <codeph>preventDefault()</codeph> 方法可避免水平滚动位置发生更改。否则，如果您修改事件的 <codeph>delta</codeph> 属性，则该值会用作水平“步长”的数量。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:HScrollBar:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:HScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      如果 increase 为 true，则增加页数 value；如果 increase 为 false，则减少页数 value。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>是增加 (<codeph>true</codeph>) 还是减少 (<codeph>false</codeph>) <codeph>value</codeph>。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>increase</codeph> 为 <codeph>true</codeph>，则增加页数 <codeph>value</codeph>；或者如果 <codeph>increase</codeph> 为 <codeph>false</codeph>，则减少页数 <codeph>value</codeph>。增加滚动条的 <codeph>value</codeph> 将向右滚动视域。减少该 <codeph>value</codeph> 时将向左滚动视域。
      
      <p>如果设置了 <codeph>viewport</codeph> 属性，则使用该属性的 <codeph>getHorizontalScrollPositionDelta()</codeph> 方法计算页增量大小。如果 <codeph>viewport</codeph> 为 null，则使用滚动条的 <codeph>pageSize</codeph> 属性。</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBarBase.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      如果 viewport 为非 null，将通过滚动视域更改水平滚动位置以实现上移行或下移行的操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>行滚动是向上 (<codeph>true</codeph>) 还是向下 (<codeph>false</codeph>)。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>viewport</codeph> 为非 null，将通过滚动视域更改水平滚动位置以实现上移行或下移行的操作。此方法通过使用 <codeph>flash.ui.Keyboard.RIGHT</codeph> 或 <codeph>flash.ui.Keyboard.LEFT</codeph> 调用 <codeph>IViewport.getHorizontalScrollPositionDelta()</codeph> 方法来计算要滚动的数量。它接着调用 <codeph>setValue()</codeph> 方法以将 <codeph>IViewport.horizontalScrollPosition</codeph> 属性设置为相应的值。
           <p>如果 <codeph>viewport</codeph> 为 null，则调用 <codeph>changeValueByStep()</codeph> 方法更改滚动位置以实现上移行或下移行的操作。</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/horizontalScrollPosition"><linktext>spark.core.IViewport.horizontalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getHorizontalScrollPositionDelta()"><linktext>spark.core.IViewport.getHorizontalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:HScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      更新 value 属性，并且如果 viewport 为非 null，则将其 horizontalScrollPosition 设置为 value。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc><codeph>value</codeph> 属性的新值。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      更新 <codeph>value</codeph> 属性，并且如果 viewport 为非 null，则将其 <codeph>horizontalScrollPosition</codeph> 设置为 <codeph>value</codeph>。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#HScrollBar/viewport"><linktext>视域</linktext></link></related-links></apiOperation><apiValue id="spark.components:HScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      由此滚动条控制的视域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      由此滚动条控制的视域。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:ScrollSnappingMode"><apiName>ScrollSnappingMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      <codeph/>
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List/scrollSnappingMode"><linktext/></link><link href="spark.components.xml#Scroller/scrollSnappingMode"><linktext/></link></related-links><apiValue id="spark.components:ScrollSnappingMode:CENTER"><apiName>CENTER</apiName><shortdesc>
          贴紧到视区中心的元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
          贴紧到视区中心的元素。
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:LEADING_EDGE"><apiName>LEADING_EDGE</apiName><shortdesc>
          贴紧到视区的左（水平）边缘和顶（垂直）边缘的元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>leadingEdge</apiData><apiType value="String"/></apiValueDef><apiDesc>
          贴紧到视区的左（水平）边缘和顶（垂直）边缘的元素。
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:NONE"><apiName>NONE</apiName><shortdesc>
          滚动贴紧关闭.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
          滚动贴紧关闭.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ScrollSnappingMode:TRAILING_EDGE"><apiName>TRAILING_EDGE</apiName><shortdesc>
          贴紧到视区的右（水平）边缘和底（垂直）边缘的元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>trailingEdge</apiData><apiType value="String"/></apiValueDef><apiDesc>
          贴紧到视区的右（水平）边缘和底（垂直）边缘的元素。
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnablePopUpContainer"><apiName>SkinnablePopUpContainer</apiName><shortdesc>
  SkinnablePopUpContainer 类是一个 SkinnableContainer，它用作弹出窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><skinStates><SkinState name="closed" owner="spark.components:SkinnablePopUpContainer" playerVersion="Flash10">
<description>
  “closed”状态。
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="no" name="softKeyboardEffectDuration" owner="spark.components:SkinnablePopUpContainer" playerVersion="Flash11" type="Number">
<description>
  
 
  </description>
<default>150
  
  </default>

<playerversion>AIR 3.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:SkinnablePopUpContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SkinnablePopUpContainer 
    <strong>Events</strong>
    close="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnablePopUpContainer 类是一个 SkinnableContainer，它用作弹出窗口。通常将 SkinnablePopUpContainer 容器用来在应用程序中打开简单窗口（例如警告窗口）以提示用户必须执行某些操作。
   <p>不需要创建 SkinnablePopUpContainer 容器作为其父容器的正常布局。它会作为弹出窗口显示在其父代的顶部。因此，您不必在应用程序的 MXML 代码中直接创建它。</p>
   <p>而应经常在单独的 MXML 文件中创建它作为 MXML 组件。要显示该组件，请先创建 MXML 组件的实例，然后调用 <codeph>open()</codeph> 方法。您还可以在打开组件时设置其大小和位置。</p>  
   <p>要关闭该组件，请调用 <codeph>close()</codeph> 方法。如果弹出窗口需要将数据传递回处理程序，您可以为 <codeph>PopUp.CLOSE</codeph> 事件添加事件侦听器，并在 <codeph>close()</codeph> 方法中指定返回数据。</p>
   <p>SkinnablePopUpContainer 最初处于 <codeph>closed</codeph> 外观状态。打开它时，会作为弹出窗口添加到 PopUpManager，并过渡到 <codeph>normal</codeph> 外观状态。要定义打开和关闭动画，请在 <codeph>closed</codeph> 和 <codeph>normal</codeph> 外观状态之间配合使用自定义外观和过渡。</p>
 
  <p>SkinnablePopUpContainer 容器具有下列默认特征：</p>
     <adobetable class="innertable">
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示其子代</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row><row><entry>默认外观类</entry><entry>spark.skins.spark.SkinnablePopUpContainerSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#SkinnablePopUpContainerSkin"><linktext>spark.skins.spark.SkinnablePopUpContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnablePopUpContainer_spark.events.PopUpEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  在容器关闭时由其分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.PopUpEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.PopUpEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在容器关闭时由其分派。
 
  <p>当容器从 <codeph>normal</codeph> 状态切换到 <codeph>closed</codeph> 外观状态，并且已完成到此状态的过渡时，将分派此事件。</p>
 
  <p>该事件提供用于将 commit 信息从容器传递给事件侦听器的机制。一种常用使用方案是构建带有取消按钮的多选项对话框。当选择一个有效选项时，可以调用 <codeph>close()</codeph> 方法来关闭该弹出窗口，同时将 <codeph>true</codeph> 传递给 <codeph>commit</codeph> 参数，以及（可选）传入任何相关数据。当 SkinnablePopUpContainer 已完成关闭后，将分派此事件。然后，您可以在事件侦听器中检查 <codeph>commit</codeph> 属性，并执行适当的操作。  </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnablePopUpContainer_spark.events.PopUpEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  将容器打开并可以用户交互时由其分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.PopUpEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.PopUpEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  将容器打开并可以用户交互时由其分派。
 
  <p>当容器从 <codeph>closed</codeph> 状态切换到 <codeph>normal</codeph> 外观状态，并且已完成到此状态的过渡时，将分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnablePopUpContainer:SkinnablePopUpContainer"><apiName>SkinnablePopUpContainer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnablePopUpContainer:close"><apiName>close</apiName><shortdesc>
      将当前外观状态更改为 closed，等待直到任何状态过渡完成播放，分派 PopUpEvent.CLOSE 事件，然后从 PopUpManager 删除容器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定应用程序是否应提交返回数据。该参数的值将写入到 <codeph>PopUpEvent</codeph> 事件对象的 <codeph>commit</codeph> 属性中。
     
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="any"/><apiData>unknown</apiData><apiDesc>指定返回到应用程序的数据。该参数的值将写入到 <codeph>PopUpEvent</codeph> 事件对象的 <codeph>data</codeph> 属性中。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      将当前外观状态更改为 <codeph>closed</codeph>，等待直到任何状态过渡完成播放，分派 <codeph>PopUpEvent.CLOSE</codeph> 事件，然后从 PopUpManager 删除容器。
           <p>使用 SkinnablePopUpContainer 容器的 <codeph>close()</codeph> 方法将数据从弹出窗口传递回主应用程序。一种常用使用方案是构建带有取消按钮的对话框。当选择对话框的一个有效选项时，将调用 <codeph>close()</codeph> 方法来关闭该对话框，同时将 <codeph>true</codeph> 传递给 <codeph>commit</codeph> 参数，以及（可选）传入任何相关数据。SkinnablePopUpContainer 完成关闭后，它将分派 <codeph>close</codeph> 事件。在 <codeph>close</codeph> 事件的事件侦听器中，您可以检查 <codeph>commit</codeph> 参数并执行相应操作。  </p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/open"><linktext>打开</linktext></link></related-links></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:protected:createSoftKeyboardEffect"><apiName>createSoftKeyboardEffect</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>
     
      </apiDesc><apiType value="mx.effects:IEffect"/></apiReturn><apiParam><apiItemName>yTo</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>heightTo</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
      
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:open"><apiName>open</apiName><shortdesc>
      将容器作为弹出窗口打开，并将外观状态从 closed 切换到 normal。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>owner</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>容器的所有者。弹出窗口显示在该容器上。
           </apiDesc></apiParam><apiParam><apiItemName>modal</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>容器是否应是模态。模态容器在关闭之前会采用所有键盘和鼠标输入。非模态容器允许其它组件在弹出窗口打开时接受输入。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      将容器作为弹出窗口打开，并将外观状态从 <codeph>closed</codeph> 切换到 <codeph>normal</codeph>。过渡完成播放后，它将分派 <codeph>FlexEvent.OPEN</codeph> 事件。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/close"><linktext>关闭</linktext></link></related-links></apiOperation><apiOperation id="spark.components:SkinnablePopUpContainer:updatePopUpPosition"><apiName>updatePopUpPosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnablePopUpContainer:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      当容器打开且当前显示为弹出窗口时，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      当容器打开且当前显示为弹出窗口时，则包含 <codeph>true</codeph>。  
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer/open"><linktext>打开</linktext></link><link href="spark.components.xml#SkinnablePopUpContainer/close"><linktext>关闭</linktext></link></related-links></apiValue><apiValue id="spark.components:SkinnablePopUpContainer:moveForSoftKeyboard:get"><apiName>moveForSoftKeyboard</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnablePopUpContainer:resizeForSoftKeyboard:get"><apiName>resizeForSoftKeyboard</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DropDownList"><apiName>DropDownList</apiName><shortdesc>
  DropDownList 控件包含下拉列表，用户可从中选择单个值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:DropDownList">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:DropDownList" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      包含选定项目的提示或文本的可选外观部件。 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that holds the prompt or the text of the selected item.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownList&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DropDownList 
    <strong>Properties</strong>
    prompt=""
    typicalItem="null"
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DropDownList 控件包含下拉列表，用户可从中选择单个值。其功能与 HTML 中 SELECT 表单元素的功能非常相似。
   <p>DropDownList 控件由锚点按钮、提示区域和下拉列表组成，使用锚点按钮可打开和关闭下拉列表。提示区域显示一个提示 String，或者显示下拉列表中的选定项目。</p>
   <p>打开下拉列表时：</p>
  <ul>
    <li>单击锚点按钮会关闭下拉列表并提交当前选定的数据项目。</li>
    <li>在下拉列表之外单击会关闭下拉列表并提交当前选定的数据项目。</li>
    <li>在某个数据项目上单击会选中该项目并关闭下拉列表。</li>
    <li>如果 <codeph>requireSelection</codeph> 属性为 <codeph>false</codeph>，则按下 Ctrl 键的同时单击某个数据项目会取消选中该项目并关闭下拉列表。</li>
  </ul>
   <p><b>注意：</b>基于 Spark List 的控件（Spark ListBase 类及其子类，如 ButtonBar、ComboBox、DropDownList、List 和 TabBar）不支持将 BasicLayout 类作为 <codeph>layout</codeph> 属性的值。不要将 BasicLayout 与基于 Spark List 的控件一起使用。</p>
   <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
  
  <p>DropDownList 控件具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>112 个像素宽 × 21 个像素高</entry></row><row><entry>最小大小</entry><entry>112 个像素宽 × 21 个像素高</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row><row><entry>默认外观类</entry><entry>spark.skins.spark.DropDownListSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><apiConstructor id="spark.components:DropDownList:DropDownList"><apiName>DropDownList</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:DropDownList:prompt:get"><apiName>prompt</apiName><shortdesc>
      DropDownList 控件的提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
           
      </apiDefaultValue></apiValueDef><apiDesc>
      DropDownList 控件的提示。提示是当 <codeph>selectedIndex</codeph> = -1 时在 DropDownList 中显示的 String。它通常是一个类似于“Select one...”的 String。选择下拉列表中的某个项目会使用选定项目中的文本替换该提示。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DropDownList:typicalItem:set"><apiName>typicalItem</apiName><shortdesc>
      当需要固定的行或列大小时，布局使用 typicalItem 的首选大小，但不设置某个特定的 rowHeight 或 columnWidth 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当需要固定的行或列大小时，布局使用 <codeph>typicalItem</codeph> 的首选大小，但不设置某个特定的 <codeph>rowHeight</codeph> 或 <codeph>columnWidth</codeph> 值。同样，虚拟布局使用此项目来定义未滚动到视图中的布局元素的大小。
           <p>该容器使用典型数据项目和关联的项呈示器来确定容器子项的默认大小。通过定义典型项目，容器不必在屏幕上绘制每个子项时来调整其大小。</p>
           <p>设置此属性会设置布局的 <codeph>typicalLayoutElement</codeph> 属性。</p>
     
      <p>限制：如果 <codeph>typicalItem</codeph> 是 IVisualItem，则它不能同时是数据提供程序的成员。</p>
     
      <p>注意：设置 <codeph>typicalItem</codeph> 时将覆盖对 <codeph>labelDisplay</codeph> 外观部件设置的任何显式宽度或高度。 </p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:GridColumnHeaderGroup"><apiName>GridColumnHeaderGroup</apiName><shortdesc>
  GridColumnHeaderGroup 类显示与网格布局对齐的一行列标题和分隔符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  所有标题呈示器的顶部嵌入（以像素为单位）。 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  最后一个标题呈示器的右侧嵌入（以像素为单位）。 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  第一个标题呈示器的左侧嵌入（以像素为单位）。 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  所有标题呈示器的底部嵌入（以像素为单位）。 
 
  </description>
<default>0
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="separatorAffordance" owner="spark.components:GridColumnHeaderGroup" playerVersion="Flash10" type="Number">
<description>
  列分隔符任意一侧的水平空间，将其视为分隔符的一部分以便分派鼠标事件。
 
  <p>分隔符通常只有一个像素宽，因此很难与它们交互。此值由 <codeph>getSeparatorIndexAt()</codeph> 用于为分隔符赋予较宽的区域，以便当鼠标比 <codeph>separatorMouseWidth</codeph> 更靠近分隔符的水平中点时分派分隔符事件。</p> 
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
</productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:GridColumnHeaderGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:GridColumnHeaderGroup 
    <strong>Properties</strong>
    columnSeperator="null"
    dataGrid="null"  
    downColumnIndex="-1"  
    headerRenderer="null"  
    hoverColumnIndex="-1"  
    visibleSortIndicatorIndices="<i>empty Vector.&lt;int&gt<i>"
 
    <strong>Styles</strong>
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    separatorAffordance="5" 
 
    <strong>Events</strong>
    gridClick="<i>No default</i>"
    gridDoubleClick="<i>No default</i>"
    gridMouseDown="<i>No default</i>"
    gridMouseDrag="<i>No default</i>"
    gridMouseUp="<i>No default</i>"
    gridMouseRollOut="<i>No default</i>"
    gridMouseRollOver="<i>No default</i>"
    separatorClick="<i>No default</i>"
    separatorDoubleClick="<i>No default</i>"
    separatorMouseDrag="<i>No default</i>"
    separatorMouseUp="<i>No default</i>"
    separatorMouseRollOut="<i>No default</i>"
    separatorMouseRollOver="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IDataGridElement</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  GridColumnHeaderGroup 类显示与网格布局对齐的一行列标题和分隔符。  
 
  <p>标题由类（由 <codeph>headerRenderer</codeph> 属性指定）呈示。分隔符由类（由 <codeph>columnSeparator</codeph> 属性指定）呈示。无法更改的布局是虚拟的，这说明将重用已可视范围内滚动出的呈示器和分隔符。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Grid"><linktext>Grid</linktext></link></related-links><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_DOUBLE_CLICK_separatorDoubleClick"><apiName>separatorDoubleClick</apiName><shortdesc>
  在列标题分隔符上双击鼠标时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在列标题分隔符上双击鼠标时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_CLICK_separatorClick"><apiName>separatorClick</apiName><shortdesc>
  在列标题分隔符上单击鼠标时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在列标题分隔符上单击鼠标时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_ROLL_OUT_separatorRollOut"><apiName>separatorRollOut</apiName><shortdesc>
  在鼠标离开由列分隔符和 separatorMouseWidth 定义的区域时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在鼠标离开由列分隔符和 <codeph>separatorMouseWidth</codeph> 定义的区域时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_ROLL_OVER_separatorRollOver"><apiName>separatorRollOver</apiName><shortdesc>
  在鼠标指向由列分隔符和 separatorMouseWidth 定义的区域时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在鼠标指向由列分隔符和 <codeph>separatorMouseWidth</codeph> 定义的区域时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_MOUSE_UP_separatorMouseUp"><apiName>separatorMouseUp</apiName><shortdesc>
  释放鼠标按钮时，在 separatorMouseDown 事件后分派，即使鼠标不再位于分隔符提供的值中也是如此。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  释放鼠标按钮时，在 <codeph>separatorMouseDown</codeph> 事件后分派，即使鼠标不再位于分隔符提供的值中也是如此。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.SEPARATOR_MOUSE_DRAG_separatorMouseDrag"><apiName>separatorMouseDrag</apiName><shortdesc>
  如果在释放按钮之前移动鼠标，则在 separatorMouseDown 事件后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.SEPARATOR_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  如果在释放按钮之前移动鼠标，则在 <codeph>separatorMouseDown</codeph> 事件后分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  在列标题上双击鼠标时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在列标题上双击鼠标时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  在列标题上单击鼠标时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在列标题上单击鼠标时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  在鼠标离开列标题时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在鼠标离开列标题时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  在鼠标指向列标题时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在鼠标指向列标题时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  释放鼠标按键时，在 gridMouseDown 事件后分派，即使鼠标不再位于 GridColumnHeaderGroup 中也是如此。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  释放鼠标按键时，在 <codeph>gridMouseDown</codeph> 事件后分派，即使鼠标不再位于 GridColumnHeaderGroup 中也是如此。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  如果在释放按钮之前移动鼠标，则在 gridMouseDown 事件后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  如果在释放按钮之前移动鼠标，则在 <codeph>gridMouseDown</codeph> 事件后分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:GridColumnHeaderGroup_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  在列标题上按下鼠标按钮时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在列标题上按下鼠标按钮时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:GridColumnHeaderGroup:GridColumnHeaderGroup"><apiName>GridColumnHeaderGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderBounds"><apiName>getHeaderBounds</apiName><shortdesc>
      返回指定标题（呈示器）的当前像素范围，如果不存在这样的列，则返回 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>表示列标题的像素范围的 <codeph>Rectangle</codeph> 或 null。
     
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列的从零开始的索引。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定标题（呈示器）的当前像素范围，如果不存在这样的列，则返回 null。报告 GridColumnHeaderGroup 坐标中的标题范围。
     
      <p>如果指定列前的所有可视列尚未滚动到视图，则基于所有 Grid 的 <codeph>typicalItem</codeph> 返回的范围可能只是一个近似值。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderIndexAt"><apiName>getHeaderIndexAt</apiName><shortdesc>
      返回对应于指定坐标的列索引；如果坐标超出边界，则返回 -1。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>列索引；如果坐标超出边界，则返回 -1。 
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>相对于 <codeph>columnHeaderGroup</codeph> 的像素的 x 坐标。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>相对于 <codeph>columnHeaderGroup</codeph> 的像素的 y 坐标。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回对应于指定坐标的列索引；如果坐标超出边界，则返回 -1。相对于 GridColumnHeaderGroup 布局目标解析坐标。
     
      <p>如果网格的所有列或行尚未滚动到视图，则基于所有列的 <codeph>typicalItem</codeph> 属性返回的索引可能只是一个近似值。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getHeaderRendererAt"><apiName>getHeaderRendererAt</apiName><shortdesc>
      如果请求的标题呈示器可用，则返回对指定列当前显示的标题呈示器的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>项呈示器；如果列索引无效，则为 null。
     
      </apiDesc><apiOperationClassifier>spark.components.gridClasses:IGridItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>标题呈示器列的从零开始的列索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果请求的标题呈示器可用，则返回对指定列当前显示的标题呈示器的引用。请注意，一旦返回的标题呈示器不再可见，则会将其回收，并重置其属性。  
     
      <p>如果请求的标题呈示器不可见，则每次调用此方法时创建一个新的标题呈示器。新的项呈示器不可见</p>
     
      <p>返回的呈示器的宽度与 DataGrid/getItemRendererAt() 返回的项呈示器的宽度相同。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:getSeparatorIndexAt"><apiName>getSeparatorIndexAt</apiName><shortdesc>
      返回对应于指定坐标的列分隔符索引；如果坐标不重叠分隔符，则为 -1。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>列索引；如果坐标不重叠分隔符，则为 -1。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>相对于 <codeph>columnHeaderGroup</codeph> 的像素的 x 坐标。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>相对于 <codeph>columnHeaderGroup</codeph> 的像素的 y 坐标。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回对应于指定坐标的列分隔符索引；如果坐标不重叠分隔符，则为 -1。相对于 GridColumnHeaderGroup 布局目标解析坐标。
     
      <p>如果 x 坐标在分隔符水平中点的 <codeph>separatorMouseWidth</codeph> 内，则分隔符认为是“重叠”指定位置。</p>
      
      <p>分隔符索引与左侧的列索引相同，假设该组件的 <codeph>layoutDirection</codeph> 是 <codeph>"ltr"</codeph>。这说明所有列标题两侧有两个分隔符，但是第一个可见列（仅在右侧有一个分隔符）和最后一个可见列（仅在左侧有一个分隔符）除外。</p>
     
      <p>如果网格的所有列或行尚未滚动到视图，则基于所有列的 <codeph>typicalItem</codeph> 属性返回的索引可能只是一个近似值。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:GridColumnHeaderGroup:isSortIndicatorVisible"><apiName>isSortIndicatorVisible</apiName><shortdesc>
      如果指定列的排序指示符可见，则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果指定列的排序指示符可见，则为 <codeph>true</codeph>。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>标题呈示器列的从零开始的列索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果指定列的排序指示符可见，则返回 <codeph>true</codeph>。这仅仅是如下内容的更有效版本：
      <pre>
          visibleSortIndicatorIndices.indexOf(columnIndex) != -1</pre>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:GridColumnHeaderGroup:columnSeparator:get"><apiName>columnSeparator</apiName><shortdesc>
      显示在各列之间的可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnSeparatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      显示在各列之间的可视元素。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:dataGrid:get"><apiName>dataGrid</apiName><shortdesc>
      定义此组件的列布局和水平滚动位置的 DataGrid 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataGridChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      定义此组件的列布局和水平滚动位置的 DataGrid 控件。已添加 DataGrid 的 <codeph>grid</codeph> 外观部件之后由 DataGrid 控件设置此属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:downColumnIndex:get"><apiName>downColumnIndex</apiName><shortdesc>
      为当前被用户按下的标题呈示器指定列索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="downColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      为当前被用户按下的标题呈示器指定列索引。
      
      <p>将 <codeph>downColumnIndex</codeph> 设置为 -1（默认值）表示未定义列索引，且标题呈示器将其 <codeph>down</codeph> 属性设置为 <codeph>false</codeph>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:headerRenderer:get"><apiName>headerRenderer</apiName><shortdesc>
      用于呈示每个列标题的 IGridItemRenderer 类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="headerRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      用于呈示每个列标题的 IGridItemRenderer 类。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:hoverColumnIndex:get"><apiName>hoverColumnIndex</apiName><shortdesc>
      为用户当前在其上悬浮鼠标的标题呈示器指定列索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoverColumnIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      为用户当前在其上悬浮鼠标的标题呈示器指定列索引。
      
      <p>将 <codeph>hoverColumnIndex</codeph> 设置为 -1（默认值）表示未定义列索引，且标题呈示器将其 <codeph>hovered</codeph> 属性设置为 <codeph>false</codeph>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:GridColumnHeaderGroup:visibleSortIndicatorIndices:get"><apiName>visibleSortIndicatorIndices</apiName><shortdesc>
      与当前使其排序指示符可见的标题呈示器相对应的列索引的矢量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="visibleSortIndicatorIndicesChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>an empty Vector.&amp;lt;int&amp;gt;
     
      </apiDefaultValue></apiValueDef><apiDesc>
      与当前使其排序指示符可见的标题呈示器相对应的列索引的矢量。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
  PopUpAnchor 组件用于定位布局中的弹出控件或下拉控件，例如 DropDownList 组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="popUp"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:PopUpAnchor&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:PopUpAnchor
 
    <strong>Properties</strong>
    displayPopUp="false"
    popUp=""
    popUpHeightMatchesAnchorHeight="false"
    popUpPosition="topLeft"
    popUpWidthMatchesAnchorWidth="false"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  PopUpAnchor 组件用于定位布局中的弹出控件或下拉控件，例如 DropDownList 组件。因为弹出或下拉列表控件是由 PopUpManager 添加到显示列表中的，所以它通常不会参与布局。PopUpAnchor 组件是添加到容器并设置布局的 UIComponent。因此，它负责相对于它自己调整弹出或下拉列表控件的大小并将其定位。它没有视觉外观。
   <p>PopUpAnchor 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="PopUpAnchorExample.mxml"><swfblock conref="examples/PopUpAnchorExample.swf"/></example></apiClassifierDetail><apiConstructor id="spark.components:PopUpAnchor:PopUpAnchor"><apiName>PopUpAnchor</apiName><shortdesc>
      构造函数
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数
           </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:PopUpAnchor:protected:calculatePopUpPosition"><apiName>calculatePopUpPosition</apiName><shortdesc>
      定位 popUp 控件时、显示它时或调用 updatePopUpTransform() 时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>全局坐标系中 <codeph>popUp</codeph> 控件的绝对位置。  
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn></apiOperationDef><apiDesc>
      定位 <codeph>popUp</codeph> 控件时、显示它时或调用 <codeph>updatePopUpTransform()</codeph> 时调用。覆盖此函数以改变 <codeph>popUp</codeph> 控件的位置。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:PopUpAnchor:updatePopUpTransform"><apiName>updatePopUpTransform</apiName><shortdesc>
      更新 popUp 控件的转换矩阵。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      更新 <codeph>popUp</codeph> 控件的转换矩阵。通常情况下，在对 PopUpAnchor 产生效果时调用此函数。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:PopUpAnchor:popUpPosition:set"><apiName>popUpPosition</apiName><shortdesc>
      popUp 控件打开时的位置，与 PopUpAnchor 组件有关。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>PopUpPosition.TOP_LEFT
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>popUp</codeph> 控件打开时的位置，与 PopUpAnchor 组件有关。可能的值为 <codeph>"left"、“"right"、"above"、"below"、"center"</codeph> 和 <codeph>"topLeft"</codeph>。
     
       
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#PopUpPosition"><linktext>spark.components.PopUpPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:PopUpAnchor:displayPopUp:set"><apiName>displayPopUp</apiName><shortdesc>
      如果为 true，则将 popUp 控件添加到 PopUpManager 中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则将 <codeph>popUp</codeph> 控件添加到 PopUpManager 中。如果为 <codeph>false</codeph>，则将删除该控件。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpHeightMatchesAnchorHeight:set"><apiName>popUpHeightMatchesAnchorHeight</apiName><shortdesc>
      如果为 true，则将 popUp 控件的高度设置为 PopUpAnchor 的高度值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则将 <codeph>popUp</codeph> 控件的高度设置为 PopUpAnchor 的高度值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUpWidthMatchesAnchorWidth:set"><apiName>popUpWidthMatchesAnchorWidth</apiName><shortdesc>
      如果为 true，则将 popUp 控件的宽度设置为 PopUpAnchor 的宽度值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则将 <codeph>popUp</codeph> 控件的宽度设置为 PopUpAnchor 的宽度值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpAnchor:popUp:set"><apiName>popUp</apiName><shortdesc>
      打开 PopUpAnchor 时要添加到 PopUpManager 中的 IFlexDisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="popUpChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/></apiValueDef><apiDesc>
      打开 PopUpAnchor 时要添加到 PopUpManager 中的 IFlexDisplayObject。如果 <codeph>popUp</codeph> 控件实现了 IFocusManagerContainer，则 <codeph>popUp</codeph> 控件将拥有其自己的 FocusManager。如果用户使用 Tab 键在各控件之间导航，则仅访问 <codeph>popUp</codeph> 控件中的控件。 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:List"><apiName>List</apiName><shortdesc>
  List 控件可显示垂直项目列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:List" playerVersion="Flash10" type="String">
<description>
  指示在哪些条件下会显示垂直滑动条。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（“on”）- 始终显示滚动条。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（“off”）- 从不显示滚动条。通过设置视域的 verticalScrollPosition 属性，仍可以按编程方式滚动视域。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（“auto”）- 当视域的 contentHeight 大于其自身的高度时显示滚动条。
  </li>
  </ul>
 
  <p>
  滚动策略影响 Scroller 外观部件的测量大小。此样式仅仅是 Scroller 外观部件 verticalScrollPolicy 的封面。它不是继承样式，例如它不会影响项呈示器。
  </p>
   <p>在手机应用程序中使用水平 List 控件时，请将 <codeph>horizontalScrollPolicy</codeph> 设置为 <codeph>on</codeph>，并将 <codeph>verticalScrollPolicy</codeph> 设置为 <codeph>auto</codeph>，以启用水平跳动和拉动效果。否则，控件将使用垂直跳动和拉动效果。</p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:List" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  用户选中呈示器时其背景的颜色。
   <p>Halo 主题的默认值为 <codeph>0x7FCEFF</codeph>。Spark 主题的默认值为 <codeph>0xA8C6EE</codeph>。Mobile 主题的默认值为 <codeph>0xE0E0E0</codeph>。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:List" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:List" playerVersion="Flash10" type="String">
<description>
  指示在哪些条件下会显示水平滑动条。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（“on”）- 始终显示滚动条。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（“off”）- 从不显示滚动条。通过设置视域的 horizontalScrollPosition 属性，仍可以按编程方式滚动视域。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（“auto”）- 当视域的 contentWidth 大于其自身的宽度时显示滚动条。
  </li>
  </ul>
 
  <p>滚动策略影响 Scroller 外观部件的测量大小。此样式仅仅是 scroller 外观部件 horizontalScrollPolicy 的封面。它不是继承样式，例如它不会影响项呈示器。</p>
   <p>在手机应用程序中使用水平 List 控件时，请将 <codeph>horizontalScrollPolicy</codeph> 设置为 <codeph>on</codeph>，并将 <codeph>verticalScrollPolicy</codeph> 设置为 <codeph>auto</codeph>，以启用水平跳动和拉动效果。否则，控件将使用垂直跳动和拉动效果。</p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style inherit="no" name="dropIndicatorSkin" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  如果 <codeph>dropIndicator</codeph> 外观部件未在 List 外观中指定，则将在 List 为潜在放置目标的拖放操作过程中创建此类的实例，并将其用于默认拖放指示符。
   </description>
<default>spark.skins.spark.ListDropIndicator
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dragIndicatorClass" owner="spark.components:List" playerVersion="Flash10" type="Class">
<description>
  用于在由 List 启动的拖放操作过程中为拖放指示符创建实例的类。必须为 <codeph>IFlexDisplayObject</codeph> 类型。
   <p>如果该类实现 <codeph>ILayoutManagerClient</codeph> 接口，则由 DragManager 验证实例。</p>
   <p>如果该类实现 <codeph>IVisualElement</codeph> 接口，则将实例的 <codeph>owner</codeph> 属性设置为启动拖动的 List。</p>
   <p>AIR DragManager 对实例拍摄快照，而非 AIR DragManager 直接使用该实例。</p>
   </description>
<default>spark.components.supportClasses.ListItemDragProxy
   </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:List" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  组件内容背景的 Alpha。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Boolean">
<description>
  控制此组件的边框的可见性。
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  此组件的边框的颜色。
    </description>
<default>#696969
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  此组件的边框的 Alpha。
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:List" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropIndicator" owner="spark.components:List" playerVersion="Flash10" required="false" type="flash.display.DisplayObject" var_type="mx.core:IFactory">
<description>
      定义拖放指示符外观的外观部件。拖放指示符的大小和位置由布局确定，以大致确定在 List 上拖动时的插入位置。
           <p>默认情况下，Spark 控件的拖放指示符是跨越此控件宽度的实线。为放置目标创建自定义外观类可创建自定义拖放指示符。在您的外观类中，在外观类的 &lt;fx:Declarations> 区域中创建名为 <codeph>dropIndicator</codeph> 的外观部件。</p>
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the appearance of the drop indicator.</shortdesc></SkinPart><SkinPart name="scroller" owner="spark.components:List" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      用于滚动 List 的可选 Scroller。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The optional Scroller used to scroll the List.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:List&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:List
    <strong>Properties</strong>
    allowMultipleSelection="false"
    dragEnabled="false"
    dragMoveEnabled="false"
    dropEnabled="false"
    selectedIndices="null"
    selectedItems="null"
    useVirtualLayout="true"
 
    <strong>Styles</strong>
    alternatingItemColors="undefined"
    borderAlpha="1.0"
    borderColor="0#CCCCCC"
    borderVisible="true"
    contentBackgroundColor="0xFFFFFF"
    downColor="0xA8C6EE"
    dragIndicator="ListItemDragProxy"
    dropIndicatorSkin="ListDropIndicator"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  List 控件可显示垂直项目列表。其功能与 HTML 中的 SELECT 表单元素的功能相似。如果包含的项目太多无法同时显示，则会显示一个垂直滚动条，以便用户可访问列表中的所有项目。可以选择使用水平滚动条，以便用户在列表项目的整个宽度不适合时查看项目。用户可以根据 <codeph>allowMultipleSelection</codeph> 属性的值从列表中选择一个或多个项目。
   <p><b>注意：</b>基于 Spark List 的控件（Spark ListBase 类及其子类，如 ButtonBar、ComboBox、DropDownList、List 和 TabBar）不支持将 BasicLayout 类作为 <codeph>layout</codeph> 属性的值。不要将 BasicLayout 与基于 Spark List 的控件一起使用。指定布局时，不应该设置布局的 typicalLayoutElement 属性；会将其自动设置为使用 List 的 <codeph>typicalItem</codeph> 创建的项呈示器。</p>
   <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
   <p>List 控件具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>112 个像素宽 × 112 个像素高</entry></row><row><entry>最小大小</entry><entry>112 个像素宽 × 112 个像素高</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row><row><entry>默认外观类</entry><entry>spark.skins.spark.ListSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ListExample.mxml"><swfblock conref="examples/ListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ListSkin"><linktext>spark.skins.spark.ListSkin</linktext></link></related-links><apiConstructor id="spark.components:List:List"><apiName>List</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:List:addDragData"><apiName>addDragData</apiName><shortdesc>
      作为拖放操作的一部分，将所选项目添加到 DragSource 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dragSource</apiItemName><apiType value="mx.core:DragSource"/><apiDesc>在其中添加数据的 DragSource 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      作为拖放操作的一部分，将所选项目添加到 DragSource 对象。覆盖此方法可将其它数据添加到拖动源。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelectionAndCaretUponNavigation"><apiName>adjustSelectionAndCaretUponNavigation</apiName><shortdesc>
      根据遇到的键击或键击组合，调整所选项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>遇到 Keyboard 事件
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      根据遇到的键击或键击组合，调整所选项。将键击向下发送到布局，布局的 getNavigationDestinationIndex() 方法根据当前处于焦点的项确定导航到的索引。索引确定后，将更新单项选择、caret 项以及（如有必要）多项选择，以反映新选择的项。  
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      调整选定索引以说明正添加到此组件或正从此组件中删除的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>新索引。
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果已将项目添加到组件，则为 <codeph>true</codeph>；如果已删除项目，则为 <codeph>false</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      调整选定索引以说明正添加到此组件或正从此组件中删除的项目。 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:protected:calculateSelectedIndices"><apiName>calculateSelectedIndices</apiName><shortdesc>
      Helper 方法，用于计算单击某项时当前所选项目如何发生变化。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>新所选项目将提交到的更新后的项索引。
     
      </apiDesc><apiType value="Vector$int"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>已单击的项的索引。
      </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiDesc>按下 Shift 键时为 true。
      </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiDesc>按下 Ctrl 键时为 true。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Helper 方法，用于计算单击某项时当前所选项目如何发生变化。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/selectedIndices"><linktext>selectedIndices</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:protected:copyItemWithUID"><apiName>copyItemWithUID</apiName><shortdesc>
      通过调用 ObjectUtil.copy() 方法为此对象制作一个深层副本，然后通过调用 UIDUtil.createUID() 方法用一个新值替代该副本的 uid 属性（如果存在）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>对象的副本。
           </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要复制的项目。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通过调用 <codeph>ObjectUtil.copy()</codeph> 方法为此对象制作一个深层副本，然后通过调用 <codeph>UIDUtil.createUID()</codeph> 方法用一个新值替代该副本的 <codeph>uid</codeph> 属性（如果存在）。
     
      <p>此方法用于拖放副本。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.utils.ObjectUtil.xml"><linktext>mx.utils.ObjectUtil</linktext></link><link href="" invalidHref="mx.utils.UIDUtil.xml"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:createDragIndicator"><apiName>createDragIndicator</apiName><shortdesc>
      为用于在拖放操作过程中显示已拖动项的视觉效果的类创建实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>代表拖动指示符的 IFlexDisplayObject。
      
      </apiDesc><apiType value="mx.core:IFlexDisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      为用于在拖放操作过程中显示已拖动项的视觉效果的类创建实例。默认 <codeph>DragEvent.DRAG_START</codeph> 处理函数将此实例传送给 <codeph>DragManager.doDrag()</codeph> 方法。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:List:createDropIndicator"><apiName>createDropIndicator</apiName><shortdesc>
      为用于在拖放操作过程中显示拖放位置的视觉效果的 dropIndicator 类创建实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>返回在布局中设置的 dropIndicator。
           </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      为用于在拖放操作过程中显示拖放位置的视觉效果的 dropIndicator 类创建实例。此实例在布局的 <codeph>dropIndicator</codeph> 属性中设置。
           <p>如果覆盖 <codeph>dragEnter</codeph> 事件处理函数，并调用 <codeph>preventDefault()</codeph> 以免执行默认处理函数，则请调用 <codeph>createDropIndicator()</codeph> 创建拖放指示符。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/destroyDropIndicator"><linktext>destroyDropIndicator</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:destroyDropIndicator"><apiName>destroyDropIndicator</apiName><shortdesc>
      释放当前在布局中设置的 dropIndicator 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>返回删除的 dropIndicator。 
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn></apiOperationDef><apiDesc>
      释放当前在布局中设置的 <codeph>dropIndicator</codeph> 实例。
           <p>如果覆盖 <codeph>dragExit</codeph> 事件处理函数，并调用 <codeph>preventDefault()</codeph> 以免执行默认处理函数，则请调用 <codeph>destroyDropIndicator()</codeph> 删除拖放指示符。</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#List/createDropIndicator"><linktext>createDropIndicator</linktext></link></related-links></apiOperation><apiOperation id="spark.components:List:ensureIndexIsVisible"><apiName>ensureIndexIsVisible</apiName><shortdesc>
      滚动数据项以使其可见的简便处理方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>数据项的索引。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      滚动数据项以使其可见的简便处理方法。如果指定索引的数据项未完全显示，List 将滚动，直到数据项显示出来。如果数据项已显示出来，则不会发生任何其它滚动。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:List:allowMultipleSelection:get"><apiName>allowMultipleSelection</apiName><shortdesc>
      如果为 true，则会启用多项选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则会启用多项选择。在运行时进行切换时，会清除当前选择。当 <codeph>interactionMode</codeph> 为 <codeph>touch</codeph> 时，不应将其打开。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragEnabled:get"><apiName>dragEnabled</apiName><shortdesc>
      一个标志，指示是否可以将项目拖出此控件并放到其它控件上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否可以将项目拖出此控件并放到其它控件上。如果设置为 <codeph>true</codeph>，则表示可以在该控件中进行拖动。如果 <codeph>dropEnabled</codeph> 属性同样设置为 <codeph>true</codeph>，您就可以在该控件中拖放项目进行重新排序。
     
      <p>不支持在 <codeph>interactionMode</codeph> 设置为 <codeph>touch</codeph> 的手机设备上执行拖放操作。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      一个标志，指示在拖放操作过程中是否可以移动控件中的项目，而不只是从控件中复制这些项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示在拖放操作过程中是否可以移动控件中的项目，而不只是从控件中复制这些项目。如果此属性设置为 <codeph>true</codeph>，<codeph>dragEnabled</codeph> 属性设置为 <codeph>true</codeph>，就可以移动项目。通常情况下，不能或不应移除数据提供程序中的项目，因此在拖放过程中不应允许移动操作。
     
      <p>不支持在 <codeph>interactionMode</codeph> 设置为 <codeph>touch</codeph> 的手机设备上执行拖放操作。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:dropEnabled:get"><apiName>dropEnabled</apiName><shortdesc>
      一个标志，指示是否可以将所拖动的项目放到此控件上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否可以将所拖动的项目放到此控件上。
           <p>如果将此属性设置为 <codeph>true</codeph>，则该控件将接受所有数据格式，并假定所拖动的数据与数据提供程序中数据的格式相匹配。如果要显式检查正在拖动的数据的数据格式，您必须处理一个或多个拖动事件（如 <codeph>dragEnter</codeph> 和 <codeph>dragOver</codeph>），并调用 DragEvent 的 <codeph>preventDefault()</codeph> 方法来自定义列表类接受拖放数据的方式。</p>
     
      <p>不支持在 <codeph>interactionMode</codeph> 设置为 <codeph>touch</codeph> 的手机设备上执行拖放操作。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:pageScrollingEnabled:get"><apiName>pageScrollingEnabled</apiName><shortdesc>
      页面滚动当前是否对此 Scroller 启用
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      页面滚动当前是否对此 Scroller 启用
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:scrollSnappingMode:get"><apiName>scrollSnappingMode</apiName><shortdesc>
      当前对此 Scroller 生效的滚动贴紧模式（它将此属性更改为“off”以外的任何值）可能导致滚动位置立即发生变化以确保一个元素正确地“贴紧”到位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"off"
           </apiDefaultValue></apiValueDef><apiDesc>
      滚动贴紧模式当前对此 Scroller 生效
           <p>将此属性更改为“off”以外的任何值可能导致滚动位置立即发生变化以确保一个元素正确地“贴紧”到位置。这种滚动位置的变化不是动画</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ScrollSnappingMode"><linktext>spark.components.ScrollSnappingMode</linktext></link></related-links></apiValue><apiValue id="spark.components:List:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      表示当前选定的一个或多个项目的索引的 int 的 Vector。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      表示当前选定的一个或多个项目的索引的 int 的 Vector。如果已通过将 <codeph>allowMultipleSelection</codeph> 设置为 <codeph>false</codeph> 来禁用多项选择，且已设置此属性，则会选择与 Vector 中第一个索引相对应的数据项目。  
           <p>如果通过将 <codeph>allowMultipleSelection</codeph> 设置为 <codeph>true</codeph> 来启用多项选择，该属性将包含选定索引列表，其中选定索引按选择顺序的相反顺序列出。这表示 Vector 中第一个元素与选定的最后一项相对应。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      表示当前选定数据项的 Object 的 Vector。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      表示当前选定数据项的 Object 的 Vector。如果已通过将 <codeph>allowMultipleSelection</codeph> 设置为 <codeph>false</codeph> 来禁用多项选择，且已设置此属性，则会选择与 Vector 中第一个项目相对应的数据项目。  
           <p>如果通过将 <codeph>allowMultipleSelection</codeph> 设置为 <codeph>true</codeph> 来启用多项选择，该属性将包含选定项列表，其中选定索引按选择顺序的相反顺序列出。这表示 Vector 中第一个元素与选定的最后一项相对应。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      
      设置与此控件相关联的布局的 useVirtualLayout 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      设置与此控件相关联的布局的 <codeph>useVirtualLayout</codeph> 属性的值。如果该布局随后被替换，且此属性的值为 <codeph>true</codeph>，则会将新布局的 <codeph>useVirtualLayout</codeph> 属性设置为 <codeph>true</codeph>。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:List:hasFocusableChildren:set"><apiName>hasFocusableChildren</apiName><shortdesc>
      一个标志，指示此 List 可获得焦点的项呈示器能够获得键盘焦点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示此 List 可获得焦点的项呈示器能够获得键盘焦点。 
           <p><b>注意：</b>此属性与 Flash Player 使用的 <codeph>tabChildren</codeph> 属性类似。应该将 <codeph>hasFocusableChildren</codeph> 属性用于 Flex 应用程序。请勿使用 <codeph>tabChildren</codeph> 属性。</p>
           <p>此属性通常为 <codeph>false</codeph>，因为大多数组件既可以自己获得焦点，也可以委托单个内部子组件获得焦点（但显示为该组件获得了焦点）。可以选择在 List 中将此项设置为 true，以使该 List 中的内容可获得焦点。</p>
     
      <p>如果设置为 true，且 List 外观包含 Scroller 外观部件，该值则由其下的 Scroller 代理。</p> 
     
      <p>如果该值为 <codeph>true</codeph>，此代理表示 Scroller 的内容（如项呈示器）现在可获得焦点。例如，这表示第一个 Tab 键击会将焦点置于 List 控件，第二个 Tab 键击会将焦点置于 Scroller 中可获得焦点的第一个子代。</p> 
      
      <p>如果为 <codeph>false</codeph>，则第一个 Tab 键击会将焦点置于 List 控件，第二个 Tab 键击会将焦点移至 List 后下一个可获得焦点的控件。</p> 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:BorderContainer"><apiName>BorderContainer</apiName><shortdesc>
  BorderContainer 类定义一组 CSS 样式，用于控制容器的边框外观和背景填充。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:BorderContainer">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Boolean">
<description>
  如果为 <codeph>true</codeph>，则容器包含可见投影。
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  边框圆角半径。
   </description>
<default>0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderWeight" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  边框笔触粗细。 
   </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Boolean">
<description>
  确定边框是否可见。如果为 <codeph>false</codeph>，则除了使用 <codeph>borderStroke</codeph> 属性设置的边框可见外，其他边框均不可见。 
   
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="inset,solid" inherit="no" name="borderStyle" owner="spark.components:BorderContainer" playerVersion="Flash10" type="String">
<description>
  边框样式。可能的值为 <codeph>"solid"</codeph> 和 <codeph>"inset"</codeph>。
 
  </description>
<default>solid
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:BorderContainer" playerVersion="Flash10" type="uint">
<description>
  边框颜色。
  
  </description>
<default>0xB7BABC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Number">
<description>
  由 <codeph>borderColor</codeph> 样式定义的颜色的透明度级别。有效值范围是 0.0 到 1.0。 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="scale,clip,repeat" inherit="no" name="backgroundImageFillMode" owner="spark.components:BorderContainer" playerVersion="Flash10" type="String">
<description>
  确定背景图像填充尺寸的方式。如果在 MXML 中设置此属性的值，则使用字符串（如“repeat”）。如果在 ActionScript 中设置此属性的值，则使用该常量（如 <codeph>BitmapFillMode.CLIP</codeph>）。
 
  <p>设置为 <codeph>BitmapFillMode.CLIP</codeph>（“clip”）时，图像在区域的边缘处结束。</p>
 
  <p>设置为 <codeph>BitmapFillMode.REPEAT</codeph>（“repeat”）时，位图将重复以填充区域。</p>
   <p>设置为 <codeph>BitmapFillMode.SCALE</codeph>（“scale”）时，图像将拉伸以填充区域。</p>
 
  </description>
<default>&lt;code>BitmapFillMode.SCALE&lt;/code>
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="spark.components:BorderContainer" playerVersion="Flash10" type="Object">
<description>
  容器的背景图像。如果同时设置了 <codeph>backgroundColor</codeph> 和 <codeph>backgroundImage</codeph>，则忽略 <codeph>backgroundColor</codeph>。默认值为 <codeph>undefined</codeph>，表示“未设置”。如果此样式和 <codeph>backgroundColor</codeph> 样式都未定义，则控件将采用透明背景。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:BorderContainer&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
   <pre>
  &lt;s:BorderContainer
    <b>Properties</b>
    backgroundFill="null"
    borderStroke="null"
 
    <b>Styles</b>
    backgroundImage="undefined"
    backgroundImageFillMode="scale"
    borderAlpha="1.0"
    borderColor="0xB7BABC"
    borderStyle="solid"
    borderVisible="true"
    borderWeight="1"
    cornerRadius="0"
    dropShadowVisible="false"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  BorderContainer 类定义一组 CSS 样式，用于控制容器的边框外观和背景填充。 
   <p><b>注意：</b>因为使用 CSS 样式和类属性控制 BorderContainer 的外观，所以通常不会为该容器创建自定义外观。如果确实创建了自定义外观，外观类应当应用任何样式控制容器外观。</p>
   <p>默认情况下，边框的笔触是圆形的。如果不喜欢圆角，请将笔触的 <codeph>joints</codeph> 属性设置为 <codeph>JointStyle.MITER</codeph>。 </p>
  
  <p>BorderContainer 容器具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>112 个像素宽 × 112 个像素高</entry></row><row><entry>最小大小</entry><entry>112 个像素宽 × 112 个像素高</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row><row><entry>默认外观类</entry><entry>spark.skins.spark.BorderContainerSkin</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="BorderContainerExample.mxml"><swfblock conref="examples/BorderContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#BorderContainerSkin"><linktext>spark.skins.spark.BorderContainerSkin</linktext></link></related-links><apiConstructor id="spark.components:BorderContainer:BorderContainer"><apiName>BorderContainer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:BorderContainer:backgroundFill:get"><apiName>backgroundFill</apiName><shortdesc>
      定义 BorderContainer 的背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IFill"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      定义 BorderContainer 的背景。设置此属性将覆盖 <codeph>backgroundAlpha</codeph>、<codeph>backgroundColor</codeph>、<codeph>backgroundImage</codeph> 和 <codeph>backgroundImageFillMode</codeph> 样式。
     
      <p>下例使用 <codeph>backgroundFill</codeph> 属性将背景色设置为红色：</p>
           <pre>
      &lt;s:BorderContainer cornerRadius="10"> 
         &lt;s:backgroundFill> 
             &lt;s:SolidColor 
                 color="red" 
                 alpha="1"/> 
         &lt;/s:backgroundFill> 
      &lt;/s:BorderContainer> </pre>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:BorderContainer:borderStroke:get"><apiName>borderStroke</apiName><shortdesc>
      定义 BorderContainer 容器的笔触。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.graphics:IStroke"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      定义 BorderContainer 容器的笔触。设置此属性将覆盖 <codeph>borderAlpha</codeph>、<codeph>borderColor</codeph>、<codeph>borderStyle</codeph>、<codeph>borderVisible</codeph> 和 <codeph>borderWeight</codeph> 样式。  
     
      <p>以下是设置 <codeph>borderStroke</codeph> 属性的示例：</p>
           <pre>
      &lt;s:BorderContainer cornerRadius="10"> 
         &lt;s:borderStroke> 
             &lt;mx:SolidColorStroke 
                 color="black" 
                 weight="3"/> 
         &lt;/s:borderStroke> 
      &lt;/s:BorderContainer> </pre>
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRenderer"><apiName>IItemRenderer</apiName><shortdesc>
  IItemRenderer 接口定义基本 API 集，类必须实现这些 API 才能创建可以与主机组件通信的项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IItemRenderer 接口定义基本 API 集，类必须实现这些 API 才能创建可以与主机组件通信的项呈示器。主机组件（如 List 或 ButtonBar 控件）必须实现 IItemRendererOwner 接口。 
   
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRendererOwner"><linktext>spark.components.IItemRendererOwner</linktext></link></related-links><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      如果正在拖动项呈示器，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果正在拖动项呈示器，则包含 <codeph>true</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      项呈示器的主机组件的数据提供程序中的项目索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      项呈示器的主机组件的数据提供程序中的项目索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      要在项呈示器中显示的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      要在项呈示器中显示的 String。 
     
      <p>项呈示器的主机组件可以使用 <codeph>itemToLabel()</codeph> 方法将数据项目转换为 String 以便项呈示器可以将其显示。 </p>
     
      <p>对于诸如 List 和 ButtonBar 等控件，可以使用 <codeph>labelField</codeph> 或 <codeph>labelFunction</codeph> 属性指定包含 String 的数据项目的字段。否则，主机组件使用 <codeph>toString()</codeph> 方法将数据项目转换为 String。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      如果项呈示器可以将其自身显示为已选中，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果项呈示器可以将其自身显示为已选中，则包含 <codeph>true</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:IItemRenderer:spark.components:IItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      如果项呈示器可以将其自身显示为已获取焦点，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果项呈示器可以将其自身显示为已获取焦点，则包含 <codeph>true</codeph>。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
  VideoPlayer 控件是一个可设置外观的视频播放器，它支持渐进式下载、多比特率流和流视频。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VideoPlayer">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="source"/><skinStates><SkinState name="disabledAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的已禁用状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackErrorAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的播放错误状态。尝试播放视频时出错。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="bufferingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的缓冲状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="pausedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的已暂停状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的播放状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="readyAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的准备状态。准备播放视频。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loadingAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的加载状态。VideoPlayer 正在加载或连接到源。 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitializedAndFullScreen" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  处于全屏模式时 VideoPlayer 的未初始化状态。此时已构造 VideoPlayer，但源尚未设置，且未尝试进行任何连接。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的已禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playbackError" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的播放错误状态。尝试播放视频时出错。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="buffering" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的缓冲状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="paused" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的已暂停状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="playing" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的播放状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的准备状态。准备播放视频。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的加载状态。VideoPlayer 正在加载或连接到源。 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:VideoPlayer" playerVersion="Flash10">
<description>
  VideoPlayer 的未初始化状态。此时已构造 VideoPlayer，但源尚未设置，且未尝试进行任何连接。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="fullScreenHideControlsDelay" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  在隐藏视频回放控件之前，在没有用户交互的情况下，在全屏模式下等待的时间（以毫秒为单位）。  
 
  <p>如果设置为 <codeph>Infinity</codeph>，则不会在全屏模式下隐藏播放控件。在全屏模式下更改此值将不起作用。</p>
  
  </description>
<default>3000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="spark.components:VideoPlayer" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  控制此组件的投影的可见性。
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#VideoPlayer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:VideoPlayer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#VideoPlayer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#VideoPlayer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:VideoPlayer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#VideoPlayer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:VideoPlayer" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="videoDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="true" var_type="spark.components:VideoDisplay">
<description>
      定义 VideoDisplay 的必需外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A required skin part that defines the VideoDisplay.</shortdesc></SkinPart><SkinPart name="currentTimeDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      可选外观部件，用于显示 <codeph>codecurrentTime</codeph> 的当前值。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part to display the current value of codecurrentTime.</shortdesc></SkinPart><SkinPart name="fullScreenButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      切换全屏模式按钮的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for a button to toggle fullscreen mode.</shortdesc></SkinPart><SkinPart name="muteButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:MuteButton">
<description>
      静音按钮的可选外观部件。静音按钮具有一个 <codeph>muted</codeph> 属性和一个 <codeph>volume</codeph> 属性。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the mute button.</shortdesc></SkinPart><SkinPart name="pauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      暂停按钮的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the pause button.</shortdesc></SkinPart><SkinPart name="playButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      播放按钮的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the play button.</shortdesc></SkinPart><SkinPart name="playerControls" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      所有播放器控件的可选外观部件。该外观用于确定播放器处于全屏模式时需要隐藏的内容，且没有用户交互。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for all of the player controls.</shortdesc></SkinPart><SkinPart name="playPauseButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ToggleButtonBase">
<description>
      播放/暂停按钮的可选外观部件。播放视频时，会将 <codeph>selected</codeph> 属性设置为 <codeph>true</codeph>。暂停或停止视频时，会将 <codeph>selected</codeph> 属性设置为 <codeph>false</codeph>。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for a play/pause button.</shortdesc></SkinPart><SkinPart name="scrubBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:ScrubBar">
<description>
      拖拉条（时间轴）的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the scrub bar (the 
      timeline).</shortdesc></SkinPart><SkinPart name="stopButton" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:ButtonBase">
<description>
      停止按钮的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the stop button.</shortdesc></SkinPart><SkinPart name="durationDisplay" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      要显示 duration 的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part to display the duration.</shortdesc></SkinPart><SkinPart name="volumeBar" owner="spark.components:VideoPlayer" playerVersion="Flash10" required="false" var_type="spark.components.mediaClasses:VolumeBar">
<description>
      音量控制的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part for the volume control.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoPlayer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoPlayer
 
    <strong>Properties</strong>
    autoDisplayFirstFrame="true"
    autoPlay="true"
    autoRewind="true"
    loop="false"
    muted="false"
    pauseWhenHidden="true"
    scaleMode="letterbox"
    source=""
    volume="1"
  
    <strong>Events</strong>
    bytesLoadedChange="<i>No default</i>"
    complete="<i>No default</i>"
    currentTimeChange="<i>No default</i>"
    durationChange="<i>No default</i>"
    mediaPlayerStateChange="<i>No default</i>"
  
 
    <strong>Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    dropShadowVisible="true"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false%"
    locale="en"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  VideoPlayer 控件是一个可设置外观的视频播放器，它支持渐进式下载、多比特率流和流视频。它支持播放 FLV 和 F4v 文件。VideoPlayer 控件包含控制视频播放的全能 UI。
 
  <p><codeph>VideoDisplay</codeph> 是不支持外观设置的无镶边版本。当不希望用户与控件交互时，该类非常有用。</p>
   <p>VideoPlayer 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>263 个像素宽 × 184 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.VideoPlayerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VideoPlayerExample.mxml"><swfblock conref="examples/VideoPlayerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#VideoDisplay"><linktext>spark.components.VideoDisplay</linktext></link><link href="spark.skins.spark.xml#VideoPlayerSkin"><linktext>spark.skins.spark.VideoPlayerSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.fullScreen.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.fullScreen.VolumeBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#FullScreenButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.FullScreenButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#MuteButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.MuteButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#PlayPauseButtonSkin"><linktext>spark.skins.spark.mediaClasses.normal.PlayPauseButtonSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#ScrubBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.ScrubBarTrackSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarThumbSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarThumbSkin</linktext></link><link href="spark.skins.spark.mediaClasses.normal.xml#VolumeBarTrackSkin"><linktext>spark.skins.spark.mediaClasses.normal.VolumeBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
  在 MediaPlayer 的状态发生变化时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在 MediaPlayer 的状态发生变化时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
  在媒体的 duration 属性发生变化时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.DURATION_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在媒体的 <codeph>duration</codeph> 属性发生变化时分派。
 
  <p>将源设置为 null 或发生播放错误时，可能无法分派此事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE_currentTimeChange"><apiName>currentTimeChange</apiName><shortdesc>
  在 MediaPlayer 的 currentTime 属性发生变化时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在 MediaPlayer 的 <codeph>currentTime</codeph> 属性发生变化时分派。
 
  <p>将源设置为 null 或发生播放错误时，可能无法分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.TimeEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  在播放头已达到可播放媒体的持续时间时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.COMPLETE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在播放头已达到可播放媒体的持续时间时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoPlayer_org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE_bytesLoadedChange"><apiName>bytesLoadedChange</apiName><shortdesc>
  在下载操作进行过程中接收到数据时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.LoadEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在下载操作进行过程中接收到数据时分派。仅当通过从服务器直接下载某个视频（通常通过发出 HTTP 请求）来播放它时，才能分派此事件。从特定媒体服务器（如 Flash Media Server）播放视频时，不会分派此事件。
 
  <p>将源设置为 null 或发生播放错误时，可能无法分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoPlayer:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoPlayer:protected:formatTimeValue"><apiName>formatTimeValue</apiName><shortdesc>
      将时间值（以秒为单位指定）的格式设置为用于 currentTime 和 duration 的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>已设置格式的时间值。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>要设置格式的时间值（以秒为单位）。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将时间值（以秒为单位指定）的格式设置为用于 <codeph>currentTime</codeph> 和 <codeph>duration</codeph> 的字符串。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:pause"><apiName>pause</apiName><shortdesc conref="spark.components.VideoDisplay#pause()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果尚未加载该外观且不存在 videoDisplay。    
           </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#pause()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:play"><apiName>play</apiName><shortdesc conref="spark.components.VideoDisplay#play()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果尚未加载该外观且不存在 videoDisplay。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#play()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:seek"><apiName>seek</apiName><shortdesc conref="spark.components.VideoDisplay#seek()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果尚未加载该外观且不存在 videoDisplay。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>搜索时间（以秒为单位）。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#seek()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoPlayer:stop"><apiName>stop</apiName><shortdesc conref="spark.components.VideoDisplay#stop()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果尚未加载该外观且不存在 videoDisplay。
     
      </apiDesc><apiItemName>TypeError</apiItemName><apiOperationClassifier>TypeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.VideoDisplay#stop()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:VideoPlayer:autoDisplayFirstFrame:get"><apiName>autoDisplayFirstFrame</apiName><shortdesc conref="spark.components.VideoDisplay#autoDisplayFirstFrame">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoDisplayFirstFrame">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoPlay:get"><apiName>autoPlay</apiName><shortdesc conref="spark.components.VideoDisplay#autoPlay">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoPlay">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:autoRewind:get"><apiName>autoRewind</apiName><shortdesc conref="spark.components.VideoDisplay#autoRewind">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#autoRewind">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.components.VideoDisplay#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.components.VideoDisplay#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:currentTime:get"><apiName>currentTime</apiName><shortdesc conref="spark.components.VideoDisplay#currentTime">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#currentTime">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:duration:get"><apiName>duration</apiName><shortdesc conref="spark.components.VideoDisplay#duration">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#duration">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:loop:get"><apiName>loop</apiName><shortdesc conref="spark.components.VideoDisplay#loop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#loop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:mediaPlayerState:get"><apiName>mediaPlayerState</apiName><shortdesc conref="spark.components.VideoDisplay#mediaPlayerState">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>uninitialized
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#mediaPlayerState">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.media.MediaPlayerState.xml"><linktext>org.osmf.media.MediaPlayerState</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoPlayer:muted:get"><apiName>muted</apiName><shortdesc conref="spark.components.VideoDisplay#muted">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#muted">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#pauseWhenHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:playing:get"><apiName>playing</apiName><shortdesc conref="spark.components.VideoDisplay#playing">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.VideoDisplay#playing">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.components.VideoDisplay#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"letterbox"
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.display.ScaleMode.xml"><linktext>org.osmf.display.ScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoPlayer:source:get"><apiName>source</apiName><shortdesc conref="spark.components.VideoDisplay#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sourceChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#source">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:videoObject:get"><apiName>videoObject</apiName><shortdesc conref="spark.components.VideoDisplay#videoObject">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#videoObject">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoPlayer:volume:get"><apiName>volume</apiName><shortdesc conref="spark.components.VideoDisplay#volume">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.VideoDisplay#volume">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
  ButtonBar 控件定义一组具有普通外观和导航的且在逻辑上相关的水平按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="firstButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     定义第一个按钮的外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the first button.</shortdesc></SkinPart><SkinPart name="lastButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     定义最后一个按钮的外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the last button.</shortdesc></SkinPart><SkinPart name="middleButton" owner="spark.components:ButtonBar" playerVersion="Flash10" required="true" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
     定义中间按钮的外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
     A skin part that defines the middle button(s).</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ButtonBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBar
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBar 控件定义一组具有普通外观和导航的且在逻辑上相关的水平按钮。
 
  <p>按钮栏的典型用途是将一组相关按钮组合到一起，提供共同的外观和导航，并在一个位置处理 <codeph>change</codeph> 事件的逻辑。 </p>
 
  <p>ButtonBar 控件可基于其 <codeph>dataProvider</codeph> 属性的值创建 Button 控件。使用诸如 <codeph>addItem()</codeph> 和 <codeph>removeItem()</codeph> 等方法可操纵 <codeph>dataProvider</codeph> 属性以添加和删除数据项目。ButtonBar 控件会根据对 <codeph>dataProvider</codeph> 属性所做的更改自动添加或删除必要的子项。</p>
 
  <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
 
  <p>对于非手机项目，可以使用 ButtonBar 控件设置 ViewStack 容器的活动子代，如下例所示：</p>
 
  <p><b>注意：</b>基于 Spark List 的控件（Spark ListBase 类及其子类，如 ButtonBar、ComboBox、DropDownList、List 和 TabBar）不支持将 BasicLayout 类作为 <codeph>layout</codeph> 属性的值。不要将 BasicLayout 与基于 Spark List 的控件一起使用。</p>
 
  <pre>
  &lt;s:ButtonBar dataProvider="{myViewStack}" requireSelection="true" /> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
  
  <p>ButtonBar 控件具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示所有按钮</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>无限制</entry></row><row><entry>默认外观类</entry><entry>spark.skins.spark.ButtonBarSkin</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="ButtonBarExample.mxml"><swfblock conref="examples/ButtonBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components:ButtonBar:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:Label"><apiName>Label</apiName><shortdesc>
  Label 是可以呈示一行或多行统一格式文本的低级 UIComponent。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="text"/><styles><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  垂直对齐或两端对齐。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.verticalAlign。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  顶部边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingRight。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  右侧边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingRight。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  左侧边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingLeft。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  底部边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingBottom。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  控制容器内的文字换行。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:Label" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#Label/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:Label" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#Label/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#Label/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:Label" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#Label/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Label" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:Label" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:Label" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Label" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Label&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Label 
    <strong>Properties</strong>
    fontContext=""
 
    <strong>Styles</strong>
    alignmentBaseline="baseline"
    baselineShift="0"
    cffHinting="0.0"
    color="0x000000"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="embeddedCFF"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="false"
    ligatureLevel="common"
    lineBreak="toFit"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    renderingMode="cff"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="start"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="00"
    typographicCase="default"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Label 是可以呈示一行或多行统一格式文本的低级 UIComponent。要显示的文本由从 TextBase 继承的 <codeph>text</codeph> 属性确定。文本格式由元素的 CSS 样式指定，例如 <codeph>fontFamily</codeph> 和 <codeph>fontSize</codeph>。
 
  <p>在 Flash Player 中，使用 Flash 文本引擎 (FTE) 的 Label 提供高质量的国际印刷效果。因为 Label 运行速度快且占用内存少，所以它特别适合用于显示多个小型非交互式文本的情况，例如，项呈示器和 Button 外观中的标签。</p>
 
  <p>Spark 体系结构提供三个文本“原型”（Label、RichText 和 RichEditableText）作为其“仅在用户需要时支付”基本原理的一部分。Label 运行速度最快且占用内存最少，但其功能有限：无复杂格式、不可滚动、不可选择、不可编辑且无超链接。RichText 和 RichEditableText 基于 Text Layout Framework (TLF) 库，而不是 FTE。RichText 新增了使用复杂格式程示 HTML 等富文本的功能，但仍然完全是非交互式的。RichEditableText 运行速度最慢且占用内存最多，但可以执行所有功能：支持使用虚拟化 TextLine 进行滚动、选择、编辑、超链接，以及从 URL 加载图像。您应该使用能够满足需求的最快速的文本原型。</p>
 
  <p>Spark Label 控件与 MX Label 控件 mx.controls.Label 类似。最重要的区别在于：
  <ul>
    <li>Spark Label 使用 FTE（即播放器的新文本引擎），而 MX Label 使用 TextField 类。</li>
    <li>与 MX Label 相比，Spark Label 可提供更佳的印刷效果，且能更好地支持各国语言。</li>
    <li>Spark Label 可以显示多行，但 MX Label 不可以。</li>
    <li>MX Label 可以显示 HTML 的有限子集，但 Spark Label 只能显示统一格式的文本。</li>
    <li>MX Label 可以设置为可选择的，但 Spark Label 不可以。</li>
  </ul></p>
 
  <p>在 Spark Label 中，将以下三个字符序列识别为显式换行符：CR（<codeph>“\r”</codeph>）、LF（<codeph>“\n”</codeph>）和 CR+LF（<codeph>“\r\n”</codeph>）。</p>
 
  <p>如果没有为 Label 指定任何类型的宽度，则由这些显式换行符确定的最长行确定 Label 的宽度。</p>
 
  <p>如果确实指定了某种类型的宽度，则指定文本将在组件边界的右边缘换行，因为 <codeph>lineBreak</codeph> 样式的默认值为 <codeph>"toFit"</codeph>。如果文本扩展到低于组件底部，则将被剪切。</p>
 
  <p>要禁用此自动换行，请将 <codeph>lineBreak</codeph> 样式设置为 <codeph>"explicit"</codeph>。这样的话，只有 <codeph>text</codeph> 包含显式换行符时才会换行，且将剪切超过右边缘的行尾。</p>
 
  <p>如果文本超出了显示这些文本的空间，Label 可以截断文本。截断文本意味着使用截断指示符（如 "..."）替换超额文本。请参阅继承的属性 <codeph>maxDisplayedLines</codeph> 和 <codeph>isTruncated</codeph>。</p>
 
  <p>可以使用 <codeph>lineHeight</codeph> 样式控制行间距。可以使用 <codeph>textAlign</codeph>、<codeph>textAlignLast</codeph> 和 <codeph>verticalAlign</codeph> 样式水平和垂直对齐元素范围内的文本。可以使用 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> 和 <codeph>paddingBottom</codeph> 样式从元素边缘插入文本。</p>
 
  <p>默认情况下，Label 没有背景，但是可以使用 <codeph>backgroundColor</codeph> 和 <codeph>backgroundAlpha</codeph> 样式绘制一个背景。不支持边框。如果需要边框或更复杂的背景，请在 Label 后面使用单独的图形元素，例如 Rect。</p>
 
  <p>Label 支持显示从左到右 (LTR) 书写的文本（如法语）、从右到左 (RTL) 书写的文本（如阿拉伯语）以及双向书写的文本（如阿拉伯语段落中的法语语句）。如果文本的主要书写方向为从右到左，可以将 <codeph>direction</codeph> 样式设置为<codeph>“rtl”</codeph>。<codeph>textAlign</codeph> 样式默认为<codeph>“start”</codeph>，这样，当 <codeph>direction</codeph> 为<codeph>“ltr”</codeph>时，文本左对齐；当 <codeph>direction</codeph> 为<codeph>“rtl”</codeph>时，文本右对齐。要获得反向对齐，请将 <codeph>textAlign</codeph> 设置为<codeph>“end”</codeph>。</p>
 
  <p>Label 在 Flash 文本引擎中使用 TextBlock 类创建一个或多个 TextLine 对象，以采用由其 CSS 样式确定的格式静态显示其 text 字符串。由于性能原因，其 TextLine 不包含有关各个字型的信息；有关更多信息，请参阅 flash.text.engine.TextLineValidity.STATIC。</p>
 
  <p>Label 控件具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>如果不包含文本，则为 0 个像素宽 × 12 个像素高；如果包含文本，则大小足以显示该文本</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="LabelExample.mxml"><swfblock conref="examples/LabelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="" invalidHref="flash.text.engine.xml#TextLineValidity/STATIC"><linktext>flash.text.engine.TextLineValidity.STATIC</linktext></link></related-links><apiConstructor id="spark.components:Label:Label"><apiName>Label</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
      RichEditableText 为低级的 UIComponent，用于显示、滚动、选择和编辑各种格式的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="chromeColor"/><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:RichEditableText">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="content"/><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
      此组件的整个边界矩形的背景色。如果此样式为 <codeph>undefined</codeph>，则不绘制任何背景。否则，此 RGB 颜色是使用由 <codeph>backgroundAlpha</codeph> 样式确定的 Alpha 级别绘制的。
     
      </description>
<default>undefined
           </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
      由 <codeph>backgroundColor</codeph> 样式定义的颜色的 Alpha 级别。有效值范围是 0.0 到 1.0。
     
      </description>
<default>1.0
           </default>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  组件已启用但没有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  禁用组件时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  组件已启用且有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  列宽（像素数）。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.columnWidth。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnWidth</linktext></link></related-links></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  在列之间留出来的装订空间量（以像素为单位）。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.columnGap。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnGap"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnGap</linktext></link></related-links></style><style inherit="no" name="columnCount" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  文本列数。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.columnCount。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnCount"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnCount</linktext></link></related-links></style><style inherit="yes" name="wordSpacing" owner="spark.components:RichEditableText" playerVersion="Flash10.5" type="Object">
<description>
  指定两端对齐要用的字间距。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.wordSpacing。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  将文本导入到 TextFlow 中时压缩或保留空白。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  确定要旋转此文本的度数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textRotation。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  文本第一行偏离容器左侧的距离。
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textIndent。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textIndent；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  指定与段落关联的制表位。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.tabStops。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  段落开始边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  段落之前要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  段落之后要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  段落结束边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  它控制列表中项目的外观。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStyleType。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  它控制列表项目标记相对于列表项目的位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStylePosition。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  指定当列表相应侧的内边距值为 <codeph>auto</codeph> 时，列表开始边缘的自动缩进。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  指定行距模型，它是行距基准和行距方向的组合。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.leadingModel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  指定容器中第一行的基线位置。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  控制文本在浮点周围的环绕方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.clearFloats。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  控制在将连续文本断开为多行时允许行断开的位置。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  指定线位置的垂直或水平行进。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  垂直对齐或两端对齐。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.verticalAlign。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  顶部边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingRight。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  右侧边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingRight。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  左侧边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingLeft。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  底部边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingBottom。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  控制容器内的文字换行。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#RichEditableText/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:RichEditableText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#RichEditableText/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#RichEditableText/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:RichEditableText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#RichEditableText/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichEditableText" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:RichEditableText" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichEditableText" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[      <p>The <code>&lt;s:RichEditableText&gt;</code> tag inherits all of the tag 
      attributes of its superclass and adds the following tag attributes:</p>
           <pre>
      &lt;s:RichEditableText
        <strong>Properties</strong>
        clipAndEnableScrolling="false|true"
        contentHeight="<i>Calculated default</i>"
        contentWidth="<i>Calculated default</i>"
        displayAsPassword="false"
        editable="true"
        heightInLines="NaN"
        horizontalScrollPosition="0"
        imeMode="null"
        maxChars="0"
        multiline="true"
        restrict="null"
        selectable="true"
        selectionActivePosition="-1"
        selectionAnchorPosition="-1"
        selectionHighlighting="TextSelectionHighlighting.WHEN_FOCUSED"
        text=""
        textFlow="<i>TextFlow</i>"
        typicalText=null
        verticalScrollPosition="0"
        widthInChars="NaN"
      
        <strong>Events</strong>
        change="<i>No default</i>"
        changing="<i>No default</i>"
        enter="<i>No default</i>"
        selectionChange="<i>No default</i>"
      /&gt;
      </pre>
      
      ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:ISystemCursorClient</apiBaseInterface><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseInterface>spark.core:IEditableText</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      RichEditableText 为低级的 UIComponent，用于显示、滚动、选择和编辑各种格式的文本。
           <p>富文本可以包含可单击的超链接以及可嵌入或从 URL 加载的内嵌图形。</p>
           <p>RichEditableText 不包含滚动条，但是可以实现用于以编程方式滚动的 IViewport 接口，这样可以由确实能够提供滚动条的 Scroller 控制。它还支持使用鼠标滚轮垂直滚动。</p>
           <p>它不包括用于更改文本格式的任何用户界面。但是，它提供了可以通过编程方式执行此操作的 API；例如，这些 API 可以创建使所选文本变成粗体的 Bold 按钮。</p>
           <p>该类用于 Spark 版本的 TextInput 和 TextArea 的外观。（TextInput 不显示处理富文本的功能，但 TextArea 可以。）默认情况下，RichEditableText 具有透明背景，但不支持绘制边框。</p>
           <p>RichEditableText 使用 Text Layout Framework (TLF) 库，而该库又基于 Flash Player 10 中的 Flash 文本引擎 (FTE) 新版本。组合后，可以在这些层上使用高质量的国际印刷效果和布局编辑文本。</p>
           <p>Spark 体系结构提供三个文本“原型”- Label、RichText 和 RichEditableText。Label 运行速度最快且占用内存最少，因为它仅使用 FTE，没有 TLF，但其功能有限：无富文本、不可滚动、不可选择、不可编辑。RichText 新增了使用复杂布局显示富文本的功能，但仍然完全是非交互式的。RichEditableText 占用内存最多，但是提供 TLF 可以执行的大部分功能。一般来说，请使用能够满足需求的最快速的文本原型。</p>
           <p>RichEditableText 与用于 MX 组件的 UITextField 类相似。该类不使用 FTE 或 TLF，而是扩展了旧版 TextField 类。</p>
           <p>UITextField 与 RichEditableText 之间最重要的区别在于：
      <ul>
        <li>RichEditableText 可提供更佳的印刷效果和文本布局，且能更好地支持各国语言。</li>
        <li>RichEditableText 包含面向对象模型的富文本，而 UITextField 不包含。</li>
        <li>在显示大量文本时，RichEditableText 性能表现得更好。</li>
        <li>RichEditableText 嵌入字体的方式与 UITextField 不同。嵌入字体时，请有关有关如何使用 <codeph>embedAsCFF</codeph> 属性的文档。</li>
      </ul></p>
           <p>RichEditableText 使用 TLF 面向对象模型的富文本，其中，诸如分段、段落、范围、超链接和图像等文本布局元素在运行时由 ActionScript 对象表示，可以通过编程方式访问和操纵该对象。TLF 中用于表示富文本的中心对象是 TextFlow，因此可以通过将要显示的 RichEditableText 控件的 <codeph>textFlow</codeph> 属性设置为 TextFlow 实例，来指定其富文本。有关如何创建 TextFlow（如通过导入 TLF 标记）的信息，请参阅 <codeph>textFlow</codeph> 属性的描述。如果不需要显示含有多种格式的文本，可使用 <codeph>text</codeph> 属性设置“纯文本”字符串。有关 <codeph>text</codeph> 属性和 <codeph>textFlow</codeph> 属性如何进行交互（例如，可以设置一个属性，然后获取另一个属性）的信息，请参阅这两个属性的描述。</p>
           <p>编译时，可以将 TLF 标记标签放在 RichEditableText 标签内，如下例所示：
      <pre>
      &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichEditableText>
      </pre>
      在此示例中，MXML 编译器设置了 <codeph>content</codeph> 属性，从而导致基于所指定的 FlowElement 自动创建 TextFlow。</p>
           <p>默认文本格式由 CSS 样式确定，例如 <codeph>fontFamily</codeph> 和 <codeph>fontSize</codeph>。TextFlow 中的任何格式信息都会覆盖 CSS 样式确定的默认格式。</p>
           <p>使用 <codeph>lineHeight</codeph> 样式可以控制行间距；使用 <codeph>paragraphSpaceBefore</codeph> 和 <codeph>paragraphSpaceAfter</codeph> 样式可以控制段间距。可以使用 <codeph>textAlign</codeph> 和 <codeph>textAlignLast</codeph> 样式将文本对齐或两端对齐。可以使用 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> 和 <codeph>paddingBottom</codeph> 样式从组件边缘插入文本。</p>
           <p>默认情况下，RichEditableText“自动调整大小”：最初不包含任何文本时非常小，随着文本的输入，其宽度不断增大直到 <codeph>maxWidth</codeph>。按 Enter 键开始新行时其高度增加。</p>
           <p>通过 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 属性，可以采用随字体大小缩放的方式很方便地指定宽度和高度。也可以使用 <codeph>typicalText</codeph> 属性。请注意，如果使用 <codeph>typicalText</codeph>，则 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 将被忽略。还可以指定显式宽度或高度像素值，或者使用宽度和高度百分比值或各种约束（例如 <codeph>left</codeph> 和 <codeph>right</codeph> 或 <codeph>top</codeph> 和 <codeph>bottom</codeph>）。</p>
           <p>当指定某种类型的宽度（无论是显式宽度或百分比宽度、<codeph>maxWidth</codeph> 还是 <codeph>left</codeph> 和 <codeph>right</codeph> 约束）时，文本将在组件的右边缘换行，且当文本超出组件宽度时垂直滚动查看。如果将 <codeph>lineBreak</codeph> 样式设置为 <codeph>explicit</codeph>，则仅在显式换行符处开始新行，例如，在 <codeph>text</codeph> 中使用 CR (<codeph>\r</codeph>)、LF (<codeph>\n</codeph>) 或 CR+LF (<codeph>\r\n</codeph>) 时，或者在 TLF 标记中使用 <codeph>&lt;p></codeph> 和 <codeph>&lt;br/></codeph> 时。在这些情况下，如果任何文本行的宽度超出了控件的范围，则可以水平滚动查看文本。</p>
           <p>可以使用 <codeph>maxChars</codeph> 属性限制用户可以输入的字符数，使用 <codeph>restrict</codeph> 限制用户可以输入的字符。</p>
           <p><codeph>multiline</codeph> 属性确定了按 Enter 键后发生的操作。如果为 <codeph>true</codeph>，则按 Enter 键会开始一个新段落。如果为 <codeph>false</codeph>，则导致分派 <codeph>FlexEvent.ENTER</codeph> 事件。</p>
           <p>如果不希望文本可编辑，请将 <codeph>editable</codeph> 属性设置为 <codeph>false</codeph>。如果甚至不希望文本可以进行选择，请将 <codeph>selectable</codeph> 属性设置为 <codeph>false</codeph>。</p>
           <p>因为 RichEditableText 使用 TLF，所以它支持显示从左到右 (LTR) 书写的文本（如法语）、从右到左 (RTL) 书写的文本（如阿拉伯语）以及双向书写的文本（如阿拉伯语语句中的法语语句）。如果文本的主要书写方向为从右到左，请将 <codeph>direction</codeph> 样式设置为 <codeph>rtl</codeph>。<codeph>textAlign</codeph> 样式默认为 <codeph>"start"</codeph>，这样，当 <codeph>direction</codeph> 为 <codeph>ltr</codeph> 时，文本左对齐；当 <codeph>direction</codeph> 为 <codeph>rtl</codeph> 时，文本右对齐。要获得反向对齐，请将 <codeph>textAlign</codeph> 设置为 <codeph>end</codeph>。</p>
           <p>使用 TLF 后，RichEditableText 支持在一个编辑会话内执行无限次撤消/重做操作。编辑会话在组件获得键盘焦点时启动，在组件失去焦点时结束。</p>
           <p>RichEditableText 使用 TLF 的 TextContainerManager 类处理其文本显示、滚动、选择、编辑和上下文菜单。</p>
           <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
           </apiDesc><example conref="RichEditableTextExample.mxml"><swfblock conref="examples/RichEditableTextExample.swf"/></example><example conref="externalTextFlow.xml"/></apiClassifierDetail><related-links><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="spark.components.xml#RichText"><linktext>spark.components.RichText</linktext></link><link href="spark.utils.xml#TextFlowUtil"><linktext>spark.utils.TextFlowUtil</linktext></link><link href="" invalidHref="flashx.textLayout.container.TextContainerManager.xml"><linktext>flashx.textLayout.container.TextContainerManager</linktext></link></related-links><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
      如果 multiline 属性为 false，当用户按 Enter 键时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      如果 <codeph>multiline</codeph> 属性为 false，当用户按 Enter 键时分派。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
      在用户编辑操作完成后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      在用户编辑操作完成后分派。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
      在用户编辑操作发生前分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      在用户编辑操作发生前分派。可以更改该操作，或取消该事件以防止该操作被处理。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RichEditableText_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
      在 selectionAnchorPosition 和/或 selectionActivePosition 属性因任意原因而更改后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      出于任何原因在 <codeph>selectionAnchorPosition</codeph> 和/或 <codeph>selectionActivePosition</codeph> 属性已更改后分派。
           </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RichEditableText:RichEditableText"><apiName>RichEditableText</apiName><shortdesc>
          构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          构造函数。 
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:RichEditableText:appendText"><apiName>appendText</apiName><shortdesc>
          将指定文本追加到 RichEditableText 的结尾，就好像您已在该结尾处单击并键入它一样。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>要追加的文本。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          将指定文本追加到 RichEditableText 的结尾，就好像您已在该结尾处单击并键入它一样。
                   <p>随后会在新文本之后设置插入点。如有必要，文本将滚动，以确保插入点可见。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getFormatOfRange"><apiName>getFormatOfRange</apiName><shortdesc>
          返回 TextLayoutFormat 对象，用于为指定范围的字符指定计算格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextLayoutFormat 对象。
          
          </apiDesc><apiType value="flashx.textLayout.formats:TextLayoutFormat"/></apiReturn><apiParam><apiItemName>requestedFormats</apiItemName><apiType value="Vector$String"/><apiData>null</apiData><apiDesc>String 的 Vector（用于指定所请求格式的名称），或 <codeph>null</codeph>（用于请求所有格式）。
                   </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>一个字符位置，用于指定所选内容的固定末尾。
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>一个字符位置，用于指定所选内容的可移动末尾。
                   </apiDesc></apiParam></apiOperationDef><apiDesc>
          返回 TextLayoutFormat 对象，用于为指定范围的字符指定计算格式。
                   <p>如果格式在整个范围上设置不一致，则其值将为 <codeph>undefined</codeph>。</p>
                   <p>可以为包含所需格式名称的 String 指定 Vector；如果不指定，将计算所有格式。</p>
          
          <p>如果不指定范围，则将使用选定范围。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc>
          
      返回要添加到视域的当前 horizontalScrollPosition 的数量，以按请求的滚动单位进行滚动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>要添加到 <codeph>horizontalScrollPosition</codeph> 的像素数目。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>要滚动的数量。该值必须是以下 spark.core.NavigationUnit 常量之一： 
      <ul>
       <li><codeph>LEFT</codeph></li>
       <li><codeph>RIGHT</codeph></li>
       <li><codeph>PAGE_LEFT</codeph></li>
       <li><codeph>PAGE_RIGHT</codeph></li>
       <li><codeph>HOME</codeph></li>
       <li><codeph>END</codeph></li>
      </ul>
      要按单列滚动，请使用 <codeph>LEFT</codeph> 或 <codeph>RIGHT</codeph>。要滚动到第一列或最后一列，请使用 <codeph>HOME</codeph> 或 <codeph>END</codeph>。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      返回要添加到视域的当前 <codeph>horizontalScrollPosition</codeph> 的数量，以按请求的滚动单位进行滚动。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc>
          
      返回要添加到视域的当前 verticalScrollPosition 的数量，以按请求的滚动单位进行滚动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>要添加到 <codeph>verticalScrollPosition</codeph> 的像素数目。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>要滚动的数量。该单元值必须是以下 spark.core.NavigationUnit 常量之一： 
      <ul>
       <li><codeph>UP</codeph></li>
       <li><codeph>DOWN</codeph></li>
       <li><codeph>PAGE_UP</codeph></li>
       <li><codeph>PAGE_DOWN</codeph></li>
       <li><codeph>HOME</codeph></li>
       <li><codeph>END</codeph></li>
      </ul>
      要按单行滚动，请使用 <codeph>UP</codeph> 或 <codeph>DOWN</codeph>。要滚动到第一行或最后一行，请使用 <codeph>HOME</codeph> 或 <codeph>END</codeph>。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
          
      返回要添加到视域的当前 <codeph>verticalScrollPosition</codeph> 的数量，以按请求的滚动单位进行滚动。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:insertText"><apiName>insertText</apiName><shortdesc>
          将指定的文本插入到 RichEditableText，就好像您已键入它一样。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>要插入的文本。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          将指定的文本插入到 RichEditableText，就好像您已键入它一样。
                   <p>如果选择范围，新文本将替换所选文本。如果有插入点，将在该点插入新文本。</p>
                   <p>随后会在新文本之后设置插入点。如有必要，文本将滚动，以确保插入点可见。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:scrollToRange"><apiName>scrollToRange</apiName><shortdesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flashx.textLayout.container.ContainerController#scrollToRange()">
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectAll"><apiName>selectAll</apiName><shortdesc>
          选择所有文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          选择所有文本。这不包括最终的段落终止符。
          
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:selectRange"><apiName>selectRange</apiName><shortdesc>
          选择指定范围的字符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiDesc>字符位置，用于指定扩展选区时保持固定的选区的未端。
                   </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiDesc>字符位置，用于指定扩展选区时移动的选区的未端。
          
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          选择指定范围的字符。
                   <p>如果任一位置为负，则它将取消选择该文本范围。</p>
                   </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:setFormatOfRange"><apiName>setFormatOfRange</apiName><shortdesc>
          将指定的格式应用于指定范围中的每个元素，以与所给定的格式相对应。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flashx.textLayout.formats:TextLayoutFormat"/><apiDesc>要应用到选区的 TextLayoutFormat。
         
          </apiDesc></apiParam><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>相对于 text 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区保持固定的终点。
         
          </apiDesc></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>相对于 text 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区的终点。 
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          将指定的格式应用于指定范围中的每个元素，以与所给定的格式相对应。将字符格式应用于指定范围中的文本（如果指定的范围为单个点，则不进行任何更改）。将段落格式应用于至少部分在该范围内的任何段落（如果范围为单个点，则应用于单个段落）。将容器格式应用于容器。
         
          <p>支持的格式是 TextLayoutFormat 中的那些格式。不应用 <codeph>undefined</codeph> 值。如果不指定范围，则将使用选定范围。</p>
                   <p>下面的示例设置所选项目的 <codeph>fontSize</codeph> 和 <codeph>color</codeph>：
          <pre>
          var textLayoutFormat:TextLayoutFormat = new TextLayoutFormat();
          textLayoutFormat.fontSize = 12;
          textLayoutFormat.color = 0xFF0000;
          myRET.setFormatOfRange(textLayoutFormat);
          </pre>
          </p>
          
          <p>如果您使用 <codeph>getFormatOfRange()</codeph> 的结果来指定 <codeph>format</codeph>，请注意，<codeph>TextLayoutFormat</codeph> 中的每个格式都具有一个计算值，该计算值将应用于与给定格式相对应的每个元素。</p>
         
          <p>如果您希望指定一个要应用于所有文本的格式，最好对组件本身使用 <codeph>setStyle(format, value)</codeph>。</p>
         
          <p>下面的示例设置所有文本的 <codeph>fontSize</codeph> 和 <codeph>color</codeph>：
          <pre>
          myRET.setStyle("fontSize", 12);
          myRET.setStyle("color", 0xFF0000);
          </pre>
          </p>
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:RichEditableText:styleChanged"><apiName>styleChanged</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:RichEditableText:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:RichEditableText:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
          
          </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
          文本高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          文本高度。
                   <p>由于 Text Layout Framework 将 TextLine 虚拟化以获得更佳性能，因此如果组件无法显示所有文本，则此初始高度将为估计值。如果滚动到文本末尾，所有 TextLine 将合成，且 <codeph>contentHeight</codeph> 是准确的。</p>
                   <p>要在内容中垂直滚动，请在 0 和 <codeph>contentHeight - height</codeph> 之间更改 <codeph>verticalScrollPosition</codeph>。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
          文本的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          文本的宽度。
                   <p>由于 Text Layout Framework 将 TextLine 虚拟化以获得更佳性能，因此如果组件无法显示所有文本，则此初始宽度将为估计值。如果滚动到文本末尾，所有 TextLine 将合成，且 <codeph>contentWidth</codeph> 是准确的。</p>
                   <p>要在文本中水平滚动，请在 0 和 <codeph>contentWidth - width</codeph> 之间更改 <codeph>horizontalScrollPosition</codeph>。</p>  
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:content:get"><apiName>content</apiName><shortdesc>
          该属性旨在编译时用于 MXML；在运行时获得或设置富文本内容并改用 textFlow 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
          该属性旨在编译时用于 MXML；要在运行时获得或设置富文本内容，请改用 <codeph>textFlow</codeph> 属性。
                   <p><codeph>content</codeph> 属性是 RichEditableText 的默认属性，因此可以编写 MXML 成如下形式
          <pre>
          &lt;s:RichEditableText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichEditableText>
          </pre>
          且可以将指定为内容的 String 和 SpanElement 用于创建 TextFlow。</p>
                   <p>该属性的类型为 Object，因为可以将其设置为 String、FlowElement 或 String 和 FlowElement 的 Array。在上述示例中，所指定的内容是二元数组，其中，第一个元素是字符串“Hello”，第二个元素是含有粗体文本“World”的 SpanElement。</p>
         
          <p>无论指定内容的方式为何，内容都会转换为 TextFlow，且当获得该属性时，即获得生成的 TextFlow。</p>
         
          <p>Adobe 建议运行时使用 <codeph>textFlow</codeph> 属性获得或设置富文本内容，因为它是 TextFlow（而不是 Object）的强类型。在 Text Layout Framework 中，TextFlow 是富文本内容的规范表示。</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:editable:get"><apiName>editable</apiName><shortdesc>
          指示用户是否可以编辑此控件中的文本的标志。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
                   </apiDefaultValue></apiValueDef><apiDesc>
          指示用户是否可以编辑此控件中的文本的标志。
                   <p>如果为 <codeph>true</codeph>，当鼠标光标位于该控件的边界上时将变为 Ｉ 形。如果为 <codeph>false</codeph>，鼠标光标将保持为箭头。</p>
                   <p>如果该属性为 <codeph>true</codeph>，则 <codeph>selectable</codeph> 属性将被忽略。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:enableIME:get"><apiName>enableIME</apiName><shortdesc>
          一个标志，用于指示当组件获得焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><returns>true if the component is editable and it is not displaying a password.
         
          </returns></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          一个标志，用于指示当组件获得焦点时是否应启用 IME。
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:heightInLines:get"><apiName>heightInLines</apiName><shortdesc>
          控件的默认高度（以行为单位测量）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
                   </apiDefaultValue></apiValueDef><apiDesc>
          控件的默认高度（以行为单位测量）。
                   <p>控件的格式样式（例如 <codeph>fontSize</codeph> 和 <codeph>lineHeight</codeph>）用于计算行高像素值。</p>
                   <p>例如，如果需要 RichEditableText 的高度足够显示 5 行文本，则将该属性设置为 5。</p>
                   <p>如果该属性为 <codeph>NaN</codeph>（默认值），则组件的默认高度由要显示的文本确定。</p>
          
          <p>如果指定显式高度、百分比高度或 <codeph>top</codeph> 和 <codeph>bottom</codeph> 约束，该属性将被忽略。</p>
                   <p>如果已指定 <codeph>typicalText</codeph> 属性，则该属性也将被忽略。</p>
         
          <p>RichEditableText 的 <codeph>measure()</codeph> 方法使用 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 来确定 <codeph>measuredWidth</codeph> 和 <codeph>measuredHeight</codeph>。这些与 HTML TextArea 的 <codeph>cols</codeph> 和 <codeph>rows</codeph> 相似。</p>
                   <p>由于 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 默认为 <codeph>NaN</codeph>，因此默认情况下 RichTextEditable“自动调整大小”：不包含任何文本启动时非常小，随着文本的输入，其宽度不断增大直到 maxWidth，按 Enter 键开始新行时其高度增加。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/widthInChars"><linktext>spark.components.RichEditableText.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
          文本水平滚动的像素数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          文本水平滚动的像素数。
                   <p>要在文本中水平滚动，请在 0 和 <codeph>contentWidth - width</codeph> 之间更改 <codeph>horizontalScrollPosition</codeph>。</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:imeMode:get"><apiName>imeMode</apiName><shortdesc>
          指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
         
          </apiDefaultValue></apiValueDef><apiDesc>
          指定 IME（输入法编辑器）模式。IME 使用户能够用中文、日文和韩文输入文本。当控件获得焦点时，Flex 设置指定的 IME 模式；当该控件失去焦点时，则将其设置回为先前的值。
                   <p>flash.system.IMEConversionMode 类定义此属性的有效值的常量。您还可以指定 <codeph>null</codeph> 不指定任何 IME 模式。</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:multiline:get"><apiName>multiline</apiName><shortdesc>
          确定用户是否可以输入多行文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          确定用户是否可以输入多行文本。
                   <p>如果为 <codeph>true</codeph>，则 Enter 键会开始一个新段落。如果为 <codeph>false</codeph>，则 Enter 键不会影响该文本但会使 RichEditableText 分派 <codeph>"enter"</codeph> 事件。如果将文本粘贴到 multiline 值为 <codeph>false</codeph> 的 RichEditableText 中，则将从文本中去除新行。 </p>  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
          </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
          
          </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectable:get"><apiName>selectable</apiName><shortdesc>
          一个标志，指示是用鼠标选择内容，还是用键盘选择内容（当控件具有键盘焦点时）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
          
          </apiDefaultValue></apiValueDef><apiDesc>
          一个标志，指示是用鼠标选择内容，还是用键盘选择内容（当控件具有键盘焦点时）。
                   <p>允许选择文本将使您能够从控件中复制文本。</p>
                   <p>如果 <codeph>editable</codeph> 属性为 <codeph>true</codeph>，则该属性被忽略。</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
          相对于 text 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区的终点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
                   </apiDefaultValue></apiValueDef><apiDesc>
          相对于 <codeph>text</codeph> 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区的终点。
                   <p>活动位置可以是选区的起点或终点。</p>
                   <p>例如，如果拖动选择位置 12 到位置 8 之间的区域，则 <codeph>selectionAnchorPosition</codeph> 将为 12，<codeph>selectionActivePosition</codeph> 将为 8，按向左箭头后 <codeph>selectionActivePosition</codeph> 将变为 7。</p>
                   <p>值为 -1 时，表示“未设置”。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
          相对于 text 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区保持固定的终点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
                   </apiDefaultValue></apiValueDef><apiDesc>
          相对于 <codeph>text</codeph> 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区保持固定的终点。
                   <p>锚点位置可以是选区的起点或终点。</p>
                   <p>例如，如果拖动选择位置 12 到位置 8 之间的区域，则 <codeph>selectionAnchorPosition</codeph> 将为 12，<codeph>selectionActivePosition</codeph> 将为 8，按向左箭头后 <codeph>selectionActivePosition</codeph> 将变为 7。</p>
                   <p>值为 -1 时，表示“未设置”。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
          确定何时加亮选择的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
          
          </apiDefaultValue></apiValueDef><apiDesc>
          确定何时加亮选择的文本。
          
          <p>所允许的值由 spark.components.TextSelectionHighlighting 类指定。可能的值有 <codeph>TextSelectionHighlighting.WHEN_FOCUSED</codeph>、<codeph>TextSelectionHighlighting.WHEN_ACTIVE</codeph> 和 <codeph>TextSelectionHighlighting.ALWAYS</codeph>。</p>
                   <p><codeph>WHEN_FOCUSE</codeph> 只有在组件具有键盘焦点时才显示选择的文本。</p>
          
          <p><codeph>WHEN_ACTIVE</codeph> 在组件的窗口为活动窗口时显示选择的文本（即使组件没有获得键盘焦点，也会如此）。</p>
                   <p><codeph>ALWAYS</codeph> 显示选择的文本，即使组件没有获得键盘焦点或组件窗口不是活动窗口也会如此。</p>
          
          </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#TextSelectionHighlighting"><linktext>spark.components.TextSelectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:showSystemCursor:get"><apiName>showSystemCursor</apiName><shortdesc>
          如果鼠标滑过组件时应始终显示系统光标，则此属性为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          如果鼠标滑过组件时应始终显示系统光标，则此属性为 true。如果为 false，将显示自定义光标。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
          用于表示该组件显示的富文本的 TextFlow。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
          用于表示该组件显示的富文本的 TextFlow。
         
          <p>TextFlow 是 Text Layout Framework (TLF) 中最重要的类。它是表示富文本内容的 FlowElement 的树的根。</p>
                   <p>通常情况下，使用 <codeph>TextFlowUtil.importFromString()</codeph> 和 <codeph>TextFlowUtil.importFromXML()</codeph> 方法基于 TLF 标记创建 TextFlow。或者，还可以使用 TLF 的 TextConverter 类（可以导入 HTML 的子集），或者对 TextFlow 使用诸如 <codeph>addChild()</codeph> 等方法构建 TextFlow。</p>
                   <p>设置该属性会影响 <codeph>text</codeph> 属性，反之亦然。</p>
                   <p>如果设置 <codeph>textFlow</codeph> 并获得 <codeph>text</codeph>，则各段落中的文本将由单个 LF（“\n”）分隔。</p>
                   <p>如果将 <codeph>text</codeph> 设置为 String（例如<codeph>“Hello World”</codeph>），并获得 <codeph>textFlow</codeph>，则它将是包含单个 ParagraphElement 和单个 SpanElement 的 TextFlow。</p>
                   <p>如果文本包含显式换行符 - CR（“\r”）、LF（“\n”）或 CR+LF（“\r\n”）- 则内容将设置为包含多个段落且各段落之间含一个间距的 TextFlow。</p>
                   <p>设置该属性也会影响用于指定控件的滚动位置和所选文本的属性。它将 <codeph>horizontalScrollPosition</codeph> 和 <codeph>verticalScrollPosition</codeph> 重置为 0，且将 <codeph>selectionAnchorPosition</codeph> 和 <codeph>selectionActivePosition</codeph> 设置为 -1，以清除选择。</p>
                   <p>要将 TextFlow 对象变成 TLF 标记，请使用 <codeph>TextFlowUtil.export()</codeph> 标记。</p>
                   <p>单个 TextFlow 无法由 RichEditableText 的多个实例共享。要在第二个实例中显示相同的文本，必须使用以下方法再创建一个 TextFlow：使用 <codeph>TextFlowUtil.export()</codeph> 和 <codeph>TextFlowUtil.importFromXML()</codeph> 方法，或对 TextFlow 使用 <codeph>deepCopy()</codeph> 方法。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:text:get"><apiName>text</apiName><shortdesc>
          此组件所显示的 text 字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
                   </apiDefaultValue></apiValueDef><apiDesc>
          此组件所显示的 text 字符串。
                   <p>设置该属性会影响 <codeph>textFlow</codeph> 属性，反之亦然。</p>
                   <p>如果将 <codeph>text</codeph> 设置为 String（例如<codeph>“Hello World”</codeph>），并获得 <codeph>textFlow</codeph>，则它将是包含单个 ParagraphElement 和单个 SpanElement 的 TextFlow。</p>
                   <p>如果将 <codeph>text</codeph> 设置为 null，它将设置为默认值，即空字符串。</p>
         
          <p>如果文本包含显式换行符 - CR（“\r”）、LF（“\n”）或 CR+LF（“\r\n”）- 则内容将设置为包含多个段落且各段落之间含一个间距的 TextFlow。</p>
                   <p>如果设置 <codeph>textFlow</codeph> 并获得 <codeph>text</codeph>，则各段落中的文本将由单个 LF（“\n”）分隔。</p>
                   <p>设置该属性也会影响用于指定控件的滚动位置和所选文本的属性。它将 <codeph>horizontalScrollPosition</codeph> 和 <codeph>verticalScrollPosition</codeph> 重置为 0。从 Flex 4.6 开始，<codeph>selectionAnchorPosition</codeph> 和 <codeph>selectionActivePosition</codeph> 被保留。在此之前，<codeph>selectionAnchorPosition</codeph> 和 <codeph>selectionActivePosition</codeph> 被设置为 -1 以清除选择。</p>
                   </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/textFlow"><linktext>spark.components.RichEditableText.textFlow</linktext></link><link href="spark.components.xml#RichEditableText/horizontalScrollPosition"><linktext>spark.components.RichEditableText.horizontalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/verticalScrollPosition"><linktext>spark.components.RichEditableText.verticalScrollPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:typicalText:get"><apiName>typicalText</apiName><shortdesc>
          用于不实际显示即可确定控件的默认宽度和高度的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
                   </apiDefaultValue></apiValueDef><apiDesc>
          用于不实际显示即可确定控件的默认宽度和高度的文本。
                   <p>如果指定显性宽度、百分比宽度或 <codeph>left</codeph> 和 <codeph>right</codeph> 约束，该属性将被忽略。</p>
                   <p>使用此属性将导致 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 属性被忽略。 </p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link><link href="" invalidHref="spark.primitives.widthInChars.xml"><linktext>spark.primitives.widthInChars</linktext></link></related-links></apiValue><apiValue id="spark.components:RichEditableText:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
          文本垂直滚动的像素数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
          
          </apiDefaultValue></apiValueDef><apiDesc>
          文本垂直滚动的像素数。
                   <p>要在内容中垂直滚动，请在 0 和 <codeph>contentHeight - height</codeph> 之间更改 <codeph>verticalScrollPosition</codeph>。</p>
                   </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichEditableText:widthInChars:get"><apiName>widthInChars</apiName><shortdesc>
          控件的默认宽度（使用 em 单位测量）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
                   </apiDefaultValue></apiValueDef><apiDesc>
          控件的默认宽度（使用 em 单位测量）。
                   <p>em 是一种印刷测量单位，相当于一个点大小。em 并非必须完全精确等于字母“M”的宽度，但是在很多字体中，“M”大约为一个 em 宽。使用控件的 <codeph>fontSize</codeph> 样式计算 em 单位的像素值。</p>
                   <p>例如，如果需要 RichEditableText 的宽度足够显示约 20 个文本字符，则将该属性设置为 20。</p>
                   <p>如果该属性为 <codeph>NaN</codeph>（默认值），则组件的默认宽度由要显示的文本确定。</p>
                   <p>如果指定显性宽度、百分比宽度或 <codeph>left</codeph> 和 <codeph>right</codeph> 约束，该属性将被忽略。</p>
                   <p>如果已指定 <codeph>typicalText</codeph> 属性，则该属性也将被忽略。</p>
         
          <p>RichEditableText 的 <codeph>measure()</codeph> 方法使用 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 来确定 <codeph>measuredWidth</codeph> 和 <codeph>measuredHeight</codeph>。这些与 HTML TextArea 的 <codeph>cols</codeph> 和 <codeph>rows</codeph> 相似。</p>
                   <p>由于 <codeph>widthInChars</codeph> 和 <codeph>heightInLines</codeph> 默认为 <codeph>NaN</codeph>，因此默认情况下 RichTextEditable“自动调整大小”：不包含任何文本启动时非常小，随着文本的输入，其宽度不断增大直到 maxWidth，按 Enter 键开始新行时其高度增加。</p>
                   </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.primitives.heightInLines.xml"><linktext>spark.primitives.heightInLines</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
  TitleWindow 类将 Panel 扩展为包含一个关闭按钮和移动区域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:TitleWindow">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="inactiveWithControlBar" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  控件栏可见的不活动视图状态。
   </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="inactive" owner="spark.components:TitleWindow" playerVersion="Flash10">
<description>
  当 TitleWindow 或其所有子代不处于焦点时它所用的不活动视图状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="closeButton" owner="spark.components:TitleWindow" required="false" var_type="spark.components:Button">
<description>
      定义关闭图标（TitleWindow 标题栏右上角的小 x）外观的外观部件。单击关闭图标时，该图标将分派 <codeph>close</codeph> 事件。
           <p>Flex 不会自动关闭窗口。要支持关闭图标，您必须为 <codeph>close</codeph> 事件创建一个处理函数，然后通过该事件处理函数关闭 TitleWindow。</p>
           <p>为该外观部件禁用焦点。</p>
     </description>
	<shortdesc>
      The skin part that defines the appearance of the 
      close icon (a small x in the upper-right corner of the TitleWindow title bar).</shortdesc></SkinPart><SkinPart name="moveArea" owner="spark.components:TitleWindow" required="false" var_type="flash.display:InteractiveObject">
<description>
      用户必须单击并拖动才可移动窗口的区域。默认情况下，移动区域是 TitleWindow 容器的标题栏。
           <p>要拖动 TitleWindow 容器，请在窗口的标题栏区域中单击并按住鼠标指针，然后移动鼠标。创建自定义外观类以更改移动区域。</p>
     </description>
	<shortdesc>
      The area where the user must click and drag to move the window.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:TitleWindow&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:TitleWindow&gt;
    <strong>Events</strong>
    close="<i>No default</i>"
    windowMove="<i>No default</i>"
    windowMoveEnd="<i>No default</i>"
    windowMoveStart="<i>No default</i>"
    windowMoving="<i>No default</i>"
  &lt;/s:TitleWindow&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  TitleWindow 类将 Panel 扩展为包含一个关闭按钮和移动区域。
 
  <p>TitleWindow 设计为一个弹出窗口。请勿在 MXML 中将 TitleWindow 创建为应用程序的一部分，而是，通常根据 TitleWindow 类创建自定义 MXML 组件，然后使用 <codeph>PopUpManager.createPopUp()</codeph> 方法弹出该组件，使用 <codeph>PopUpManager.removePopUp()</codeph> 方法删除该组件。</p>
  
  <p>TitleWindow 容器具有以下默认大小特征：</p>
     <adobetable class="innertable">
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>高度足以容纳以下内容：内容区域中使用默认或明确指定的高度时的所有子项、标题栏和边框、各子项间的垂直间隔，以及容器的顶部和底部填充。宽度大于以下各项之和：最宽子项的默认或明确指定的宽度，以及容器的左右边界填充或标题文本的宽度。</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.TitleWindowSkin</entry>
        </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="SimpleTitleWindowExample.mxml"/><example conref="TitleWindowApp.mxml"><swfblock conref="examples/TitleWindowApp.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Panel"><linktext>spark.components.Panel</linktext></link><link href="spark.skins.spark.xml#TitleWindowSkin"><linktext>spark.skins.spark.TitleWindowSkin</linktext></link><link href="spark.skins.spark.xml#TitleWindowCloseButtonSkin"><linktext>spark.skins.spark.TitleWindowCloseButtonSkin</linktext></link><link href="" invalidHref="mx.managers.PopUpManager.xml"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END_windowMoveEnd"><apiName>windowMoveEnd</apiName><shortdesc>
  用户在拖动后释放鼠标按键时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_END</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  用户在拖动后释放鼠标按键时分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_windowMove"><apiName>windowMove</apiName><shortdesc>
  用户成功拖动窗口后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  用户成功拖动窗口后分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVING_windowMoving"><apiName>windowMoving</apiName><shortdesc>
  用户拖动窗口时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVING</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  用户拖动窗口时分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START_windowMoveStart"><apiName>windowMoveStart</apiName><shortdesc>
  用户在移动区域中按住鼠标按键，然后开始拖动窗口时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TitleWindowBoundsEvent.WINDOW_MOVE_START</apiEventType><adobeApiEventClassifier>spark.events.TitleWindowBoundsEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  用户在移动区域中按住鼠标按键，然后开始拖动窗口时分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:TitleWindow_mx.events.CloseEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  当用户选择关闭按钮时，分派此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CloseEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.CloseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户选择关闭按钮时，分派此方法。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:TitleWindow:TitleWindow"><apiName>TitleWindow</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:TabBar"><apiName>TabBar</apiName><shortdesc>
  TabBar 类显示一组相同的选项卡。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:TabBar">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:TabBar" playerVersion="Flash10" theme="spark" type="Number">
<description>
  为默认 TabBarButton 外观定义 TabBar 按钮的左上角和右上角的半径。
   </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:TabBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:TabBar
    <b>Styles</b>
    cornerRadius="4"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ButtonBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TabBar 类显示一组相同的选项卡。一次可以选择一个选项卡，且默认情况下选择第一个选项卡。TabBarSkin 类将这些选项卡排列在一行中。使用 TabBar <codeph>cornerRadius</codeph> 样式可以配置选项卡的角半径。
 
  <p>该组选项卡由 <codeph>dataProvider</codeph> 属性定义。TabBar 的外观由 TabBarSkin 类定义。每个选项卡的外观由 TabBarButtonSkin 类定义。</p>
   <p>可以使用 TabBar 控件设置 ViewStack 容器的活动子代，如下例所示：</p>
   <p><b>注意：</b>基于 Spark List 的控件（Spark ListBase 类及其子类，如 ButtonBar、ComboBox、DropDownList、List 和 TabBar）不支持将 BasicLayout 类作为 <codeph>layout</codeph> 属性的值。不要将 BasicLayout 与基于 Spark List 的控件一起使用。</p>
  
  <pre>
  &lt;s:TabBar dataProvider="{myViewStack}"/> 
  
  &lt;mx:ViewStack id="myViewStack" 
      borderStyle="solid"> 
  
      &lt;s:NavigatorContent id="search" label="Search"> 
          &lt;s:Label text="Search Screen"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="custInfo" label="Customer Info"> 
          &lt;s:Label text="Customer Info"/> 
          &lt;/s:NavigatorContent> 
  
      &lt;s:NavigatorContent id="accountInfo" label="Account Info"> 
          &lt;s:Label text="Account Info"/> 
          &lt;/s:NavigatorContent> 
      &lt;/mx:ViewStack> </pre>
   <p>TabBar 容器具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示选项卡</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="TabBarExample.mxml"><swfblock conref="examples/TabBarExample.swf"/></example></apiClassifierDetail><related-links><link href="" invalidHref="mx.containers.ViewStack.xml"><linktext>mx.containers.ViewStack</linktext></link><link href="spark.skins.spark.xml#TabBarSkin"><linktext>spark.skins.spark.TabBarSkin</linktext></link><link href="spark.skins.spark.xml#TabBarButtonSkin"><linktext>spark.skins.spark.TabBarButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:TabBar:TabBar"><apiName>TabBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:RadioButton"><apiName>RadioButton</apiName><shortdesc>
  RadioButton 组件使用户可在一组互相排斥的选择中做出一种选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="icon"/><Exclude kind="style" name="cornerRadius"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:RadioButton" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components:RadioButton" playerVersion="Flash10" theme="mobile" type="String">
<description>
  与标签相关的图标的方向。有效的 MXML 值是 <codeph>right</codeph>、<codeph>left</codeph>、<codeph>bottom</codeph> 和 <codeph>top</codeph>。
 
  <p>在 ActionScript 中，您可以使用下列常量来设置此属性：<codeph>IconPlacement.RIGHT</codeph>、<codeph>IconPlacement.LEFT</codeph>、<codeph>IconPlacement.BOTTOM</codeph> 和 <codeph>IconPlacement.TOP</codeph>。</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButton&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButton
    <strong>Properties</strong>
    enabled=""
    group="<i>the automatically created default RadioButtonGroup</i>"
    groupName="radioGroup"
    value="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerGroup</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:ToggleButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  RadioButton 组件使用户可在一组互相排斥的选择中做出一种选择。RadioButtonGroup 包含具有相同 <codeph>groupName</codeph> 属性的两个或更多 RadioButton 组件。当可以选择在 RadioButtonGroup 中组合 RadioButton 实例时，组使您能够执行诸如在一组 RadioButton 上（而不是在每个单独的 RadioButton 上）设置单一事件处理函数等事项。
 
  <p>RadioButton 组可以引用 <codeph>&lt;s:RadioButtonGroup></codeph> 标签创建的组。用户一次只能选择此组中的一个成员。选择未选中的组成员将取消选择该组中当前所选的 RadioButton 组件。</p>
 
  <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
 
  <p>RadioButton 组件具有以下默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以显示组件的文本标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>18 个像素宽 × 18 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.RadioButtonSkin</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="RadioButtonExample.mxml"><swfblock conref="examples/RadioButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButtonGroup"><linktext>spark.components.RadioButtonGroup</linktext></link><link href="spark.skins.spark.xml#RadioButtonSkin"><linktext>spark.skins.spark.RadioButtonSkin</linktext></link></related-links><apiConstructor id="spark.components:RadioButton:RadioButton"><apiName>RadioButton</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RadioButton:enabled:get"><apiName>enabled</apiName><shortdesc>
      如果 RadioButtonGroup 启用，则 RadioButton 组件启用，且 RadioButton 本身也启用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果 RadioButtonGroup 启用，则 RadioButton 组件启用，且 RadioButton 本身也启用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButton:groupName:get"><apiName>groupName</apiName><shortdesc>
      指定此 RadioButton 组件所属的组的名称，或者，如果此 RadioButton 是 RadioButtonGroup 组件定义的组的一部分，则指定 RadioButtonGroup 组件的 ID 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"radioGroup"
      </apiDefaultValue></apiValueDef><apiDesc>
      指定此 RadioButton 组件所属的组的名称，或者，如果此 RadioButton 是 RadioButtonGroup 组件定义的组的一部分，则指定 RadioButtonGroup 组件的 <codeph>ID</codeph> 属性值。具有相同 <codeph>groupName</codeph> 属性的所有单选按钮都将位于同一个选项卡组。
     
      <p>创建要放入 RadioButtonGroup 中的单选按钮时，建议对所有按钮使用 <codeph>group</codeph> 属性或者 <codeph>groupName</codeph> 属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/group"><linktext>group</linktext></link><link href="" invalidHref="mx.manager.xml#IFocusManagerGroup/groupName"><linktext>mx.manager.IFocusManagerGroup.groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:group:get"><apiName>group</apiName><shortdesc>
      此 RadioButton 所属的 RadioButtonGroup 组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButtonGroup</apiValueClassifier><apiDefaultValue>the automatically created default RadioButtonGroup
      </apiDefaultValue></apiValueDef><apiDesc>
      此 RadioButton 所属的 RadioButtonGroup 组件。创建要放入 RadioButtonGroup 中的 RadioButton 时，应该对所有按钮使用 <codeph>group</codeph> 属性或者 <codeph>groupName</codeph> 属性。
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RadioButton/groupName"><linktext>groupName</linktext></link></related-links></apiValue><apiValue id="spark.components:RadioButton:value:get"><apiName>value</apiName><shortdesc>
      与 RadioButton 组件关联的可选用户定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      与 RadioButton 组件关联的可选用户定义值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
  ButtonBarButton 类定义 ButtonBar 控件所用的自定义项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:ToggleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBarButton 类定义 ButtonBar 控件所用的自定义项呈示器。此项呈示器是在 ButtonBarSkin 类（ButtonBar 的默认外观）中使用的。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><adobeApiEvent id="spark.components:ButtonBarButton_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:ButtonBarButton:ButtonBarButton"><apiName>ButtonBarButton</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ButtonBarButton:allowDeselection:get"><apiName>allowDeselection</apiName><shortdesc>
      如果为 true，用户单击当前选定的按钮时即会将其取消选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，用户单击当前选定的按钮时即会将其取消选择。如果为 <codeph>false</codeph>，用户必须选择不同的按钮才可取消选择当前选定的按钮。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:data:get"><apiName>data</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:ButtonBarButton:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      项呈示器的主机组件的数据提供程序中的项目索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      项呈示器的主机组件的数据提供程序中的项目索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:label:get"><apiName>label</apiName><shortdesc>
      
      要在项呈示器中显示的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      要在项呈示器中显示的 String。 
     
      <p>项呈示器的主机组件可以使用 <codeph>itemToLabel()</codeph> 方法将数据项目转换为 String 以便项呈示器可以将其显示。 </p>
     
      <p>对于诸如 List 和 ButtonBar 等控件，可以使用 <codeph>labelField</codeph> 或 <codeph>labelFunction</codeph> 属性指定包含 String 的数据项目的字段。否则，主机组件使用 <codeph>toString()</codeph> 方法将数据项目转换为 String。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ButtonBarButton:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      如果项呈示器可以将其自身显示为已获取焦点，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      如果项呈示器可以将其自身显示为已获取焦点，则包含 <codeph>true</codeph>。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Panel"><apiName>Panel</apiName><shortdesc>
  Panel 类定义一个容器，该容器为其子代提供标题栏、题注、边框和内容区域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:Panel">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><skinStates><SkinState name="disabledWithControlBar" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Panel 的 ControlBar 的禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalWithControlBar" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Panel 的 ControlBar 的正常状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Panel 的禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components:Panel" playerVersion="Flash10">
<description>
  Panel 的正常状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  控制此组件的投影的可见性。
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的角的半径。
   </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  控制此组件的边框的可见性。
   </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="uint">
<description>
  此组件的边框的颜色。
   </description>
<default>0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:Panel" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的边框的 Alpha。
   </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="controlBarGroup" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      定义容器控件栏区域外观的外观部件。默认情况下，PanelSkin 类定义以灰色背景显示在 Panel 容器内容区域底部的控件栏区域。 
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      control bar area of the container.</shortdesc><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart><SkinPart name="titleDisplay" owner="spark.components:Panel" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      定义容器中标题文本的外观的外观部件。
           </description>

<playerversion>AIR 1.5
      </playerversion>

	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The skin part that defines the appearance of the 
      title text in the container.</shortdesc><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[ 
  <p>The <code>&lt;s:Panel&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;s:Panel
   <strong>Properties</strong>
    controlBarContent="null"
    controlBarLayout="HorizontalLayout"
    controlBarVisible="true"
    title=""
 
   <strong>Styles</strong>
    borderAlpha="0.5"
    borderColor="0"
    borderVisible="true"
    cornerRadius="0"
    dropShadowVisible="true"
   &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/s:Panel&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Panel 类定义一个容器，该容器为其子代提供标题栏、题注、边框和内容区域。
   <p>Panel 容器具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示其子代</entry></row><row><entry>最小大小</entry><entry>131 个像素宽 × 127 个像素高</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row></tbody></tgroup></adobetable>
   </apiDesc><example conref="PanelExample.mxml"><swfblock conref="examples/PanelExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links><apiConstructor id="spark.components:Panel:Panel"><apiName>Panel</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Panel:controlBarContent:get"><apiName>controlBarContent</apiName><shortdesc>
      包含在 Panel 容器控件栏区域中的组件集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      包含在 Panel 容器控件栏区域中的组件集。Panel 容器控件栏区域的位置和外观由 spark.skins.spark.PanelSkin 类确定。默认情况下，PanelSkin 类定义以灰色背景显示在 Panel 容器内容区域底部的控件栏区域。创建自定义外观以更改控件栏的默认外观。
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#PanelSkin"><linktext>spark.skins.spark.PanelSkin</linktext></link></related-links></apiValue><apiValue id="spark.components:Panel:controlBarLayout:get"><apiName>controlBarLayout</apiName><shortdesc>
      定义容器控件栏区域的布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>HorizontalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc>
      定义容器控件栏区域的布局。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:controlBarVisible:get"><apiName>controlBarVisible</apiName><shortdesc>
      如果为 true，则控件栏可见。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则控件栏可见。如果未设置 <codeph>controlBarContent</codeph> 属性的值，则该标志无效。
           <p><b>注意：</b>Panel 容器不会监视 <codeph>controlBarGroup</codeph> 属性。如果有其它代码使其不可见，则 Panel 容器可能不会正常更新。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Panel:title:get"><apiName>title</apiName><shortdesc>
      标题栏中显示的标题。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      标题栏中显示的标题。 
           </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HGroup"><apiName>HGroup</apiName><shortdesc>
  HGroup 容器是使用 HorizontalLayout 类的 Group 容器的一个实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:HGroup
    <strong>Properties</strong>
    columnWidth="no default"
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount="-1"
    requestedMaxColumnCount="-1"
    requestedMinColumnCount="-1"
    variableColumnWidth"true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  HGroup 容器是使用 HorizontalLayout 类的 Group 容器的一个实例。不要修改 <codeph>layout</codeph> 属性。请改用 HGroup 类的属性来修改 HorizontalLayout 类的特征。
 
  <p>HGroup 容器具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示其子代</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HGroupExample.mxml"><swfblock conref="examples/HGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#HorizontalLayout"><linktext>spark.layouts.HorizontalLayout</linktext></link></related-links><apiConstructor id="spark.components:HGroup:HGroup"><apiName>HGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。将 <codeph>layout</codeph> 属性初始化为 HorizontalLayout 类的一个实例。
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="spark.layout.HorizontalLayout.xml"><linktext>spark.layout.HorizontalLayout</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:HGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#columnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#firstIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.HorizontalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#lastIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedMaxColumnCount:get"><apiName>requestedMaxColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedMaxColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedMaxColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc conref="spark.layouts.HorizontalLayout#requestedMinColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#requestedMinColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:variableColumnWidth:get"><apiName>variableColumnWidth</apiName><shortdesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#variableColumnWidth">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:HGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.HorizontalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:IItemRendererOwner"><apiName>IItemRendererOwner</apiName><shortdesc>
  IItemRendererOwner 接口定义基本 API 集，类必须实现这些 API 集才能支持项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IItemRendererOwner 接口定义基本 API 集，类必须实现这些 API 集才能支持项呈示器。实现 IItemRendererOwner 接口的类称为项呈示器的主机组件。
  
  <p>定义项呈示器的类必须实现 IItemRenderer 接口。</p> 
  
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#IItemRenderer"><linktext>spark.components.IItemRenderer</linktext></link></related-links><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      返回可在项呈示器中显示的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>可在项呈示器中显示的 String。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要显示的数据项。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回可在项呈示器中显示的 String。将 String 写入到项呈示器的 <codeph>labelText</codeph> 属性。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:IItemRendererOwner:spark.components:IItemRendererOwner:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      更新呈示器以重用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>项呈示器。
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>数据提供程序中的数据索引.
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>此项呈示器正在表示的数据对象.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      更新呈示器以重用。此方法首先会准备项呈示器以重用，方法是清除任何旧属性，同时使用新属性进行更新。
     
      <p>最后，此方法应对项呈示器设置 <codeph>data</codeph> 属性。</p>    
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components:FormItem"><apiName>FormItem</apiName><shortdesc>
  FormItem 容器在 Spark From 中定义以下内容：单个标签。序列标签。一个或多个子控件或子容器。提供介绍表单项及其填写说明的帮助内容。指示表单项是否需要填写的指示符。子项可以是控件，也可以是其它容器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style inherit="no" name="errorIndicatorSource" owner="spark.components:FormItem" playerVersion="Flash10" type="Object">
<description>
  指定要用于错误指示符的图像源。默认值为“assets/ErrorIndicator.png”。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="requiredIndicatorSource" owner="spark.components:FormItem" playerVersion="Flash10" type="Object">
<description>
  指定要用于所需指示符的图像源。默认值为“assets/RequiredIndicator.png”。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="mxmlContentFactory"/><skinParts><SkinPart name="labelDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
       对显示此 FormItem 的标签的可视元素的引用。
     </description>
	<shortdesc>
       A reference to the visual element that displays this FormItem's label.</shortdesc></SkinPart><SkinPart name="sequenceLabelDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
      对显示 FormItem 的 sequenceLabel 的可视元素的引用。
     </description>
	<shortdesc>
      A reference to the visual element that displays the FormItem's sequenceLabel.</shortdesc></SkinPart><SkinPart name="helpContentGroup" owner="spark.components:FormItem" required="false" var_type="spark.components:Group">
<description>
      对包含 FormItem 的 helpContentGroup 的 Group 的引用。
     </description>
	<shortdesc>
      A reference to the Group that contains the FormItem's helpContentGroup.</shortdesc></SkinPart><SkinPart name="errorTextDisplay" owner="spark.components:FormItem" required="false" var_type="spark.core:IDisplayText">
<description>
      对显示 FormItem 的错误字符串的可视元素的引用。
     </description>
	<shortdesc>
      A reference to the visual element that display the FormItem's error strings.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:FormItem&gt;</code> tag inherits all the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:FormItem
    <strong>Properties</strong>
    helpContent="null"
    label=""
    required="false"
    sequenceLabel=""
  
    <strong>Common Styles</strong>
    errorIndicatorSource="assets/ErrorIndicator.png"
    requiredIndicatorSource="assets/RequiredIndicator.png"
 
    <strong>Mobile Styles</strong>
    leading="2"
    letterSpacing="0"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  FormItem 容器在 Spark From 中定义以下内容：
 
  <ul>
    <li>单个标签。</li>
    <li>序列标签。</li>
    <li>一个或多个子控件或子容器。</li>
    <li>提供介绍表单项及其填写说明的帮助内容。</li>
    <li>指示表单项是否需要填写的指示符</li>
  </ul>
 
  子容器可以是控件，也可以是其他容器。一个 Form 容器可以容纳多个 FormItem 容器。默认情况下，FormItem 元素按水平布局排列，标签放置在左侧，帮助内容显示在右侧。
 
  </apiDesc><example conref="FormItemExample.mxml"><swfblock conref="examples/FormItemExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link><link href="spark.skins.spark.xml#FormItemSkin"><linktext>spark.skins.spark.FormItemSkin</linktext></link></related-links><apiConstructor id="spark.components:FormItem:FormItem"><apiName>FormItem</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:FormItem:protected:updateErrorTextDisplay"><apiName>updateErrorTextDisplay</apiName><shortdesc>
      将 elementErrorStrings 转换为 String，并将该 String 指定给 errorTextDisplay 外观部件进行显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      将 <codeph>elementErrorStrings</codeph> 转换为 String，并将该 String 指定给 <codeph>errorTextDisplay</codeph> 外观部件进行显示。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:FormItem:elementErrorStrings:get"><apiName>elementErrorStrings</apiName><shortdesc>
      每个矢量项都包含来自内容元素的错误字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$String"/></apiValueDef><apiDesc>
      每个矢量项都包含来自内容元素的错误字符串。如果内容元素都有效，则矢量为空。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:helpContent:get"><apiName>helpContent</apiName><shortdesc> 
      要包含在 FormItem 的帮助内容区域中的组件集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="helpContentChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      要包含在 FormItem 的帮助内容区域中的组件集。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:label:get"><apiName>label</apiName><shortdesc>
      FormItem 文本标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      FormItem 文本标签。例如，用于输入地址的 FormItem 可能具有“Address”标签。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:required:get"><apiName>required</apiName><shortdesc>
      如果为 true，则将 FormItem 外观置于 required 状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="requiredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则将 FormItem 外观置于 <codeph>required</codeph> 状态。默认情况下，该状态将显示一个指示符以指示 FormItem 子项要求用户进行输入。如果为 <codeph>false</codeph>，则不会显示指示符。
     
      <p>此属性仅控制外观的状态。如果您需要输入验证，必须将验证程序指定给子项。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:FormItem:sequenceLabel:get"><apiName>sequenceLabel</apiName><shortdesc>
      表单中表单项的数目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sequenceLabelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      表单中表单项的数目。 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
  SkinnableContainer 类是具有可视内容的可设置外观容器的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContentFactory"/><styles><style inherit="yes" name="textShadowAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="mobile" type="Number">
<description>
  文本阴影的 Alpha。
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textShadowColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="mobile" type="uint">
<description>
  文本阴影的颜色。
 
  </description>
<default>#FFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  组件内容背景的 Alpha。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  组件的背景色。
  
  </description>
<default>0xFFFFFF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  此组件的背景的 Alpha 水平。有效值范围是 0.0 到 1.0。 
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:accentColor">
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  组件已启用但没有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  禁用组件时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  组件已启用且有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:SkinnableContainer" playerVersion="Flash10.5" type="Object">
<description>
  指定两端对齐要用的字间距。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.wordSpacing。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  将文本导入到 TextFlow 中时压缩或保留空白。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  确定要旋转此文本的度数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textRotation。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  文本第一行偏离容器左侧的距离。
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textIndent。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textIndent；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  指定与段落关联的制表位。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.tabStops。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  段落开始边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  段落之前要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  段落之后要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  段落结束边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  它控制列表中项目的外观。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStyleType。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  它控制列表项目标记相对于列表项目的位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStylePosition。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  指定当列表相应侧的内边距值为 <codeph>auto</codeph> 时，列表开始边缘的自动缩进。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  指定行距模型，它是行距基准和行距方向的组合。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.leadingModel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  指定容器中第一行的基线位置。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  控制文本在浮点周围的环绕方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.clearFloats。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  控制在将连续文本断开为多行时允许行断开的位置。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  指定线位置的垂直或水平行进。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#SkinnableContainer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#SkinnableContainer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#SkinnableContainer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:SkinnableContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#SkinnableContainer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableContainer" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="contentGroup" owner="spark.components:SkinnableContainer" playerVersion="Flash10" required="false" var_type="spark.components:Group">
<description>
      定义 Group（内容子代将被推入到其中并进行布置）的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines the Group where the content 
      children get pushed into and laid out.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableContainer
    <strong>Properties</strong>
    autoLayout="true"
    creationPolicy="auto"
    layout="BasicLayout"
  
    <strong>Styles</strong>
    accentColor="0x0099FF"
    alignmentBaseline="useDominantBaseline"
    alternatingItemColors=""
    backgroundAlpha="1.0"
    backgroundColor="0xFFFFFF"
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    clearFloats="none"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    downColor=""
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    inactiveTextSelectionColor="0xE8E8E8"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
   
    <strong>Events</strong>
    elementAdd="<i>No default</i>"
    elementRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnableContainer 类是具有可视内容的可设置外观容器的基类。SkinnableContainer 容器将实现 IVisualElement 接口的任何组件视为子项。所有 Spark 和 Halo 组件都实现 IVisualElement 接口，就像 GraphicElement 类一样。这意味着该容器可以将图形类（如 Rect 和 Ellipse）作为子项使用。
 
  <p>为了改进性能和最小化应用程序大小，可以使用 Group 容器。不能设置 Group 容器的外观。</p>
 
  <p>SkinnableContainer 容器具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示其子代</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SkinnableContainerExample.mxml"><swfblock conref="examples/SkinnableContainerExample.swf"/></example><example conref="MyBorderSkin.mxml"/></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>Group</linktext></link><link href="spark.skins.spark.xml#SkinnableContainerSkin"><linktext>spark.skins.spark.SkinnableContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_REMOVE_elementRemove"><apiName>elementRemove</apiName><shortdesc>
  从内容容器中删除可视元素时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  从内容容器中删除可视元素时分派。<codeph>event.element</codeph> 是正在删除的可视元素。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_spark.events.ElementExistenceEvent.ELEMENT_ADD_elementAdd"><apiName>elementAdd</apiName><shortdesc>
  将可视元素添加到内容容器时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ElementExistenceEvent.ELEMENT_ADD</apiEventType><adobeApiEventClassifier>spark.events.ElementExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  将可视元素添加到内容容器时分派。<codeph>event.element</codeph> 是已添加的可视元素。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableContainer_mx.events.FlexEvent.CONTENT_CREATION_COMPLETE_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  已创建此组件的内容后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CONTENT_CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  已创建此组件的内容后分派。借助实例化延迟，可以在创建组件之后很长时间创建组件的内容。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableContainer:SkinnableContainer"><apiName>SkinnableContainer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:addElement"><apiName>addElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      如果 creationPolicy 属性不等于 none，则创建内容子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      如果 <codeph>creationPolicy</codeph> 属性不等于 <codeph>none</codeph>，则创建内容子项。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      为此组件创建内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      为此组件创建内容。<codeph>creationPolicy</codeph> 属性为 <codeph>auto</codeph> 或 <codeph>all</codeph> 时，Flex 框架将自动调用此函数。<codeph>creationPolicy</codeph> 为 <codeph>none</codeph> 时，将调用此方法以初始化内容。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      
      添加外观部件时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>部件的名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>部件实例。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      添加外观部件时调用。您无需直接调用此方法。对于静态部件，Flex 会在调用 <codeph>attachSkin()</codeph> 方法时自动调用此方法。对于动态部件，Flex 会在调用 <codeph>createDynamicPartInstance()</codeph> 方法时自动调用此方法。 
     
      <p>覆盖此函数以将行为附加到该部件。如果希望覆盖从某个基类继承的外观部件上的行为，请不要调用 <codeph>super.partAdded()</codeph> 方法。否则，应始终调用 <codeph>super.partAdded()</codeph> 方法。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      
      正删除外观部件的实例时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>部件的名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>部件实例。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      正删除外观部件的实例时调用。您无需直接调用此方法。对于静态部件，Flex 会在调用 <codeph>detachSkin()</codeph> 方法时自动调用此方法。对于动态部件，Flex 会在调用 <codeph>removeDynamicPartInstance()</codeph> 方法时自动调用此方法。 
     
      <p>覆盖此函数以从该部件删除行为。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiOperation id="spark.components:SkinnableContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.components:SkinnableContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>auto
      
      </apiDefaultValue></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SkinnableContainer:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      如果延迟的内容已创建，则包含 True。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果延迟的内容已创建，则包含 <codeph>True</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>BasicLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContentFactory:set"><apiName>mxmlContentFactory</apiName><shortdesc>
      为 content 属性创建初始值的 factory 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IDeferredInstance"/></apiValueDef><apiDesc>
      为 <codeph>content</codeph> 属性创建初始值的 factory 对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableContainer:mxmlContent:set"><apiName>mxmlContent</apiName><shortdesc conref="spark.components.Group#mxmlContent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Array"/></apiValueDef><apiDesc conref="spark.components.Group#mxmlContent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RichText"><apiName>RichText</apiName><shortdesc>
  RichText 是可以显示一行或多行富文本或嵌入图像的低级 UIComponent。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:RichText">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="content"/><styles><style inherit="no" name="columnWidth" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  列宽（像素数）。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.columnWidth。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnWidth</linktext></link></related-links></style><style format="Length" inherit="no" name="columnGap" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  在列之间留出来的装订空间量（以像素为单位）。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.columnGap。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnGap"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnGap</linktext></link></related-links></style><style inherit="no" name="columnCount" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  文本列数。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.columnCount。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/columnCount"><linktext>flashx.textLayout.formats.ITextLayoutFormat.columnCount</linktext></link></related-links></style><style inherit="yes" name="wordSpacing" owner="spark.components:RichText" playerVersion="Flash10.5" type="Object">
<description>
  指定两端对齐要用的字间距。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.wordSpacing。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  将文本导入到 TextFlow 中时压缩或保留空白。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  确定要旋转此文本的度数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textRotation。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  文本第一行偏离容器左侧的距离。
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textIndent。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textIndent；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  指定与段落关联的制表位。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.tabStops。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  段落开始边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  段落之前要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  段落之后要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  段落结束边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  它控制列表中项目的外观。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStyleType。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  它控制列表项目标记相对于列表项目的位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStylePosition。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  指定当列表相应侧的内边距值为 <codeph>auto</codeph> 时，列表开始边缘的自动缩进。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  指定行距模型，它是行距基准和行距方向的组合。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.leadingModel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  指定容器中第一行的基线位置。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  控制文本在浮点周围的环绕方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.clearFloats。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  控制在将连续文本断开为多行时允许行断开的位置。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  指定线位置的垂直或水平行进。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  垂直对齐或两端对齐。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.verticalAlign。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  顶部边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingRight。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  右侧边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingRight。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  左侧边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingLeft。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  底部边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingBottom。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  控制容器内的文字换行。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:RichText" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#RichText/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:RichText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#RichText/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#RichText/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:RichText" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#RichText/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:RichText" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:RichText" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:RichText" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:RichText" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RichText&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RichText
    <strong>Properties</strong>
    fontContext="<i>IFlexModuleFactory</i>"
    luminosityClip="false"
    luminosityInvert="false"
    maskType="MaskType.CLIP"
    textFlow="<i>TextFlow</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TextBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  RichText 是可以显示一行或多行富文本或嵌入图像的低级 UIComponent。
 
  <p>由于性能原因，它不支持滚动、选择、编辑、可单击的超链接或从 URL 加载的图像。如果需要这些功能，请参阅 RichEditableText 类。</p>
 
  <p>RichText 使用 Text Layout Framework (TLF) 库，而该库又基于 Flash Player 10 中的 Flash 文本引擎 (FTE)。组合后，它们可以提供使用高质量国际印刷效果的富文本布局。</p>
 
  <p>Spark 体系结构提供三个文本“原型”- Label、RichText 和 RichEditableText。Label 运行速度最快且占用内存最少，因为它仅使用 FTE，没有 TLF，但其功能有限：无富文本、不可滚动、不可选择、不可编辑。RichText 新增了使用复杂布局显示富文本的功能，但仍然完全是非交互式的。RichEditableText 占用内存最多，但是提供 TLF 可以执行的大部分功能。您应该使用能够满足需求且占用最小内存的文本原型。</p>
 
  <p>RichText 与 MX 控件 mx.controls.Text 相似。Text 控件使用旧版 TextField 类（而不是 TLF）来显示文本。</p>
 
  <p>RichText 和 Text 之间最重要的区别是：
  <ul>
    <li>与 Text 相比，RichText 可提供更佳的印刷效果和文本布局，且能更好地支持各国语言。</li>
    <li>RichText 拥有所显示内容的面向对象模型版本，而 Text 没有。</li>
    <li>Text 是可选择的，但 RichText 不支持选择操作。</li>
  </ul></p>
 
  <p>RichText 使用 TLF 面向对象模型的富文本，其中，诸如分段、段落、跨距和图像等文本布局元素在运行时由 ActionScript 对象表示，可以通过编程方式访问和操纵该对象。TLF 中用于表示富文本的中心对象是 TextFlow，因此可以通过将 RichText 的 <codeph>textFlow</codeph> 属性设置为 TextFlow 实例，来指定应显示的相应 RichText。（有关如何创建 TextFlow 的信息，请参阅 <codeph>textFlow</codeph> 属性的描述。）还可以设置从 TextBase 继承的 <codeph>text</codeph> 属性，但是如果不需要 TextFlow 的各种格式，应考虑改用 Label。</p>
 
  <p>编译时，可以将 TLF 标记标签放在 RichText 标签内，如下例所示：
  <pre>
  &lt;s:RichText>Hello &lt;s:span fontWeight="bold">World!&lt;/s:span>&lt;/s:RichText>
  </pre>
  在此示例中，MXML 编译器设置了 <codeph>content</codeph> 属性，从而导致基于所指定的 FlowElement 自动创建 TextFlow。</p>
 
  <p>默认文本格式由 CSS 样式确定，例如 <codeph>fontFamily</codeph> 和 <codeph>fontSize</codeph>。TextFlow 中的任何格式信息都会覆盖 CSS 样式确定的默认格式。</p>
 
  <p>使用 <codeph>lineHeight</codeph> 样式可以控制行间距；使用 <codeph>paragraphSpaceBefore</codeph> 和 <codeph>paragraphSpaceAfter</codeph> 样式可以控制段间距。可以使用 <codeph>textAlign</codeph> 和 <codeph>textAlignLast</codeph> 样式将文本对齐或两端对齐。可以使用 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> 和 <codeph>paddingBottom</codeph> 样式从组件边缘插入文本。</p>
 
  <p>如果没有为 RichText 指定任何类型的宽度，则由这些显式换行符确定的最长行确定 Label 的宽度。</p>
 
  <p>当指定宽度时，文本将在组件的右边缘换行，且当文本超出了组件宽度时文本将会被剪切。如果将 <codeph>lineBreak</codeph> 样式设置为 <codeph>explicit</codeph>，则仅在显式换行符处开始新行，例如，在 <codeph>text</codeph> 中使用 CR (<codeph>\r</codeph>)、LF (<codeph>\n</codeph>) 或 CR+LF (<codeph>\r\n</codeph>) 时，或者在 TLF 标记中使用 <codeph>&lt;p></codeph> 和 <codeph>&lt;br/></codeph> 时。在这种情况下，将剪切比控件宽的行。</p>
 
  <p>如果文本超出了显示这些文本的空间，RichText 可以截断文本。截断文本意味着使用截断指示符（如 "..."）替换超额文本。请参阅继承的属性 <codeph>maxDisplayedLines</codeph> 和 <codeph>isTruncated</codeph>。</p>
 
  <p>默认情况下，RichText 没有背景，但是可以使用 <codeph>backgroundColor</codeph> 和 <codeph>backgroundAlpha</codeph> 样式绘制一个背景。不支持边框。如果需要边框或更复杂的背景，请在 RichText 后面使用单独的图形元素，例如 Rect。</p>
 
  <p>因为 RichText 使用 TLF，所以它支持显示从左到右 (LTR) 书写的文本（如法语）、从右到左 (RTL) 书写的文本（如阿拉伯语）以及双向书写的文本（如阿拉伯语语句中的法语语句）。如果文本的主要书写方向为从右到左，请将 <codeph>direction</codeph> 样式设置为 <codeph>rtl</codeph>。<codeph>textAlign</codeph> 样式默认为 <codeph>"start"</codeph>，这样，当 <codeph>direction</codeph> 为 <codeph>ltr</codeph> 时，文本左对齐；当 <codeph>direction</codeph> 为 <codeph>rtl</codeph> 时，文本右对齐。要获得反向对齐，请将 <codeph>textAlign</codeph> 设置为 <codeph>end</codeph>。</p>
 
  <p>RichText 使用 TLF 的 StringTextFlowFactory 类和 TextFlowTextLineFactory 类创建一个或多个 TextLine 对象，以静态显示其文本。由于性能原因，其 TextLine 不包含有关各个字型的信息；有关更多信息，请参阅 TextLineValidity 类。</p>
 
  <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
  
  </apiDesc><example conref="RichTextExample.mxml"><swfblock conref="examples/RichTextExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#Label"><linktext>spark.components.Label</linktext></link><link href="" invalidHref="flash.text.engine.TextLineValidity.xml"><linktext>flash.text.engine.TextLineValidity</linktext></link></related-links><apiConstructor id="spark.components:RichText:RichText"><apiName>RichText</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:RichText:content:get"><apiName>content</apiName><shortdesc>
      该属性旨在编译时用于 MXML；在运行时获得或设置富文本内容并改用 textFlow 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      该属性旨在编译时用于 MXML；要在运行时获得或设置富文本内容，请改用 <codeph>textFlow</codeph> 属性。
     
      <p><codeph>content</codeph> 属性是 RichText 的默认属性，因此可以编写 MXML 成如下形式
      <pre>
      &lt;s:RichText>Hello &lt;s:span fontWeight="bold"/>World&lt;/s:span>&lt;/s:RichText>
      </pre>
      且可以将指定为内容的 String 和 SpanElement 用于创建 TextFlow。</p>
     
      <p>该属性的类型为 Object，因为可以将其设置为 String、FlowElement 或 String 和 FlowElement 的 Array。在上述示例中，所指定的内容是二元数组，其中，第一个元素是字符串“Hello”，第二个元素是含有粗体文本“World”的 SpanElement。</p>
     
      <p>无论指定内容的方式为何，内容都会转换为 TextFlow，且当获得该属性时，即获得生成的 TextFlow。</p>
     
      <p>Adobe 建议运行时使用 <codeph>textFlow</codeph> 属性获得或设置富文本内容，因为它是 TextFlow（而不是 Object）的强类型。在 Text Layout Framework 中，TextFlow 是富文本内容的规范表示。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RichText:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      控制发光度遮罩是否剪辑设置了遮罩的内容的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      控制发光度遮罩是否剪辑设置了遮罩的内容的属性。只有图形元素应用了类型为 <codeph>MaskType.LUMINOSITY</codeph> 的遮罩，此属性才会起作用。  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichText/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      控制计算由发光度遮罩设置遮罩的图形元素的 RGB 颜色值的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      控制计算由发光度遮罩设置遮罩的图形元素的 RGB 颜色值的属性。如果为 true，则遮罩中的相应区域将反转并乘以源内容中像素的 RGB 颜色值。如果为 false，则直接使用源内容中像素的 RGB 颜色值。 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichText/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:maskType:get"><apiName>maskType</apiName><shortdesc>
      maskType 定义将遮罩应用到组件的方式。可能的值为 MaskType.CLIP、MaskType.ALPHA 和 MaskType.LUMINOSITY。剪辑遮罩 - 遮罩处于剪辑模式下时，会将剪辑遮罩减少至 1 位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>maskType 定义将遮罩应用到组件的方式。</p> 
     
      <p>可能的值为 <codeph>MaskType.CLIP</codeph>、<codeph>MaskType.ALPHA</codeph> 和 <codeph>MaskType.LUMINOSITY</codeph>。</p>  
     
      <p><b>剪辑遮罩</b></p>
     
      <p>遮罩处于剪辑模式下时，会将剪辑遮罩减少至 1 位。这意味着遮罩将不会影响源内容中像素的不透明度；它要么保留值不进行修改（如果遮罩中的相应像素具有非零 Alpha 值），要么使其完全透明（如果遮罩像素值为零 Alpha 值）。</p>
     
      <p>使用剪辑遮罩时，仅遮罩定义的实际路径与形状矢量和填充用于确定源内容上的效果。会忽略遮罩上定义的笔触和位图滤镜。会将遮罩中任何填充的区域认为已填充，并呈示源内容。填充的类型和参数不相关；遮罩中的纯色填充、渐变填充或位图填充将全部呈示基础源内容，而与遮罩填充的 Alpha 值无关。</p>
      
      <p>在剪辑遮罩中使用时，BitmapGraphics 被视为位图填充的矩形。结果，当遮罩的一部分（位图）按与相等尺寸的纯色填充矩形相同的方式影响遮罩时，源位图的 Alpha 通道不相关。</p>
     
      <p><b>Alpha 遮罩</b></p>
     
      <p>在 Alpha 模式下，会将源内容中的每个像素的不透明度与遮罩的相应区域的不透明度相乘。即，对于由不透明度为 0.5 的区域遮罩的、源内容中不透明度为 1 的像素，其结果不透明度将为 0.5。对于由不透明度为 0.5 的区域遮罩的、不透明度为 0.8 的源像素，其结果不透明度为 0.4。</p>
     
      <p>从概念上讲，Alpha 遮罩等效于将转换的遮罩和源内容呈示到单独的 RGBA 表面中，并将遮罩内容的 Alpha 通道与源内容的 Alpha 通道相乘。在合成到源内容的表面中之前，会将所有遮罩内容呈示到其表面中。结果，所有 FXG 功能（如笔触、位图滤镜和填充不透明度）将影响最终合成的内容。</p>
     
      <p>处于 Alpha 模式下时，会将任何位图数据的 Alpha 通道正常合成到遮罩 Alpha 通道中，并将影响最终呈示的内容。对于 BitmapGraphics 和位图填充的形状与路径，这保持 true。</p>
     
      <p><b>发光度遮罩</b></p>
     
      <p>发光度遮罩有时称为“柔化遮罩”，除以下方面外其作用极其类似于 Alpha 遮罩：源内容中像素的不透明度和 RGB 颜色值与遮罩中相应区域的不透明度和 RGB 颜色值相乘。</p>
     
      <p>从概念上讲，发光度遮罩等效于将转换的遮罩和源内容呈示到单独的 RGBA 表面中，并将遮罩内容的 Alpha 通道和 RGB 颜色值与源内容的 Alpha 通道和 RGB 颜色值相乘。在合成到源内容的表面中之前，会将所有遮罩内容呈示到其表面中。结果，所有 FXG 功能（如笔触、位图滤镜和填充不透明度）将影响最终合成的内容。</p>
     
      <p>发光度遮罩不是 Flash 的特有功能，但在诸如 Adobe Illustrator 和 Adobe Photoshop 等 Adobe Creative Suite 工具中通用。为了实现 Flash 呈示内容中发光度遮罩的视觉效果，指定发光度遮罩的图形元素实际上会实例化模仿发光度遮罩在 Adobe Creative Suite 工具中呈示时其可视外观的着色器滤镜。</p>
     
      <p>由发光度遮罩设置遮罩的对象可以设置用于控制遮罩 RGB 颜色值和剪辑的属性。请参阅 luminosityInvert 和 luminosityClip 属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components:RichText:textFlow:get"><apiName>textFlow</apiName><shortdesc>
      用于表示该组件显示的富文本的 TextFlow。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flashx.textLayout.elements:TextFlow"/></apiValueDef><apiDesc>
      用于表示该组件显示的富文本的 TextFlow。
     
      <p>TextFlow 是 Text Layout Framework (TLF) 中最重要的类。它是表示富文本内容的 FlowElement 的树的根。</p>
     
      <p>通常情况下，使用 <codeph>TextFlowUtil.importFromString()</codeph> 和 <codeph>TextFlowUtil.importFromXML()</codeph> 方法基于 TLF 标记创建 TextFlow。或者，还可以使用 TLF 的 TextConverter 类（可以导入 HTML 的子集），或者对 TextFlow 使用诸如 <codeph>addChild()</codeph> 等方法构建 TextFlow。</p>
     
      <p>设置该属性会影响 <codeph>text</codeph> 属性，反之亦然。</p>
     
      <p>如果设置 <codeph>textFlow</codeph> 并获得 <codeph>text</codeph>，则各段落中的文本将由单个 LF (<codeph>\n</codeph>) 分隔。</p>
     
      <p>如果将 <codeph>text</codeph> 设置为 String（例如<codeph>“Hello World”</codeph>），并获得 <codeph>textFlow</codeph>，则它将是包含单个 ParagraphElement 和单个 SpanElement 的 TextFlow。</p>
     
      <p>如果文本包含显式换行符 - CR (<codeph>\r</codeph>)、LF (<codeph>\n</codeph>) 或 CR+LF (<codeph>\r\n</codeph>) - 则内容将设置为包含多个段落且各段落之间含一个间距的 TextFlow。</p>
     
      <p>要将 TextFlow 对象转换为 TLF 标记，请使用从 <codeph>TextFlowUtil.export()</codeph> 方法返回的标记。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.utils.xml#TextFlowUtil/importFromString()"><linktext>spark.utils.TextFlowUtil.importFromString()</linktext></link><link href="spark.utils.xml#TextFlowUtil/importFromXML()"><linktext>spark.utils.TextFlowUtil.importFromXML()</linktext></link><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
  SkinnableDataContainer 类是数据项目的容器基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="focusThickness" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  焦点矩形轮廓的粗细（以像素为单位）。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  组件为焦点时焦点外框的颜色。
 
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  此组件的焦点外框的 Alpha。
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#SkinnableDataContainer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="dataGroup" owner="spark.components:SkinnableDataContainer" playerVersion="Flash10" required="false" var_type="spark.components:DataGroup">
<description>
      定义外观类中的 DataGroup（数据项目将被推入其中，并进行呈示和布置）的可选外观部件。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines the DataGroup in the skin class 
      where data items get pushed into, rendered, and laid out.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SkinnableDataContainer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SkinnableDataContainer
    <strong>Properties</strong>
    autoLayout="true"
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    layout="VerticalLayout"
    typicalItem="null"
  
    <strong>Styles</strong>
    alignmentBaseline="useDominantBaseline"
    baselineShift="0.0"
    cffHinting="horizontal_stem"
    color="0"
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    focusAlpha="0.55"
    focusColor=""
    focusThickness="2"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textJustify="inter_word"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnableDataContainer 类是数据项目的容器基类。SkinnableDataContainer 类将数据项目转换为可视元素以进行显示。尽管此容器可以包含可视元素，但它通常仅用于包含作为子项的数据项目。
 
  <p>SkinnableDataContainer 类充当子数据项目或实现 IVisualElement 接口且为 DisplayObject 的可视元素。数据项目可以是诸如 String 和 Number 对象等的简单数据项目，也可以是诸如 Object 和 XMLNode 对象等的更复杂的数据项目。尽管这些容器可以包含可视元素，但它们通常仅用于包含作为子项的数据项目。</p>
 
  <p>项呈示器定义容器中数据项目的可视表示形式。项呈示器将数据项目转换为可以由容器显示的一种格式。必须将项呈示器传递给 SkinnableDataContainer 才能适当地呈示数据项目。</p>
 
  <p>如果您需要一个数据项目容器而不需要外观，则建议使用 DataGroup（无法对其设置外观）来改善性能和应用程序大小。</p>
 
  <p>SkinnableDataContainer 容器具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示其子代</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SkinnableDataContainerExample.mxml"><swfblock conref="examples/SkinnableDataContainerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>SkinnableContainer</linktext></link><link href="spark.components.xml#DataGroup"><linktext>DataGroup</linktext></link><link href="spark.skins.spark.xml#SkinnableDataContainerSkin"><linktext>spark.skins.spark.SkinnableDataContainerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  从容器中删除呈示器时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  从容器中删除呈示器时分派。<codeph>event.renderer</codeph> 属性包含已删除的呈示器。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:SkinnableDataContainer_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  向容器中添加呈示器时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  向容器中添加呈示器时分派。<codeph>event.renderer</codeph> 属性包含已添加的呈示器。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:SkinnableDataContainer:SkinnableDataContainer"><apiName>SkinnableDataContainer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:SkinnableDataContainer:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      从指定的数据项中返回该数据项的字符串表示形式，以供项呈示器显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>数据项的字符串表示形式。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>数据项。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从指定的数据项中返回该数据项的字符串表示形式，以供项呈示器显示。该方法使用数据项的 <codeph>toString()</codeph> 方法将相应数据项转换为字符串表示形式。Null 数据项返回空字符串。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:SkinnableDataContainer:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      更新项呈示器，以备使用或重用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>正在更新的呈示器。 
      
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>数据提供程序中数据项的索引。 
      
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>此项呈示器正在表示的数据对象. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      更新项呈示器，以备使用或重用。如果某项呈示器首次创建或由于虚拟化原因而循环利用，则此 SkinnableDataContainer 实例可以设置项呈示器的 <codeph>label</codeph> 属性和 <codeph>owner</codeph> 属性。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:SkinnableDataContainer:autoLayout:get"><apiName>autoLayout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#autoLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.DataGroup#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/></apiValueDef><apiDesc conref="spark.components.DataGroup#dataProvider">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#SkinnableDataContainer/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#SkinnableDataContainer/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link><link href="" invalidHref="mx.collections.ArrayCollection.xml"><linktext>mx.collections.ArrayCollection</linktext></link><link href="" invalidHref="mx.collections.ArrayList.xml"><linktext>mx.collections.ArrayList</linktext></link><link href="" invalidHref="mx.collections.XMLListCollection.xml"><linktext>mx.collections.XMLListCollection</linktext></link></related-links></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc conref="spark.components.DataGroup#itemRendererFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRendererFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.DataGroup#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc conref="spark.components.DataGroup#itemRenderer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:layout:get"><apiName>layout</apiName><shortdesc conref="spark.components.supportClasses.GroupBase#layout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>VerticalLayout
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.GroupBase#layout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:SkinnableDataContainer:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.DataGroup#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.components.DataGroup#typicalItem">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Scroller"><apiName>Scroller</apiName><shortdesc>
  Scroller 组件显示一个称为视域的单个可滚动组件，以及水平滚动条和垂直滚动条。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="viewport"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  指示在哪些条件下会显示垂直滑动条。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（“on”）- 始终显示滚动条。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（“off”）- 从不显示滚动条。通过设置视域的 verticalScrollPosition 属性，仍可以按编程方式滚动视域。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（“auto”）- 当视域的 contentHeight 大于其自身的高度时显示滚动条。
  </li>
  </ul>
 
  <p>
  滚动策略影响 Scroller 组件的测量大小。
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Time" inherit="yes" name="touchDelay" owner="spark.components:Scroller" playerVersion="Flash10.1" type="Number">
<description conref="spark.components.supportClasses.GroupBase#style:touchDelay">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="liveScrolling" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description>
  Scroller 组件所使用的滚动条的 <codeph>liveDragging</codeph> 样式的代理。   
 
  <p>如果该样式设置为 <codeph>true</codeph>，则 <codeph>liveDragging</codeph> 样式将设置为 <codeph>true</codeph>（默认值）。这意味着拖动滚动条滑块可以直接更新视口的滚动位置。如果该样式设置为 <codeph>false</codeph>，则 <codeph>liveDragging</codeph> 样式将设置为 <codeph>false</codeph>。这意味着拖动滚动条滑块时，仅当释放鼠标按键时才更新视口的滚动位置。</p>
 
  <p>更新视口的显示开销大以致“liveDragging”执行困难时，设置该样式为 <codeph>false</codeph> 会有所帮助。</p> 
  
  <p>默认情况下该样式为 <codeph>undefined</codeph>，这说明不修改滚动条的 <codeph>liveDragging</codeph> 样式。</p>
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  指示在哪些条件下会显示水平滑动条。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（“on”）- 始终显示滚动条。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（“off”）- 从不显示滚动条。通过设置视域的 horizontalScrollPosition 属性，仍可以按编程方式滚动视域。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（“auto”）- 当视域的 contentWidth 大于其自身的宽度时显示滚动条。
  </li>
  </ul>
 
  <p>
  滚动策略影响 Scroller 组件的测量大小。
  </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  组件内容背景的 Alpha。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components:Scroller" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  组件已启用但没有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  禁用组件时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  组件已启用且有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components:Scroller" playerVersion="Flash10.5" type="Object">
<description>
  指定两端对齐要用的字间距。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.wordSpacing。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  将文本导入到 TextFlow 中时压缩或保留空白。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  确定要旋转此文本的度数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textRotation。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  文本第一行偏离容器左侧的距离。
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textIndent。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textIndent；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  指定与段落关联的制表位。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.tabStops。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  段落开始边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  段落之前要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  段落之后要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  段落结束边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  它控制列表中项目的外观。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStyleType。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  它控制列表项目标记相对于列表项目的位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStylePosition。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  指定当列表相应侧的内边距值为 <codeph>auto</codeph> 时，列表开始边缘的自动缩进。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  指定行距模型，它是行距基准和行距方向的组合。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.leadingModel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  指定容器中第一行的基线位置。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  控制文本在浮点周围的环绕方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.clearFloats。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  控制在将连续文本断开为多行时允许行断开的位置。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  指定线位置的垂直或水平行进。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:Scroller" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#Scroller/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#Scroller/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#Scroller/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:Scroller" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#Scroller/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:Scroller" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:Scroller" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:Scroller" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:Scroller" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="horizontalScrollBarFactory" owner="spark.components:Scroller" required="false" type="spark.components.HScrollBar" var_type="mx.core:IFactory">
<description>
      一个外观部件，用于定义水平滚动条组件。<codeph>horizontalScrollBar</codeph> 外观部件优先于此外观部件。当 Scroller 创建此部件的实例时，它会将 <codeph>horizontalScrollBar</codeph> 外观部件设置为该实例。此属性应认为是只读的。只能通过 Scroller 的外观来设置。<codeph/>
     </description>
	<shortdesc>
      A skin part that defines the horizontal scroll bar component.</shortdesc></SkinPart><SkinPart name="verticalScrollBarFactory" owner="spark.components:Scroller" required="false" type="spark.components.VScrollBar" var_type="mx.core:IFactory">
<description>
      定义垂直滚动条的外观部件。<codeph>verticalScrollBar</codeph> 外观部件优先于此外观部件。当 Scroller 创建此部件的实例时，它会将 <codeph>verticalScrollBar</codeph> 外观部件设置为该实例。此属性应认为是只读的。只能通过 Scroller 的外观来设置。<codeph/>
     </description>
	<shortdesc>
      A skin part that defines the vertical scroll bar.</shortdesc></SkinPart><SkinPart name="horizontalScrollBar" owner="spark.components:Scroller" playerVersion="Flash10" required="false" var_type="spark.components:HScrollBar">
<description>
      定义水平滚动条的外观部件。此属性应认为是只读的。只能通过 Scroller 的外观来设置。此属性为 Bindable。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the horizontal scroll bar.</shortdesc></SkinPart><SkinPart name="verticalScrollBar" owner="spark.components:Scroller" playerVersion="Flash10" required="false" var_type="spark.components:VScrollBar">
<description>
      定义垂直滚动条的外观部件。此属性应认为是只读的。只能通过 Scroller 的外观来设置。此属性为 Bindable。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the vertical scroll bar.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:Scroller&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Scroller
   <strong>Properties</strong>
    measuredSizeIncludesScrollBars="true"
    minViewportInset="0"
    viewport="null"
  
    <strong>Styles</strong>
    alignmentBaseline="use_dominant_baseline"
    alternatingItemColors=""
    baselineShift="0.0"
    blockProgression="TB"
    breakOpportunity="auto"
    cffHinting="horizontal_stem"
    clearFloats="none"
    color="0"
    contentBackgroundAlpha=""
    contentBackgroundColor=""
    digitCase="default"
    digitWidth="default"
    direction="LTR"
    dominantBaseline="auto"
    downColor=""
    firstBaselineOffset="auto"
    focusColor=""
    focusedTextSelectionColor=""
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    horizontalScrollPolicy="auto"
    inactiveTextSelection=""
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="CFF"
    rollOverColor=""
    symbolColor=""
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="inter_word"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor=""
    verticalScrollPolicy="auto"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Scroller 组件显示一个称为视域的单个可滚动组件，以及水平滚动条和垂直滚动条。该视域必须实现 IViewport 接口。其外观必须是 Group 类的派生。
   <p>Spark Group、DataGroup 和 RichEditableText 组件实现 IViewport 接口，且可以用作 Scroller 控件的子代，如下例所示：</p>
 
  <pre>
  &lt;s:Scroller width="100" height="100">
       &lt;s:Group> 
          &lt;mx:Image width="300" height="400" 
               source="@Embed(source='assets/logo.jpg')"/> 
       &lt;/s:Group>        
  &lt;/s:Scroller></pre>     
   <p>Image 控件的大小比其父 Group 容器设置得大。默认情况下，子代超过父容器的边界。Scroller 会指定将子代剪切到边界并显示滚动条，而不是让子代超过父容器的边界。</p>
   <p>并非所有 Spark 容器都会实现 IViewPort 接口。因此，BorderContainer 和 SkinnableContainer 等此类容器不能用作 Scroller 组件的直接子代。但是，所有 Spark 容器均可采用 Scroller 组件作为子组件。例如，要对 Spark BorderContainer 的子代使用滚动条，请将该子代包装在 Scroller 组件中。 </p>
   <p>要使整个 BorderContainer 可滚动，请将其包装在 Group 容器中。然后，将 Group 容器作为 Scroller 组件的子代，对于不能实现 IViewport 接口的可设置外观的 Spark 容器，还可以为包含 Scroller 组件的容器创建自定义外观。 </p>
 
  <p>IViewport 接口为实现该接口的组件定义视域。视区是您希望显示的容器区域的矩形子集，而不是显示整个容器。滚动条控制视域的 <codeph>horizontalScrollPosition</codeph> 和 <codeph>verticalScrollPosition</codeph> 属性。使用滚动条可以查看由视域的 <codeph>contentWidth</codeph> 和 <codeph>contentHeight</codeph> 属性定义的区域。</p>
   <p><codeph/><codeph/><codeph/></p>
   <p><codeph/><codeph/></p>
   <p>可以将滚动条与容器视域的显式设置结合使用。视域设置确定视域的初始位置，然后可以使用滚动条移动该位置，如下例所示： </p>
  
  <pre>
  &lt;s:Scroller width="100" height="100">
      &lt;s:Group
          horizontalScrollPosition="50" verticalScrollPosition="50"> 
          &lt;mx:Image width="300" height="400" 
              source="@Embed(source='assets/logo.jpg')"/> 
      &lt;/s:Group>                 
  &lt;/s:Scroller></pre>
 
  <p>滚动条是根据垂直和水平滚动条策略显示的，该策略可以为 <codeph>auto</codeph>、<codeph>on</codeph> 或 <codeph>off</codeph>。<codeph>auto</codeph> 策略意味着当视域的内容大于视域本身时，滚动条将可见并包含在布局中。</p>
 
  <p>Scroller 外观布局不能更改。它会无条件地设置为处理滚动策略的私有布局实现。Scroller 外观仅可以提供替换滚动条。要获得对视域及其滚动条的布局的更多控制功能，只需将它们添加到 <codeph>Group</codeph> 并使用滚动条 <codeph>viewport</codeph> 属性将它们链接到一起即可，而无需使用 Scroller。</p>
   <p>Scroller 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.ScrollerSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ScrollerExample.mxml"><swfblock conref="examples/ScrollerExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.components.xml#DataGroup"><linktext>spark.components.DataGroup</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link></related-links><adobeApiEvent id="spark.components:Scroller_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  在滚动位置由于 mouseWheel 事件而发生变化时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在滚动位置由于 <codeph>mouseWheel</codeph> 事件而发生变化时分派。
  
  <p>如果存在可视 verticalScrollBar，则默认情况下视口按 <codeph>event.delta</codeph>“步长”垂直滚动。步长的高度由视口的 <codeph>getVerticalScrollPositionDelta</codeph> 方法使用 <codeph>UP</codeph> 或 <codeph>DOWN</codeph> 确定，具体取决于滚动方向。</p>
   <p>否则，如果存在可视 horizontalScrollBar，则默认情况下视口按 <codeph>event.delta</codeph>“步长”水平滚动。步长的宽度由视口的 <codeph>getHorizontalScrollPositionDelta</codeph> 方法使用 <codeph>LEFT</codeph> 或 <codeph>RIGH </codeph> 确定，具体取决于滚动的方向。</p>
   <p>对事件调用 <codeph>preventDefault()</codeph> 方法可避免滚动位置发生更改。否则，如果您修改事件的 <codeph>delta</codeph> 属性，则该值会用作“步长”的数量。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Scroller:Scroller"><apiName>Scroller</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:Scroller:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:addElement"><apiName>addElement</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:ensureElementIsVisible"><apiName>ensureElementIsVisible</apiName><shortdesc>
      滚动视口以使指定元素可见。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>Scroller 包装的容器或嵌套容器的子元素。  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      滚动视口以使指定元素可见。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      如果存在视域，且传入的索引为 0，则返回该视域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果在子列表中不存在该索引位置。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>位于指定索引位置的元素。
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要检索的元素的索引。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果存在视域，且传入的索引为 0，则返回该视域。否则将引发 RangeError。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      如果传入的元素是视域，则返回 0。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果元素不是此对象的子项。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>要标识的元素的索引位置。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>要标识的元素。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果传入的元素是视域，则返回 0。否则将引发 ArgumentError。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:removeElement"><apiName>removeElement</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:Scroller:swapElements"><apiName>swapElements</apiName><shortdesc>
     
      Scroller 不支持该操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam><apiParam><apiItemName>element2</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc>
     
      Scroller 不支持该操作。Scroller 控件仅有一个子控件。使用 <codeph>viewpoint</codeph> 属性对其进行操纵。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:Scroller:measuredSizeIncludesScrollBars:get"><apiName>measuredSizeIncludesScrollBars</apiName><shortdesc>
      如果为 true，Scroller 的测量大小包括可见滚动条所需的空间，否则 Scroller 的测量大小仅取决于其视域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，Scroller 的测量大小包括可见滚动条所需的空间，否则 Scroller 的测量大小仅取决于其视域。
     
      <p>将其内容“回流”以适合可用宽度或高度的组件（例如 TextArea）可以使用该属性稳定其测量大小。默认情况，TextArea 由 <codeph>widthInChars</codeph> 和 <codeph>heightInChars</codeph> 属性定义，但在很多应用程序中，测量大小最好保持不变，即使 TextArea 外观的 Scroller 显示滚动条时也应如此。</p>
     
      <p>在内容不回流的组件中（例如，典型的 List 项），默认行为更可取，因为组件内容被滚动条遮蔽的概率会更小。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:minViewportInset:get"><apiName>minViewportInset</apiName><shortdesc>
      Scroller 的视域与边缘之间的最小空间。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Scroller 的视域与边缘之间的最小空间。如果滚动条都不可见，则会依据 <codeph>minViewportInset</codeph> 在所有四个边上嵌入视域。如果滚动条可见，则会依据 <codeph>minViewportInset</codeph> 或滚动条大小中的较大者嵌入视域。将 ScrollBar 布置为与 Scroller 的边缘对齐。   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:numElements:get"><apiName>numElements</apiName><shortdesc>
      如果存在视域，则返回 1；否则，返回 0。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      如果存在视域，则返回 1；否则，返回 0。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:pageScrollingEnabled:get"><apiName>pageScrollingEnabled</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
           </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/>
           <p><b/><codeph/><codeph/></p>
           <p/>
           <p/>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Scroller:scrollSnappingMode:get"><apiName>scrollSnappingMode</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"none"
           </apiDefaultValue></apiValueDef><apiDesc>
      <codeph/><codeph/><codeph/>
           <p><b/><codeph/><codeph/></p>
           <p><codeph/><codeph/></p>
           <p><codeph/>这种滚动位置的变化不是动画</p>
           <p><codeph/><codeph/><codeph/><codeph/> </p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ScrollSnappingMode"><linktext>spark.components.ScrollSnappingMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Scroller:viewport:get"><apiName>viewport</apiName><shortdesc>
      要滚动的视域组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要滚动的视域组件。
     
      <p>
      将视域添加到 Scroller 组件的外观，该外观布置视域和滚动条。设置 <codeph>viewport</codeph> 属性时，视域的 <codeph>clipAndEnableScrolling</codeph> 属性将设置为 true 以启用滚动。Scroller 不支持直接旋转视域。可以任意转换视域的内容，但不能任意转换视域本身。
     </p>
     
      此属性为 Bindable。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VGroup"><apiName>VGroup</apiName><shortdesc>
  VGroup 容器是使用 VerticalLayout 类的 Group 容器的一个实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:VGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:VGroup
    <strong>Properties</strong>
    gap="6"
    horizontalAlign="left"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedMaxRowCount="-1"
    requestedMinRowCount="-1"
    requestedRowCount"-1"
    rowHeight="no default"
    variableRowHeight="true"
    verticalAlign="top"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  VGroup 容器是使用 VerticalLayout 类的 Group 容器的一个实例。不要修改 <codeph>layout</codeph> 属性。请改用 VGroup 类的属性来修改 VerticalLayout 类的特征。
 
  <p>VGroup 容器具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示其子代</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="VGroupExample.mxml"><swfblock conref="examples/VGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link></related-links><apiConstructor id="spark.components:VGroup:VGroup"><apiName>VGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。将 <codeph>layout</codeph> 属性初始化为 VerticalLayout 类的一个实例。
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#VerticalLayout"><linktext>spark.layouts.VerticalLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:VGroup:firstIndexInView:get"><apiName>firstIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#firstIndexInView">
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:gap:get"><apiName>gap</apiName><shortdesc conref="spark.layouts.VerticalLayout#gap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#gap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:lastIndexInView:get"><apiName>lastIndexInView</apiName><shortdesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="indexInViewChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#lastIndexInView">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.VerticalLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedMaxRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedMaxRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedMinRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedMinRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.VerticalLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.VerticalLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:ComboBox"><apiName>ComboBox</apiName><shortdesc>
  ComboBox 控件是 DropDownListBase 控件的子类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:ComboBox">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><styles><style format="Length" inherit="no" name="paddingTop" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  文本在控件的提示区域中的顶部嵌入（以像素为单位）。  
 
  </description>
<default>5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  文本在控件的提示区域中的右侧嵌入（以像素为单位）。  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  文本在控件的提示区域中的左侧嵌入（以像素为单位）。  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components:ComboBox" playerVersion="Flash10" type="Number">
<description>
  文本在控件的提示区域中的底部嵌入（以像素为单位）。  
 
  </description>
<default>3
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="textInput" owner="spark.components:ComboBox" playerVersion="Flash10" required="false" var_type="spark.components:TextInput">
<description>
      包含输入文本或 SelectedItem 文本的可选外观部件. 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      Optional skin part that holds the input text or the selectedItem text.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ComboBox&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ComboBox
    <strong>Properties</strong>
    itemMatchingFunction="null"
    labelToItemFunction="null"
    maxChars="0"
    openOnInput="true"
    prompt="null"
    restrict=""
     <strong>Styles</strong>
    paddingBottom="3"
    paddingLeft="3"
    paddingRight="3"
    paddingTop="5"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:DropDownListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ComboBox 控件是 DropDownListBase 控件的子类。与 DropDownListBase 控件类似，当用户从 ComboBox 控件的下拉列表中选择某项时，数据项将显示在控件的提示区域中。 
   <p>这两个控件之间的一个区别是，ComboBox 控件的提示区域是使用 TextInput 控件实现的，而 DropDownList 控件是通过 Label 控件实现的。因此，用户可以编辑控件的提示区域，以输入非预定义选项之一的值。</p>
   <p>例如，DropDownList 控件仅允许用户从控件的预定义项列表中进行选择。ComboBox 控件允许用户既可以从预定义项中选择，也可以在提示区域中输入新项。您的应用程序可以识别已输入一个新项，（可选）并将其添加到控件的项列表中。</p>
   <p>ComboBox 控件还可以当用户在提示区域中输入字符时搜索项列表。当用户输入字符时，将打开控件的下拉区域，然后滚动到项列表中最接近的匹配项并加亮。</p>
   <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
   <p><b>注意：</b>基于 Spark List 的控件（Spark ListBase 类及其子类，如 ButtonBar、ComboBox、DropDownList、List 和 TabBar）不支持将 BasicLayout 类作为 <codeph>layout</codeph> 属性的值。不要将 BasicLayout 与基于 Spark List 的控件一起使用。</p>
 
  <p>ComboBox 控件具有以下默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>146 个像素宽 × 23 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>20 个像素宽 × 23 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.ComboBoxSkin
               <p>spark.skins.spark.ComboBoxTextInputSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="ComboBoxExample.mxml"><swfblock conref="examples/ComboBoxExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ComboBoxSkin"><linktext>spark.skins.spark.ComboBoxSkin</linktext></link><link href="spark.skins.spark.xml#ComboBoxTextInputSkin"><linktext>spark.skins.spark.ComboBoxTextInputSkin</linktext></link></related-links><apiConstructor id="spark.components:ComboBox:ComboBox"><apiName>ComboBox</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:ComboBox:CUSTOM_SELECTED_ITEM"><apiName>CUSTOM_SELECTED_ITEM</apiName><shortdesc>
      当用户在提示区域中输入值且该值被提交时表示 selectedIndex 属性值的静态常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="int"/></apiValueDef><apiDesc>
      当用户在提示区域中输入值且该值被提交时表示 <codeph>selectedIndex</codeph> 属性值的静态常量。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:itemMatchingFunction"><apiName>itemMatchingFunction</apiName><shortdesc>
      指定当用户在提示区域中输入字符时用于搜索项列表的回调函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定当用户在提示区域中输入字符时用于搜索项列表的回调函数。当用户输入字符时，将打开控件的下拉区域，然后滚动到项列表中最接近的匹配项并加亮。
     
      <p>该属性引用的函数采用输入字符串，并返回数据提供程序中与输入相匹配的项的索引。这些项将在数据提供程序中。作为索引的 Vector &lt;int> 返回。 </p>
     
      <p>该回调函数必须具有以下签名： </p>
     
      <pre>
        function myMatchingFunction(comboBox:ComboBox, inputText:String):Vector.&lt;int></pre>
     
      <p>如果该属性的值为 null，ComboBox 使用默认算法查找匹配项。默认情况下，如果长度为 n 的输入字符串等同于某项的前 n 个字符（忽略大小写），则它为该项的匹配项。例如，“aRiz”是“Arizona”的匹配项，而“riz”则不是。</p>
           <p>要禁止搜索，请创建返回空 Vector.&lt;int>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:openOnInput"><apiName>openOnInput</apiName><shortdesc>
      如果为 true，则用户编辑提示区域时会打开下拉列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则用户编辑提示区域时会打开下拉列表。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:enableIME:get"><apiName>enableIME</apiName><shortdesc conref="spark.components.TextInput#enableIME">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.TextInput#enableIME">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:imeMode:get"><apiName>imeMode</apiName><shortdesc conref="spark.components.TextInput#imeMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="spark.components.TextInput#imeMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:prompt:get"><apiName>prompt</apiName><shortdesc>
      输入文本为 null 时要显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      输入文本为 null 时要显示的文本。
     
      <p>先创建控件时将显示提示文本。控件获得焦点、输入文本为非 null 或选择了列表中的项目时提示文本将消失。控件失去焦点时提示文本将重新显示，但仅当未输入文本时（如果文本字段的值为 null 或空字符串）。</p>
      
      <p>您可以使用 CSS 更改提示文本的样式。如果控件具有提示文本且未处于禁用状态，<codeph>normalWithPrompt</codeph> 伪选择器将定义该样式。如果控件处于禁用状态，将使用 <codeph>disabledWithPrompt</codeph> 伪选择器所定义的样式。</p>
      
      <p>以下示例 CSS 更改了 TextInput 控件中提示文本的颜色。ComboBox 控件将 TextInput 控件用作提示文本和输入的子组件，所以使用以下 CSS 时其提示文本会发生更改：
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark";
      s|TextInput:normalWithPrompt {
          color: #CCCCFF;
      }
      </pre>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:labelToItemFunction:set"><apiName>labelToItemFunction</apiName><shortdesc>
      指定用于将在提示区域中输入的新值转换为与数据提供程序中的数据项具有相同数据类型的回调函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      指定用于将在提示区域中输入的新值转换为与数据提供程序中的数据项具有相同数据类型的回调函数。当提示区域中的文本提交且在数据提供程序中未找到时，将调用该属性引用的函数。 
     
      <p>该回调函数必须具有以下签名： </p>
     
      <pre>
        function myLabelToItem(value:String):Object</pre>
     
      <p>其中，<codeph>value</codeph> 是在提示区域中输入的 String。该函数返回其类型与数据提供程序中的项相同的 Object。</p>
     
      <p>默认回调函数返回 <codeph>value</codeph>。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:maxChars:set"><apiName>maxChars</apiName><shortdesc>
      提示区域中最多可包含的字符数（即用户输入的字符数）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      提示区域中最多可包含的字符数（即用户输入的字符数）。0 值相当于无限制。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:ComboBox:restrict:set"><apiName>restrict</apiName><shortdesc>
      指定用户可以在提示区域中输入的字符集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用户可以在提示区域中输入的字符集。默认情况下，用户可以输入任意字符，相当于空字符串的值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:Image"><apiName>Image</apiName><shortdesc>
  Spark Image 控件是一个可设置外观的组件，该组件提供可自定义的 loading 状态、chrome 和 error 状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><styles><style enumeration="default,high" inherit="no" name="smoothingQuality" owner="spark.components:Image" playerVersion="Flash9" type="String">
<description>
  等效于 BitmapImage 的 <codeph>smoothingQuality</codeph> 属性的样式。在设置为 <codeph>BitmapSmoothingQuality.BEST</codeph> 时，对图像重新采样（如果数据来自受信任的源）以获得较高品质的结果。如果设置为 <codeph>BitmapSmoothingQuality.DEFAULT</codeph>，则使用缩放的位图填充的默认舞台品质。
 
  </description>
<default>&lt;code>BitmapSmoothingQuality.DEFAULT&lt;/code>
 
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="enableLoadingState" owner="spark.components:Image" playerVersion="Flash9" type="Boolean">
<description>
  如果为 <codeph>true</codeph>，则启用 <codeph>loading</codeph> 外观状态。
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="spark.components:Image" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  此组件的背景色。
   
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components:Image" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  此组件的背景的 Alpha 值。
 
  </description>
<default>NaN
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Image 控件的 disabled 状态。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="invalid" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Image 控件的 invalid 状态。这意味着无法成功加载图像。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="ready" owner="spark.components:Image" playerVersion="Flash10.1">
<description>
  Image 控件的 ready 状态。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="loading" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Image 控件的 preloading 状态。<codeph>enableLoadingState</codeph> 样式必须设置为 <codeph>true</codeph> 才能启用此组件状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="uninitialized" owner="spark.components:Image" playerVersion="Flash10">
<description>
  Image 控件的 uninitialized 状态。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="imageDisplay" owner="spark.components:Image" playerVersion="Flash10" required="true" var_type="spark.primitives:BitmapImage">
<description>
      定义图像内容的必需外观部件。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A required skin part that defines image content.</shortdesc></SkinPart><SkinPart name="progressIndicator" owner="spark.components:Image" playerVersion="Flash10" required="false" var_type="spark.components.supportClasses:Range">
<description>
      显示当前加载进度的可选外观部件。为了方便，progressIndicator 值会随加载的完成百分比自动更新。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that displays the current loading progress.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:Image&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:Image 
    <strong>Properties</strong>
    clearOnLoad="true"
    contentLoader="null"
    contentLoaderGrouping="null"
    fillMode="scale"
    horizontalAlign="center"
    preliminaryHeight="NaN"
    preliminaryWidth="NaN"
    scaleMode="letterbox"
    smooth="false"
    source="null
    verticalAlign="middle"
 
    <strong>Styles</strong>
    backgroundAlpha="NaN"
    backgroundColor="NaN"
    enableLoadingState="false"
    smoothingQuality="default"
 
    <strong>Events</strong>
    complete="<i>No default</i>"
    httpStatus="<i>No default</i>"
    ioError="<i>No default</i>"
    progress="<i>No default</i>"
    ready="<i>No default</i>"
    securityError="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spark Image 控件是一个可设置外观的组件，该组件提供可自定义的 loading 状态、chrome 和 error 状态。Image 控件允许您在运行时导入 JPEG、PNG 和 GIF 文件。您还可以使用 <codeph>@Embed(source='filename')</codeph> 在编译时嵌入上述任意类型的文件。
   <p><b>注意：</b>Flex 还提供了 SWFLoader 控件用于加载 Flex 应用程序。通常使用 Image 控件来加载静态图形文件和 SWF 文件，而 SWFLoader 用于加载 Flex 应用程序。Image 控件还可用于自定义项呈示器和项目编辑器。 </p>
 
  <p><b>注意：</b>Flex 还包括 BitmapImage 类。该类用于将图像嵌入到外观和 FXG 组件。 </p>
   <p>嵌入的图像将立即加载，因为它们已经是 Flex SWF 文件的一部分。但是，这些图像会增加应用程序的大小，还会减慢应用程序的初始化过程。嵌入的图像还要求您在图像文件发生更改时立即重新编译应用程序。</p> 
  
  <p>如果不希望嵌入资源，也可以在运行时加载资源。您可以在运行 SWF 文件的本地文件系统中加载资源，也可以访问远程资源（通常是借助网络使用 HTTP 请求）。这些图像是独立于您的 Flex 应用程序的，因此，只要修改后的图像名称保持不变，修改图像就不会引发重新编译的操作。引用的图像不会延长应用程序的首次加载时间。但是，如果使用了这些图像并将其加载到 Flash Player 或 AIR，则可能会出现延迟。 </p>
  
  <p>默认外观可提供无镶边图像外观，该外观带有基于预加载器的通用进度栏和反映无效内容的错误的图像图标。</p>
   <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
   <p>Image 控件具有下列默认特性：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以容纳关联的源内容</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素宽 × 0 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.ImageSkin</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ImageSkin"><linktext>spark.skins.spark.ImageSkin</linktext></link><link href="" invalidHref="mx.controls.SWFLoader.xml"><linktext>mx.controls.SWFLoader</linktext></link></related-links><adobeApiEvent id="spark.components:Image_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
  发生安全性错误时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  发生安全性错误时分派。
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.SecurityErrorEvent.xml"><linktext>flash.events.SecurityErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:Image_mx.events.FlexEvent.READY_ready"><apiName>ready</apiName><shortdesc>
  在内容加载完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.READY</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在内容加载完成时分派。与 <codeph>complete</codeph> 事件不同，将为所有源类型分派此事件。  
  
  <p>请注意，对于通过加载器加载的内容，将分派 <codeph>ready</codeph> 和 <codeph>complete</codeph> 事件。</p>  对于其它源类型（如嵌入），仅分派 <codeph>ready</codeph>。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  当加载内容时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当加载内容时分派。
   <p><b>注意：</b>不能保证分派 <codeph>progress</codeph> 事件。在不分派任何 <codeph>progress</codeph> 事件的情况下，也可能会接收 <codeph>complete</codeph> 事件。如果加载的内容是本地文件，就可能会出现这种情况。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
  发生输入或输出错误时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  发生输入或输出错误时分派。
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.IOErrorEvent.xml"><linktext>flash.events.IOErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><shortdesc>
  在通过 HTTP 发出网络请求并且 Flash Player 或 AIR 可以检测到 HTTP 状态代码时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在通过 HTTP 发出网络请求并且 Flash Player 或 AIR 可以检测到 HTTP 状态代码时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:Image_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  在内容加载完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在内容加载完成时分派。仅对基于 URL 和 ByteArray 的源（这些源需要加载器）分派此事件。
 
  <p>请注意，对于通过加载器加载的内容，将分派 <codeph>ready</codeph> 和 <codeph>complete</codeph> 事件。</p>  对于其它源类型（如嵌入），仅分派 <codeph>ready</codeph>。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:Image:Image"><apiName>Image</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components:Image:bitmapData:get"><apiName>bitmapData</apiName><shortdesc conref="spark.primitives.BitmapImage#bitmapData">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:BitmapData"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bitmapData">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc conref="spark.primitives.BitmapImage#bytesLoaded">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bytesLoaded">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc conref="spark.primitives.BitmapImage#bytesTotal">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#bytesTotal">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:clearOnLoad:get"><apiName>clearOnLoad</apiName><shortdesc conref="spark.primitives.BitmapImage#clearOnLoad">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#clearOnLoad">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:contentLoaderGrouping:get"><apiName>contentLoaderGrouping</apiName><shortdesc conref="spark.primitives.BitmapImage#contentLoaderGrouping">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#contentLoaderGrouping">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:contentLoader:get"><apiName>contentLoader</apiName><shortdesc conref="spark.primitives.BitmapImage#contentLoader">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IContentLoader</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#contentLoader">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:fillMode:get"><apiName>fillMode</apiName><shortdesc conref="spark.primitives.BitmapImage#fillMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>BitmapFillMode.SCALE&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#fillMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Image:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.primitives.BitmapImage#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>HorizontalAlign.CENTER&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:preliminaryHeight:get"><apiName>preliminaryHeight</apiName><shortdesc conref="spark.primitives.BitmapImage#preliminaryHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#preliminaryHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:preliminaryWidth:get"><apiName>preliminaryWidth</apiName><shortdesc conref="spark.primitives.BitmapImage#preliminaryWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#preliminaryWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:scaleMode:get"><apiName>scaleMode</apiName><shortdesc conref="spark.primitives.BitmapImage#scaleMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>BitmapScaleMode.LETTERBOX&lt;/code>
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#scaleMode">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.graphics.BitmapFillMode.xml"><linktext>mx.graphics.BitmapFillMode</linktext></link><link href="" invalidHref="mx.graphics.BitmapScaleMode.xml"><linktext>mx.graphics.BitmapScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:Image:sourceHeight:get"><apiName>sourceHeight</apiName><shortdesc conref="spark.primitives.BitmapImage#sourceHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#sourceHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:sourceWidth:get"><apiName>sourceWidth</apiName><shortdesc conref="spark.primitives.BitmapImage#sourceWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#sourceWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:trustedSource:get"><apiName>trustedSource</apiName><shortdesc conref="spark.primitives.BitmapImage#trustedSource">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#trustedSource">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.primitives.BitmapImage#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>&lt;code>HorizontalAlign.MIDDLE&lt;/code>
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:smooth:set"><apiName>smooth</apiName><shortdesc conref="spark.primitives.BitmapImage#smooth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#smooth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:Image:source:set"><apiName>source</apiName><shortdesc conref="spark.primitives.BitmapImage#source">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="spark.primitives.BitmapImage#source">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TextSelectionHighlighting"><apiName>TextSelectionHighlighting</apiName><shortdesc>
  该类为 RichEditableText 控件以及将 RichEditableText 用作子组件（Spark TextInput 和 Spark TextArea）的控件的 selectionHighlighting 属性指定所允许的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  该类为 RichEditableText 控件以及将 RichEditableText 用作子组件（Spark TextInput 和 Spark TextArea）的控件的 <codeph>selectionHighlighting</codeph> 属性指定所允许的值。
  
  </apiDesc><example conref="TraceSelectionRanges"><swfblock conref="TraceSelectionRanges"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RichEditableText"><linktext>spark.components.RichEditableText</linktext></link><link href="spark.components.xml#TextArea"><linktext>spark.components.TextArea</linktext></link><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link></related-links><apiValue id="spark.components:TextSelectionHighlighting:ALWAYS"><apiName>ALWAYS</apiName><shortdesc>
      始终显示选择的文本，即使组件没有获得键盘焦点或组件窗口不是活动窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>always</apiData><apiType value="String"/></apiValueDef><apiDesc>
      始终显示选择的文本，即使组件没有获得键盘焦点或组件窗口不是活动窗口。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_ACTIVE"><apiName>WHEN_ACTIVE</apiName><shortdesc>
      只要组件的窗口为活动窗口时，就会显示选择的文本（即使组件没有获得键盘焦点，也会如此）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenActive</apiData><apiType value="String"/></apiValueDef><apiDesc>
      只要组件的窗口为活动窗口时，就会显示选择的文本（即使组件没有获得键盘焦点，也会如此）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TextSelectionHighlighting:WHEN_FOCUSED"><apiName>WHEN_FOCUSED</apiName><shortdesc>
      只有在组件具有键盘焦点时，才显示选择的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>whenFocused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      只有在组件具有键盘焦点时，才显示选择的文本。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:PopUpPosition"><apiName>PopUpPosition</apiName><shortdesc>
  PopUpAnchor.popUpPosition 属性的枚举类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph>PopUpAnchor.popUpPosition</codeph> 属性的枚举类型。该类型描述了 PopUpAnchor 锚定的 <codeph>popUp</codeph> 控件的位置。该位置与 PopUpAnchor 位置相关。  
    
  </apiDesc></apiClassifierDetail><apiValue id="spark.components:PopUpPosition:ABOVE"><apiName>ABOVE</apiName><shortdesc>
      目标上方的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>above</apiData><apiType value="String"/></apiValueDef><apiDesc>
      目标上方的位置
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:BELOW"><apiName>BELOW</apiName><shortdesc>
      目标下方的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>below</apiData><apiType value="String"/></apiValueDef><apiDesc>
      目标下方的位置
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:CENTER"><apiName>CENTER</apiName><shortdesc>
      位于目标中心的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
      位于目标中心的位置
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:LEFT"><apiName>LEFT</apiName><shortdesc>
      目标左侧的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
      目标左侧的位置
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:RIGHT"><apiName>RIGHT</apiName><shortdesc>
      目标右侧的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
      目标右侧的位置
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:PopUpPosition:TOP_LEFT"><apiName>TOP_LEFT</apiName><shortdesc>
      位于目标左上角的位置
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>topLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
      位于目标左上角的位置
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:DataGroup"><apiName>DataGroup</apiName><shortdesc>
  DataGroup 类是数据项目的容器基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:DataGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataGroup
    <strong>Properties</strong>
    dataProvider="null"
    itemRenderer="null"
    itemRendererFunction="null"
    typicalItem="null"
  
    <strong>Events</strong>
    rendererAdd="<i>No default</i>"
    rendererRemove="<i>No default</i>"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRendererOwner</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:GroupBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataGroup 类是数据项目的容器基类。DataGroup 类将数据项目转换为可视元素以进行显示。尽管此容器可以包含可视元素，但它通常仅用于包含作为子项的数据项目。
   <p>DataGroup 类充当子数据项目或实现 IVisualElement 接口且为 DisplayObject 的可视元素。数据项目可以是诸如 String 和 Number 对象等的简单数据项目，也可以是诸如 Object 和 XMLNode 对象等的更复杂的数据项目。尽管这些容器可以包含可视元素，但它们通常仅用于包含作为子项的数据项目。</p>
   <p>项呈示器定义容器中数据项目的可视表示形式。项呈示器将数据项目转换为可以由容器显示的一种格式。必须将项呈示器传递给 DataGroup 容器才能适当地呈示数据项目。</p>
   <p>为了改进性能和最小化应用程序大小，不能设置 DataGroup 容器的外观。如果希望应用外观，请改用 SkinnableDataContainer。 </p>
  
  <p>DataGroup 容器具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示其子代</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DataGroupExample.mxml"><swfblock conref="examples/DataGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>spark.components.SkinnableDataContainer</linktext></link><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer"><linktext>spark.skins.spark.DefaultItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultComplexItemRenderer"><linktext>spark.skins.spark.DefaultComplexItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_REMOVE_rendererRemove"><apiName>rendererRemove</apiName><shortdesc>
  从此 dataGroup 删除呈示器时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_REMOVE</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  从此 dataGroup 删除呈示器时分派。<codeph>event.renderer</codeph> 是已删除的呈示器。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGroup_spark.events.RendererExistenceEvent.RENDERER_ADD_rendererAdd"><apiName>rendererAdd</apiName><shortdesc>
  将呈示器添加到此 dataGroup 时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.RendererExistenceEvent.RENDERER_ADD</apiEventType><adobeApiEventClassifier>spark.events.RendererExistenceEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  将呈示器添加到此 dataGroup 时分派。<codeph>event.renderer</codeph> 是已添加的呈示器。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGroup:DataGroup"><apiName>DataGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGroup:getItemIndicesInView"><apiName>getItemIndicesInView</apiName><shortdesc>
      返回此 DataGroup 中可见的项呈示器的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>可见的项呈示器的索引。
      
      </apiDesc><apiType value="Vector$int"/></apiReturn></apiOperationDef><apiDesc>
      返回此 DataGroup 中可见的项呈示器的索引。
     
      <p>如果 <codeph>clipAndEnableScrolling</codeph> 为 <codeph>true</codeph>，则返回重叠该 DataGroup 的 <codeph>scrollRect</codeph> 的 <codeph>visible</codeph> = <codeph>true</codeph> ItemRenderers 的索引。也就是说，ItemRenders 相对于该 DataGroup 至少是部分可见的。如果 <codeph>clipAndEnableScrolling</codeph> 为 <codeph>false</codeph>，则返回从 0 到 <codeph>dataProvider.length</codeph> - 1 的整数列表。请注意，如果此 DataGroup 的所有者是 Scroller，则 <codeph>clipAndEnableScrolling</codeph> 已设置为 <codeph>true</codeph>。</p>
     
      <p>即使布局是虚拟的，也可以使用 <codeph>getElementAt()</codeph> 方法检索每个返回的索引所对应的项呈示器</p>
     
      <p>无法保证返回的 Vector 中项的顺序。</p>
     
      <p>请注意，VerticalLayout 和 HorizontalLayout 类提供可绑定的 <codeph>firstIndexInView</codeph> 和 <codeph>lastIndexInView</codeph> 属性，这两个属性与此方法包含同样的信息。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:invalidateTypicalItemRenderer"><apiName>invalidateTypicalItemRenderer</apiName><shortdesc> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="11"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      <codeph/>  
     
      <p>如果直接对 <codeph>typicalItem</codeph> 进行更改，则会自动调用该方法。这说明如果属性设置为某一新值，则该新值与当前值不具有“==”的关系。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:itemToLabel"><apiName>itemToLabel</apiName><shortdesc conref="spark.components.IItemRendererOwner#itemToLabel()">
      给定一个数据项，则返回该数据项的 toString() 表示形式以供项呈示器显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>可在项呈示器中显示的 String。
      
      </apiDesc></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要显示的数据项。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.IItemRendererOwner#itemToLabel()">
      <p>给定一个数据项，则返回该数据项的 <codeph>toString()</codeph> 表示形式以供项呈示器显示。Null 数据项返回空字符串。 </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGroup:updateRenderer"><apiName>updateRenderer</apiName><shortdesc>
      
      更新呈示器以重用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>项呈示器。
      </apiDesc></apiParam><apiParam><apiItemName>itemIndex</apiItemName><apiType value="int"/><apiDesc>数据提供程序中的数据索引.
      </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>此项呈示器正在表示的数据对象.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      更新呈示器以重用。此方法首先会准备项呈示器以重用，方法是清除任何旧属性，同时使用新属性进行更新。
     
      <p>最后，此方法应对项呈示器设置 <codeph>data</codeph> 属性。</p>    
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGroup:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      此 DataGroup 的数据提供程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      此 DataGroup 的数据提供程序。它必须为 IList。
     
      <p>在 Flex 框架中包含多个 IList 实现，包括 ArrayCollection、ArrayList 和 XMLListCollection。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGroup/itemRenderer"><linktext>itemRenderer</linktext></link><link href="spark.components.xml#DataGroup/itemRendererFunction"><linktext>itemRendererFunction</linktext></link><link href="" invalidHref="mx.collections.IList.xml"><linktext>mx.collections.IList</linktext></link><link href="" invalidHref="mx.collections.ArrayCollection.xml"><linktext>mx.collections.ArrayCollection</linktext></link><link href="" invalidHref="mx.collections.ArrayList.xml"><linktext>mx.collections.ArrayList</linktext></link><link href="" invalidHref="mx.collections.XMLListCollection.xml"><linktext>mx.collections.XMLListCollection</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGroup:itemRendererFunction:get"><apiName>itemRendererFunction</apiName><shortdesc>
      为某个特定项目返回一个项呈示器 IFactory 的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      为某个特定项目返回一个项呈示器 IFactory 的函数。应该定义一个与此示例函数类似的呈示器函数：
      
      <pre>
        function myItemRendererFunction(item:Object):IFactory</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      用于数据项目的项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用于数据项目的项呈示器。该类必须实现 IDataRenderer 接口。如果已定义，则 <codeph>itemRendererFunction</codeph> 属性优先于此属性。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGroup:typicalItem:get"><apiName>typicalItem</apiName><shortdesc>
      当需要固定的行或列大小时，布局使用 typicalItem 的首选大小，但不设置某个特定的 rowHeight 或 columnWidth 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当需要固定的行或列大小时，布局使用 <codeph>typicalItem</codeph> 的首选大小，但不设置某个特定的 <codeph>rowHeight</codeph> 或 <codeph>columnWidth</codeph> 值。同样，虚拟布局使用此项目来定义未滚动到视图中的布局元素的大小。
           <p>该容器使用典型数据项目和关联的项呈示器来确定容器子项的默认大小。通过定义典型项目，容器不必在屏幕上绘制每个子项时来调整其大小。</p>
           <p>设置此属性会设置布局的 <codeph>typicalLayoutElement</codeph> 属性。</p>
     
      <p>限制：如果 <codeph>typicalItem</codeph> 是 IVisualItem，则它不能同时是数据提供程序的成员。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:HSlider"><apiName>HSlider</apiName><shortdesc>
  使用 HSlider（水平滑块）控件，用户可通过在滑块轨道的端点之间移动滑块来选择值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:HSlider&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no tag attributes:</p>
  <pre>
  &lt;s:HSlider/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SliderBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  使用 HSlider（水平滑块）控件，用户可通过在滑块轨道的端点之间移动滑块来选择值。HSlider 控件采用水平方向。滑块轨道从左向右拉伸。滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。
 
  <p>滑块可以允许最小值和最大值之间连续范围内的值，也可以限制为最小值和最大值之间特定间隔处的值。滑块可以包含数据提示以显示其当前值。</p>
 
  <p>HSlider 控件具有以下默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>100 个像素宽 × 11 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>100 个像素宽 × 100 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.HSliderSkin
              <p>spark.skins.spark.HSliderThumbSkin</p>
              <p>spark.skins.spark.HSliderTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HSliderExample.mxml"><swfblock conref="examples/HSliderExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#HSliderSkin"><linktext>spark.skins.spark.HSliderSkin</linktext></link><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.components:HSlider:HSlider"><apiName>HSlider</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components:DataGrid"><apiName>DataGrid</apiName><shortdesc>
  DataGrid 在可滚动网格上方显示一行列标题。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:DataGrid">
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="dataProvider"/><styles><style enumeration="off,on,auto" inherit="no" name="verticalScrollPolicy" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  指示在哪些条件下会显示垂直滑动条。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（“on”）- 始终显示滚动条。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（“off”）- 从不显示滚动条。通过设置视口的 <codeph>verticalScrollPosition</codeph> 属性，仍可以按编程方式滚动视口。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（“auto”）- 当视口的 <codeph>contentHeight</codeph> 大于其自身的高度时显示滚动条。
  </li>
  </ul>
 
  <p>
  滚动策略影响 Scroller 外观部件的测量大小。该样式是对 Scroller 外观部件的 <codeph>verticalScrollPolicy</codeph> 样式的引用。它不是继承样式，例如它不会影响项呈示器。 </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style enumeration="off,on,auto" inherit="no" name="horizontalScrollPolicy" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  指示水平滚动条显示的条件。
 
  <ul>
  <li>
  <codeph>ScrollPolicy.ON</codeph>（“on”）- 始终显示滚动条。
  </li> 
  <li>
  <codeph>ScrollPolicy.OFF</codeph>（“off”）- 从不显示滚动条。通过设置视口的 <codeph>horizontalScrollPosition</codeph> 属性，仍可以按编程方式滚动视口。
  </li>
  <li>
  <codeph>ScrollPolicy.AUTO</codeph>（“auto”）- 当视口的 <codeph>contentWidth</codeph> 大于其自身的宽度时显示滚动条。
  </li>
  </ul>
 
  <p>
  滚动策略影响 Scroller 外观部件的测量大小。该样式是对 Scroller 外观部件的 <codeph>horizontalScrollPolicy</codeph> 样式的引用。它不是继承样式，例如它不会影响项呈示器。 </p>
 
  </description>
<default>ScrollPolicy.AUTO
   </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="mx.core.ScrollPolicy.xml"><linktext>mx.core.ScrollPolicy</linktext></link></related-links></style><style inherit="no" name="defaultDataGridItemEditor" owner="spark.components:DataGrid" playerVersion="Flash10" type="Class">
<description>
  要用作项编辑器的类（如果列未指定）。该样式属性能为一组 DataGrid 控件设置项编辑器，而不必单独设置每个控件。<codeph>DataGridColumn.itemEditor</codeph> 属性代替该值。
  
  </description>
<default>null
  
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components:DataGrid" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.xml#DataGrid/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components:DataGrid" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.xml#DataGrid/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.xml#DataGrid/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components:DataGrid" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.xml#DataGrid/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components:DataGrid" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components:DataGrid" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components:DataGrid" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components:DataGrid" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="stretchCursor" owner="spark.components:DataGrid" playerVersion="Flash10" type="Class">
<description>
  用作指示可调整列大小的光标外观的类。默认值为 Assets.swf 文件中的 <codeph>cursorStretch</codeph> 元件。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.List#style:selectionColor">
  </description>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Number">
<description>
  组件内容背景的 Alpha。有效值为 0.0 到 1.0。 
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="caretColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description>
  导航 Grid 时插入标记指示符的颜色。
   </description>
<default>0x0167FF
  
  </default>

<playerversion>AIR 2.0
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  控制此组件的边框的可见性。
   </description>
<default>true
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="uint">
<description>
  此组件的边框的颜色。
   </description>
<default>#696969
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的边框的 Alpha 值。有效值为 0.0 到 1.0。 
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="alternatingRowColors" owner="spark.components:DataGrid" playerVersion="Flash10" theme="spark" type="Array">
<description>
  用于初始化 DataGrid 的 <codeph>rowBackground</codeph> 外观部件。如果指定 <codeph>alternatingRowColors</codeph> 样式，则将 <codeph>alternatingRowColorsBackground</codeph> 外观部件用作 <codeph>rowBackground</codeph> 外观部件的值。网格行的交变颜色由该样式的 Array 值中的连续条目定义。
   <p>如果您要更改该样式呈示的方式，请替换 DataGridSkin 类中的 <codeph>alternatingRowColorsBackground</codeph> 外观部件。如果您要为每个行指定背景，请直接初始化 <codeph>rowBackground</codeph> 外观部件。</p>
 
  </description>
<default>undefined
   
  </default>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style></styles><skinParts><SkinPart name="alternatingRowColorsBackground" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      用于呈示 <codeph>alternatingRowColors</codeph> 样式的 IVisualElement 类。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the alternatingRowColors style.</shortdesc></SkinPart><SkinPart name="caretIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      用于呈示网格的插入标记指示符的 IVisualElement 类。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the grid's caret indicator.</shortdesc></SkinPart><SkinPart name="columnHeaderGroup" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:GridColumnHeaderGroup">
<description>
      对显示列标题的 GridColumnHeaderGroup 对象的引用。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the GridColumnHeaderGroup object that displays the column headers.</shortdesc></SkinPart><SkinPart name="columnSeparator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      用于呈示列之间的垂直分隔符的 IVisualElement 类。 
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the vertical separator between columns.</shortdesc></SkinPart><SkinPart name="editorIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      用于在正在编辑的项呈示器后面呈示背景的 IVisualElement 类。仅当数据网格和列都是可编辑的，且列将 <codeph>rendererIsEditable</codeph> 设置为 <codeph>true</codeph> 时，才对项呈示器进行编辑。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render a background behind
      item renderers that are being edited.</shortdesc></SkinPart><SkinPart name="grid" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:Grid">
<description>
      对显示行和列的 Grid 控件的引用。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the Grid control that displays row and columns.</shortdesc></SkinPart><SkinPart name="hoverIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      用于提供悬浮提示反馈的 IVisualElement 类。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to provide hover feedback.</shortdesc></SkinPart><SkinPart name="rowBackground" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      用于呈示每一行的背景的 IVisualElement 类。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the background of each row.</shortdesc></SkinPart><SkinPart name="rowSeparator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      用于呈示标题行之间的水平分隔符的 IVisualElement 类。 
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render the horizontal separator between header rows.</shortdesc></SkinPart><SkinPart name="scroller" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" var_type="spark.components:Scroller">
<description>
      对将滚动条添加到 DataGrid 控件的外观类中的 Scroller 控件的引用。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A reference to the Scroller control in the skin class 
      that adds scroll bars to the DataGrid control.</shortdesc></SkinPart><SkinPart name="selectionIndicator" owner="spark.components:DataGrid" playerVersion="Flash10" required="false" type="mx.core.IVisualElement" var_type="mx.core:IFactory">
<description>
      用于呈示所选行或单元格的 IVisualElement 类。
      
      </description>

<playerversion>AIR 2.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      The IVisualElement class used to render selected rows or cells.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DataGrid&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:DataGrid 
    <strong>Properties</strong>
    columns="null"
    dataProvider="null"  
    dataTipField="null"  
    dataTipFunction="null"
    editable="false"
    editorColumnIndex="-1"
    editorRowIndex="-1"
    imeMode="null"
    itemEditor="null"
    itemRenderer="<i>DefaultGridItemRenderer</i>" 
    preserveSelection="true"
    requestedColumnCount="-1"
    requestedMaxRowCount="-1"
    requestedMinColumnCount="-1"
    requestedMinRowCount="-1"
    requestedRowCount="-1"
    requireSelection="false"
    resizeableColumns="true"
    rowHeight="<i>Calculated default</i>"
    selectedCell="null"
    selectedCells="<i>empty Vector.&lt;CellPosition&gt</i>"
    selectedIndex="null"
    selectedIndices="<i>empty Vector.&lt;CellPosition&gt</i>"
    selectedItem="null"
    selectedItems="<i>empty Vector.&lt;Object&gt</i>"
    selectionMode="singleRow"
    showDataTips="false"
    sortableColumns="true"
    typicalItem="null"
    variableRowHeight="false" 
 
    <strong>Styles</strong>
    alignmentBaseline="useDominantBaseline"
    baselineShift="0.0"
    cffHinting="horizontalStem"
    color="0"
    defaultGridItemEditor="null"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    dominantBaseline="auto"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="cff"
    stretchCursor="<i>cursorStretch symbol from Assets.swf</i>"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textJustify="interWord"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    verticalScrollPolicy="auto"
     <strong>Styles for the Spark Theme</strong>
    alternatingRowColors="undefined"
    borderAlpha="1.0"
    borderColor="0x696969"
    borderVisible="true"
    caretColor="0x0167FF"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    rollOverColor="0xCEDBEF"
    selectionColor="0xA8C6EE"
    symbolColor="0x000000"
 
    <strong>Styles for the Mobile Theme</strong>
    leading="0"
    letterSpacing="0"
    selectionColor="0xE0E0E0"
    symbolColor="0x000000"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    gridClick="<i>No default</i>"
    gridDoubleClick="<i>No default</i>"
    gridItemEditorSessionCancel="<i>No default</i>"
    gridItemEditorSessionSave="<i>No default</i>"
    gridItemEditorSessionStart="<i>No default</i>"
    gridItemEditorSessionStarting="<i>No default</i>"
    gridMouseDown="<i>No default</i>"
    gridMouseDrag="<i>No default</i>"
    gridMouseUp="<i>No default</i>"
    gridMouseRollOut="<i>No default</i>"
    gridMouseRollOver="<i>No default</i>"
    selectionChange="<i>No default</i>"
    selectionChanging="<i>No default</i>"
    sortChange="<i>No default</i>"
    sortChanging="<i>No default</i>" 
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableContainerBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataGrid 在可滚动网格上方显示一行列标题。网格排列为在行和列中排列的单个单元格的集合。DataGrid 控件设计为支持在大量行和列之间的平滑滚动。
   <p>Spark DataGrid 控件实现为包装 Spark Grid 控件的可更换外观的包装器。Grid 控件定义数据网格的列，以及 DataGrid 控件自身的大部分功能。</p>
   <p>DataGrid 外观负责布置网格、列标题和滚动条。外观也配置用于呈示可视元素（用作指示器、分隔符和背景）的图形元素。DataGrid 外观也定义默认项呈示器，用于显示每个单元格的内容。请参阅文档中相应呈示器类的信息以获得受支持样式的列表。</p>
   <p>不支持 DataGrid 项呈示器中的转换。GridItemRenderer 类已禁用了其 <codeph>transitions</codeph> 属性，因此对此进行设置也无效。</p>
   </apiDesc><example conref="DataGridSimpleExample.mxml"><swfblock conref="examples/DataGridSimpleExample.swf"/></example><example conref="DataGridMasterDetailExample.mxml"><swfblock conref="examples/DataGridMasterDetailExample.swf"/></example><example conref="DataGridTypicalItemExample.mxml"><swfblock conref="examples/DataGridTypicalItemExample.swf"/></example><example conref="DataGridRowHeightExample.mxml"><swfblock conref="examples/DataGridRowHeightExample.swf"/></example><example conref="DataGridSelectionExample.mxml"><swfblock conref="examples/DataGridSelectionExample.swf"/></example><example conref="DataGridInvalidateCellExample.mxml"><swfblock conref="examples/DataGridInvalidateCellExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#Grid"><linktext>spark.components.Grid</linktext></link><link href="spark.components.gridClasses.xml#GridColumn"><linktext>spark.components.gridClasses.GridColumn</linktext></link><link href="spark.skins.spark.xml#DataGridSkin"><linktext>spark.skins.spark.DataGridSkin</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL_gridItemEditorSessionCancel"><apiName>gridItemEditorSessionCancel</apiName><shortdesc>
  在不保存数据的情况下关闭项编辑器之后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_CANCEL</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在不保存数据的情况下关闭项编辑器之后分派。  
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE_gridItemEditorSessionSave"><apiName>gridItemEditorSessionSave</apiName><shortdesc>
  在项编辑器中的数据已保存到数据提供程序中，并且编辑器已经关闭之后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_SAVE</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在项编辑器中的数据已保存到数据提供程序中，并且编辑器已经关闭之后分派。  
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START_gridItemEditorSessionStart"><apiName>gridItemEditorSessionStart</apiName><shortdesc>
  在项编辑器打开之后立即分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_START</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在项编辑器打开之后立即分派。 
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING_gridItemEditorSessionStarting"><apiName>gridItemEditorSessionStarting</apiName><shortdesc>
  在请求新的项编辑器会话时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridItemEditorEvent.GRID_ITEM_EDITOR_SESSION_STARTING</apiEventType><adobeApiEventClassifier>spark.events.GridItemEditorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在请求新的项编辑器会话时分派。侦听器可以动态确定单元格是否可编辑，如果单元格不可编辑，则（通过调用 <codeph>preventDefault()</codeph> 方法）取消编辑。侦听器也可动态更改所使用的编辑器，方法是将其它项编辑器指定给列。
 
  <p>如果取消该事件，则不会创建项编辑器。</p>
   </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="spark.components.DataGrid.itemEditorInstance.xml"><linktext>spark.components.DataGrid.itemEditorInstance</linktext></link><link href="" invalidHref="flash.events.Event.xml"><linktext>flash.events.Event</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSortEvent.SORT_CHANGE_sortChange"><apiName>sortChange</apiName><shortdesc>
  对数据提供程序的集合进行排序后进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSortEvent.SORT_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridSortEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  对数据提供程序的集合进行排序后进行分派。通常当用户在列标题上释放鼠标按键且已对数据提供程序的集合进行排序后分派此事件。 
  
  <p>当用户与此控件交互时，将分派此事件。通过编程方式对数据提供程序的集合进行排序时，此组件不会分派 <codeph>sortChanging</codeph> 事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSortEvent.SORT_CHANGING_sortChanging"><apiName>sortChanging</apiName><shortdesc>
  对数据提供程序的集合进行排序之前进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSortEvent.SORT_CHANGING</apiEventType><adobeApiEventClassifier>spark.events.GridSortEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  对数据提供程序的集合进行排序之前进行分派。通常当用户在列标题上释放鼠标按键以请求控件基于列内容对网格内容进行排序时分派此事件。仅在列可排序且数据提供程序支持排序时才分派。
  
  <p>DataGrid 控件包含针对此事件的默认处理函数（实现单列排序以及将网格的 <codeph>columnHeaderGroup</codeph> 中的 <codeph>visibleSortIndices</codeph> 更新为 <codeph>columnIndices</codeph>）。</p>
 
  <p>通过调用 <codeph>preventDefault()</codeph> 方法以防止单列排序并设置事件的 <codeph>columnIndices</codeph> 和 <codeph>newSortFields</codeph> 参数以更改默认行为可以实现多列排序。<codeph>newSortFields</codeph> 应设置为所需的排序字段。<codeph>columnIndices</codeph> 应设置为在列标题栏中应具有可见排序指示符的列的索引。</p>
   
  <p>当用户与此控件交互时，将分派此事件。通过编程方式对数据提供程序的集合进行排序时，此组件不会分派 <codeph>sortChanging</codeph> 事件。 </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSelectionEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  在选定内容更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSelectionEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridSelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在选定内容更改时分派。 
  
  <p>当用户与此控件交互时，将分派此事件。以编程方式更改选定内容时，组件不会分派 <codeph>selectionChange</codeph> 事件。两种情况中任何一种情况下，它都会分派 <codeph>valueCommit</codeph> 事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridSelectionEvent.SELECTION_CHANGING_selectionChanging"><apiName>selectionChanging</apiName><shortdesc>
  所选内容即将更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridSelectionEvent.SELECTION_CHANGING</apiEventType><adobeApiEventClassifier>spark.events.GridSelectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  所选内容即将更改时分派。对事件调用 <codeph>preventDefault()</codeph> 方法可避免选择内容发生更改。
  
  <p>当用户与此控件交互时，将分派此事件。以编程方式更改选定内容时，组件不会分派 <codeph>selectionChanging</codeph> 事件。 </p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_DOUBLE_CLICK_gridDoubleClick"><apiName>gridDoubleClick</apiName><shortdesc>
  在单元格上双击鼠标时由网格外观部件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在单元格上双击鼠标时由 <codeph>grid</codeph> 外观部件分派。
   <p>要处理该事件，请将事件处理函数指定给 DataGrid 控件的 <codeph>grid</codeph> 外观部件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_CLICK_gridClick"><apiName>gridClick</apiName><shortdesc>
  在单元格上单击鼠标时由 grid 外观部件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_CLICK</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在单元格上单击鼠标时由 <codeph>grid</codeph> 外观部件分派。
   <p>要处理该事件，请将事件处理函数指定给 DataGrid 控件的 <codeph>grid</codeph> 外观部件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_ROLL_OUT_gridRollOut"><apiName>gridRollOut</apiName><shortdesc>
  在鼠标离开网格单元格时由网格外观部件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在鼠标离开网格单元格时由 <codeph>grid</codeph> 外观部件分派。
   <p>要处理该事件，请将事件处理函数指定给 DataGrid 控件的 <codeph>grid</codeph> 外观部件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_ROLL_OVER_gridRollOver"><apiName>gridRollOver</apiName><shortdesc>
  在鼠标指向网格单元格时由网格外观部件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在鼠标指向网格单元格时由 <codeph>grid</codeph> 外观部件分派。
   <p>要处理该事件，请将事件处理函数指定给 DataGrid 控件的 <codeph>grid</codeph> 外观部件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_UP_gridMouseUp"><apiName>gridMouseUp</apiName><shortdesc>
  释放鼠标按钮时，在 gridMouseDown 事件后由网格外观部件分派，即使鼠标不再位于 grid 中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_UP</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  释放鼠标按钮时，在 <codeph>gridMouseDown</codeph> 事件后由网格外观部件分派，即使鼠标不再位于 <codeph>grid</codeph> 中。
   <p>要处理该事件，请将事件处理函数指定给 DataGrid 控件的 <codeph>grid</codeph> 外观部件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_DRAG_gridMouseDrag"><apiName>gridMouseDrag</apiName><shortdesc>
  如果在释放按钮之前移动鼠标，则在 gridMouseDown 事件后由 grid 外观部件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DRAG</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  如果在释放按钮之前移动鼠标，则在 <codeph>gridMouseDown</codeph> 事件后由 <codeph>grid</codeph> 外观部件分派。
   <p>要处理该事件，请将事件处理函数指定给 DataGrid 控件的 <codeph>grid</codeph> 外观部件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridEvent.GRID_MOUSE_DOWN_gridMouseDown"><apiName>gridMouseDown</apiName><shortdesc>
  在网格单元格上按下鼠标按钮时由 grid 外观部件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridEvent.GRID_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>spark.events.GridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在网格单元格上按下鼠标按钮时由 <codeph>grid</codeph> 外观部件分派。
   <p>要处理该事件，请将事件处理函数指定给 DataGrid 控件的 <codeph>grid</codeph> 外观部件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:DataGrid_spark.events.GridCaretEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  当由于用户交互或以编程方式设置而导致插入标记位置、大小或可见性发生更改时，由网格外观部件分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.GridCaretEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.GridCaretEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当由于用户交互或以编程方式设置而导致插入标记位置、大小或可见性发生更改时，由 <codeph>grid</codeph> 外观部件分派。
   <p>要处理该事件，请将事件处理函数指定给 DataGrid 控件的 <codeph>grid</codeph> 外观部件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:DataGrid:DataGrid"><apiName>DataGrid</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:DataGrid:addSelectedCell"><apiName>addSelectedCell</apiName><shortdesc conref="spark.components.Grid#addSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>rowIndex</codeph> 或 <codeph>columnIndex</codeph> 无效，或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的列索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#addSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:addSelectedIndex"><apiName>addSelectedIndex</apiName><shortdesc conref="spark.components.Grid#addSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>index</codeph> 无效或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#addSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:clearSelection"><apiName>clearSelection</apiName><shortdesc conref="spark.components.Grid#clearSelection()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果选定内容更改，则为 <codeph>true</codeph>；如果之前没进行任何选择，则为 <codeph>false</codeph>。
        
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#clearSelection()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:protected:commitCaretPosition"><apiName>commitCaretPosition</apiName><shortdesc>
      更新网格的尖号位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newCaretRowIndex</apiItemName><apiType value="int"/><apiDesc>新尖号位置从零开始的 rowIndex。
     
      </apiDesc></apiParam><apiParam><apiItemName>newCaretColumnIndex</apiItemName><apiType value="int"/><apiDesc>新尖号位置从零开始的 columnIndex。如果 selectionMode 基于行，则为 -1。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      更新网格的尖号位置。如果插入标记位置更改，则 <codeph>grid</codeph> 外观部件分派 <codeph>caretChange</codeph> 事件。
           </apiDesc></apiOperationDetail><related-links><link href="spark.events.xml#GridCaretEvent/CARET_CHANGE"><linktext>spark.events.GridCaretEvent.CARET_CHANGE</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:protected:commitInteractiveSelection"><apiName>commitInteractiveSelection</apiName><shortdesc>
      为响应更改选定内容的用户输入（鼠标或键盘），该方法分派 selectionChanging 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果选定内容已提交或未发生更改，则为 <codeph>true</codeph>，如果选定内容已取消或由于出错无法提交（如索引超出范围或 <codeph>selectionEventKind</codeph> 与 <codeph>selectionMode</codeph> 不兼容），则为 <codeph>false</codeph>。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>selectionEventKind</apiItemName><apiType value="String"/><apiDesc>由用于指定正在提交的选定内容的 GridSelectionEventKind 类定义的常量。如果不为 null，则用于生成 <codeph>selectionChanging</codeph> 事件。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>如果 <codeph>selectionEventKind</codeph> 适用于一行或一个单元格，则返回数据提供程序中选定内容从零开始的 <codeph>rowIndex</codeph>。如果 <codeph>selectionEventKind</codeph> 适用于多个单元格，则返回单元格区域的原点从零开始的 <codeph>rowIndex</codeph>。默认值为 -1，表示此参数未被使用。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>如果 <codeph>selectionEventKind</codeph> 适用于单行或单个单元格，则返回选定内容从零开始的 <codeph>columnIndex</codeph>。如果 <codeph>selectionEventKind</codeph> 适用于多个单元格，则返回单元格区域的原点从零开始的 <codeph>columnIndex</codeph>。默认值为 -1，表示此参数未被使用。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiData>1</apiData><apiDesc>如果 <codeph>selectionEventKind</codeph> 适用于一个单元格区域，则返回单元格区域中的行数。默认值为 -1，表示此参数未被使用。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiData>1</apiData><apiDesc>如果 <codeph>selectionEventKind</codeph> 适用于一个单元格区域，则返回单元格区域中的列数。默认值为 -1，表示此参数未被使用。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      为响应更改选定内容的用户输入（鼠标或键盘），该方法分派 <codeph>selectionChanging</codeph> 事件。如果不取消该事件，则会提交选定内容更改，并分派 <codeph>selectionChange</codeph> 事件。不更新插入标记位置。要检测插入标记是否已更改，请使用 <codeph>caretChanged</codeph> 事件。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.events.xml#GridSelectionEvent/SELECTION_CHANGE"><linktext>spark.events.GridSelectionEvent.SELECTION_CHANGE</linktext></link><link href="spark.events.xml#GridSelectionEvent/SELECTION_CHANGING"><linktext>spark.events.GridSelectionEvent.SELECTION_CHANGING</linktext></link><link href="spark.events.xml#GridSelectionEventKind"><linktext>spark.events.GridSelectionEventKind</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:endItemEditorSession"><apiName>endItemEditorSession</apiName><shortdesc>
      关闭当前的活动编辑器，并（可选）通过调用项编辑器的 save() 方法保存编辑器的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果编辑器会话已保存，则为 <codeph>true</codeph>；如果保存被取消，则为 <codeph>false</codeph>。  
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cancel</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果为 <codeph>false</codeph>，则保存编辑器中的数据。否则，将废弃编辑器中的数据。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      关闭当前的活动编辑器，并（可选）通过调用项编辑器的 <codeph>save()</codeph> 方法保存编辑器的值。如果 <codeph>cancel</codeph> 参数为 <codeph>true</codeph>，将改为调用编辑器的 <codeph>cancel()</codeph> 方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:ensureCellIsVisible"><apiName>ensureCellIsVisible</apiName><shortdesc conref="spark.components.Grid#ensureCellIsVisible()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>项呈示器的单元格的从零开始的行索引，或 -1 以指定一列。
      
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>项呈示器的单元格的从零开始的列索引，或 -1 以指定一行。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#ensureCellIsVisible()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:invalidateCell"><apiName>invalidateCell</apiName><shortdesc conref="spark.components.Grid#invalidateCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>发生更改的单元格的从零开始的行索引，或为 -1。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>发生更改的单元格的从零开始的列索引，或为 -1。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#invalidateCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:invalidateTypicalItem"><apiName>invalidateTypicalItem</apiName><shortdesc conref="spark.components.Grid#invalidateTypicalItem()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#invalidateTypicalItem()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:removeSelectedCell"><apiName>removeSelectedCell</apiName><shortdesc conref="spark.components.Grid#removeSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>rowIndex</codeph> 或 <codeph>columnIndex</codeph> 无效，或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的列索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#removeSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:removeSelectedIndex"><apiName>removeSelectedIndex</apiName><shortdesc conref="spark.components.Grid#removeSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>index</codeph> 无效或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。 
           
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#removeSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.components.Grid#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果选定内容发生更改，则为 <codeph>true</codeph>。
        
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="spark.components.Grid#selectAll()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectCellRegion"><apiName>selectCellRegion</apiName><shortdesc conref="spark.components.Grid#selectCellRegion()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果单元格区域无效或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格区域原点的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格区域原点的从零开始的列索引。
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="uint"/><apiDesc>要包含在单元格区域中的行数，从 <codeph>rowIndex</codeph> 开始。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="uint"/><apiDesc>要包含在单元格区域中的列数，从 <codeph>columnIndex</codeph> 开始。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectCellRegion()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectIndices"><apiName>selectIndices</apiName><shortdesc conref="spark.components.Grid#selectIndices()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果所有索引都无效或 <codeph>startRowIndex</codeph> 大于 <codeph>endRowIndex</codeph> 或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>选定内容中第一行的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>选定内容中的行数。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectIndices()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsCellRegion"><apiName>selectionContainsCellRegion</apiName><shortdesc conref="spark.components.Grid#selectionContainsCellRegion()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果当前选定内容包含单元格区域中的所有单元格，则返回 <codeph>true</codeph>。
     
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的列索引。
      
      </apiDesc></apiParam><apiParam><apiItemName>rowCount</apiItemName><apiType value="int"/><apiDesc>要包含在单元格区域中的行数，从 <codeph>rowIndex</codeph> 开始。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnCount</apiItemName><apiType value="int"/><apiDesc>要包含在单元格区域中的列数，从 <codeph>columnIndex</codeph> 开始。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsCellRegion()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsCell"><apiName>selectionContainsCell</apiName><shortdesc conref="spark.components.Grid#selectionContainsCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果当前选定内容包含单元格，则返回 <codeph>true</codeph>。
     
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的列索引。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsIndex"><apiName>selectionContainsIndex</apiName><shortdesc conref="spark.components.Grid#selectionContainsIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果选定内容包含此行，则返回 <codeph>true</codeph>。
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行的从零开始的行索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:selectionContainsIndices"><apiName>selectionContainsIndices</apiName><shortdesc conref="spark.components.Grid#selectionContainsIndices()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果当前选定内容包含这些行，则返回 <codeph>true</codeph>。
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndices</apiItemName><apiType value="Vector$int"/><apiDesc>要包含在选定内容中的从零开始的行索引的矢量。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#selectionContainsIndices()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:setSelectedCell"><apiName>setSelectedCell</apiName><shortdesc conref="spark.components.Grid#setSelectedCell()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>rowIndex</codeph> 或 <codeph>columnIndex</codeph> 无效，或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。     
      
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的列索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#setSelectedCell()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:setSelectedIndex"><apiName>setSelectedIndex</apiName><shortdesc conref="spark.components.Grid#setSelectedIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果未引发任何错误，则为 <codeph>true</codeph>。如果 <codeph>index</codeph> 无效，或 <codeph>selectionMode</codeph> 无效，则为 <codeph>false</codeph>。 
        
      </apiDesc></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>单元格的从零开始的行索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.components.Grid#setSelectedIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:DataGrid:sortByColumns"><apiName>sortByColumns</apiName><shortdesc>
      按照一列或多列对 DataGrid 排序，并刷新显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果已使用提供的列索引对 <codeph>dataProvider</codeph> 进行排序，则为 <codeph>true</codeph>。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>columnIndices</apiItemName><apiType value="Vector$int"/><apiDesc>对 <codeph>dataProvider</codeph> 进行排序所依据的列索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>isInteractive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果为 true，将分派 <codeph>GridSortEvent.SORT_CHANGING</codeph> 和 <codeph>GridSortEvent.SORT_CHANGE</codeph> 事件，且列标题组 <codeph>visibleSortIndicatorIndices</codeph> 将更新为 <codeph>columnIndices</codeph>（如果 <codeph>GridSortEvent.SORT_CHANGING</codeph> 事件尚未取消）。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      按照一列或多列对 DataGrid 排序，并刷新显示。
     
      <p>如果 <codeph>dataProvider</codeph> 为 ICollectionView，则其 <codeph>sort</codeph> 属性会设置为某一个值，具体取决于每个列的 <codeph>dataField</codeph>、<codeph>sortCompareFunction</codeph> 和 <codeph>sortDescending</codeph> 标志。然后，会调用数据提供程序的 <codeph>refresh()</codeph> 方法。 </p>
      
      <p>如果 <codeph>dataProvider</codeph> 不为 ICollectionView，则该方法不起作用。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#DataGrid/dataProvider"><linktext>spark.components.DataGrid.dataProvider</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortCompareFunction"><linktext>spark.components.gridClasses.GridColumn.sortCompareFunction</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortDescending"><linktext>spark.components.gridClasses.GridColumn.sortDescending</linktext></link><link href="spark.components.gridClasses.xml#GridColumn/sortField"><linktext>spark.components.gridClasses.GridColumn.sortField</linktext></link><link href="" invalidHref="spark.components.gridClasses.xml#GridColumnHeaderGroup/visibleSortIndicatorIndices"><linktext>spark.components.gridClasses.GridColumnHeaderGroup.visibleSortIndicatorIndices</linktext></link><link href="spark.events.xml#GridSortEvent"><linktext>spark.events.GridSortEvent</linktext></link></related-links></apiOperation><apiOperation id="spark.components:DataGrid:startItemEditorSession"><apiName>startItemEditorSession</apiName><shortdesc>
      对网格中的所选单元格启动编辑器会话。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果编辑器会话已启动，则为 <codeph>true</codeph>。如果取消编辑器会话或无法启动编辑器会话，则返回 <codeph>false</codeph>。请注意，无法在不可见的列中启动编辑器会话。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>要编辑的单元格的从零开始的行索引。
           </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>要编辑的单元格的从零开始的列索引。  
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      对网格中的所选单元格启动编辑器会话。此方法不检查 DataGrid 和 GridColumn 的 editable 属性，该属性可防止用户界面启动编辑器会话。<codeph>startItemEditorSession</codeph> 事件在创建项编辑器之前分派。这样会允许侦听器动态更改指定单元格的项编辑器。也可以调用 <codeph>preventDefault()</codeph> 方法来取消事件，以防止创建编辑器会话。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components:DataGrid:columnsLength:get"><apiName>columnsLength</apiName><shortdesc>
      如果列 IList 已指定，将返回 columns.length 值，否则为 0。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      如果列 IList 已指定，将返回 <codeph>columns.length</codeph> 值，否则为 0。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:columns:get"><apiName>columns</apiName><shortdesc conref="spark.components.Grid#columns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#columns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataProviderLength:get"><apiName>dataProviderLength</apiName><shortdesc>
      如果 dataProvider IList 已指定，将返回 dataProvider.length 值，否则为 0。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      如果 dataProvider IList 已指定，将返回 <codeph>dataProvider.length</codeph> 值，否则为 0。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataProvider:get"><apiName>dataProvider</apiName><shortdesc conref="spark.components.Grid#dataProvider">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataProviderChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.collections:IList"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataProvider">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataTipField:get"><apiName>dataTipField</apiName><shortdesc conref="spark.components.Grid#dataTipField">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFieldChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataTipField">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:dataTipFunction:get"><apiName>dataTipFunction</apiName><shortdesc conref="spark.components.Grid#dataTipFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataTipFunctionChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#dataTipFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editable:get"><apiName>editable</apiName><shortdesc>
      GridColumn editable 属性的默认值，指示是否可以编辑对应单元格的数据提供程序项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      GridColumn <codeph>editable</codeph> 属性的默认值，指示是否可以编辑对应单元格的数据提供程序项。如果为 <codeph>true</codeph>，单击所选单元格将打开项编辑器。您可以通过处理 <codeph>startItemEditorSession</codeph> 事件来启用或禁用编辑每个单元格（而不是每个列）。在事件处理函数中，添加所需逻辑以确定单元格是否可编辑。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editorColumnIndex:get"><apiName>editorColumnIndex</apiName><shortdesc>
      正在编辑的单元格的从零开始的列索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      正在编辑的单元格的从零开始的列索引。如果没有正在编辑任何单元格，值为 -1。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:editorRowIndex:get"><apiName>editorRowIndex</apiName><shortdesc>
      正在编辑的单元格的从零开始的行索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      正在编辑的单元格的从零开始的行索引。如果没有正在编辑任何单元格，值为 -1。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件获得焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件获得焦点时是否应启用 IME。如果项编辑器已打开，则会相应设置该属性。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      GridColumn imeMode 属性的默认值，用于指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      GridColumn <codeph>imeMode</codeph> 属性的默认值，用于指定 IME（输入法编辑器）模式。IME 使用户能够用中文、日文和韩文输入文本。Flex 在该控件获得焦点时设置指定的 IME 模式，并在该控件丢失焦点时将其设置回先前的值。
          <p>flash.system.IMEConversionMode 类定义此属性的有效值的常量。您还可以指定 <codeph>null</codeph> 不指定任何 IME 模式。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:itemEditorInstance:get"><apiName>itemEditorInstance</apiName><shortdesc>
      对项目编辑器的当前活动实例（如果有）的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.gridClasses:IGridItemEditor</apiValueClassifier></apiValueDef><apiDesc>
      对项目编辑器的当前活动实例（如果有）的引用。
           <p>若要在编辑项目时访问项目编辑器实例和新项目值，则应使用 <codeph>itemEditorInstance</codeph> 属性。在分派 <codeph>itemEditorSessionStart</codeph> 事件之前，<codeph>itemEditorInstance</codeph> 属性无效。</p>
           <p><codeph>DataGridColumn.itemEditor</codeph> 属性定义项目编辑器的类，从而定义项目编辑器实例的数据类型。</p>
           <p>不要在 MXML 中设置此属性。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:itemEditor:get"><apiName>itemEditor</apiName><shortdesc>
      GridColumn itemEditor 属性的默认值，用于指定创建项编辑器实例所用的 IGridItemEditor 类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemEditorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null.
           </apiDefaultValue></apiValueDef><apiDesc>
      GridColumn <codeph>itemEditor</codeph> 属性的默认值，用于指定创建项编辑器实例所用的 IGridItemEditor 类。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#DataGrid/dataField"><linktext>dataField</linktext></link><link href="spark.components.gridClasses.xml#IGridItemEditor"><linktext>spark.components.gridClasses.IGridItemEditor</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc conref="spark.components.Grid#itemRenderer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemRendererChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>DefaultGridItemRenderer
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#itemRenderer">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:preserveSelection:get"><apiName>preserveSelection</apiName><shortdesc conref="spark.components.Grid#preserveSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#preserveSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.components.Grid#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMaxRowCount:get"><apiName>requestedMaxRowCount</apiName><shortdesc conref="spark.components.Grid#requestedMaxRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>10
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMaxRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMinColumnCount:get"><apiName>requestedMinColumnCount</apiName><shortdesc conref="spark.components.Grid#requestedMinColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMinColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedMinRowCount:get"><apiName>requestedMinRowCount</apiName><shortdesc conref="spark.components.Grid#requestedMinRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedMinRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.components.Grid#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:requireSelection:get"><apiName>requireSelection</apiName><shortdesc conref="spark.components.Grid#requireSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#requireSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:resizableColumns:get"><apiName>resizableColumns</apiName><shortdesc conref="spark.components.Grid#resizableColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="resizableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#resizableColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.components.Grid#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.components.Grid#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedCell:get"><apiName>selectedCell</apiName><shortdesc conref="spark.components.Grid#selectedCell">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:CellPosition</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedCell">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedCells:get"><apiName>selectedCells</apiName><shortdesc conref="spark.components.Grid#selectedCells">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$spark.components.gridClasses:CellPosition"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedCells">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc conref="spark.components.Grid#selectedIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc conref="spark.components.Grid#selectedIndices">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$int"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedIndices">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedItem:get"><apiName>selectedItem</apiName><shortdesc conref="spark.components.Grid#selectedItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectedItem">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectedItems:get"><apiName>selectedItems</apiName><shortdesc conref="spark.components.Grid#selectedItems">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Object"/></apiValueDef><apiDesc conref="spark.components.Grid#selectedItems">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectionLength:get"><apiName>selectionLength</apiName><shortdesc conref="spark.components.Grid#selectionLength">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="spark.components.Grid#selectionLength">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:selectionMode:get"><apiName>selectionMode</apiName><shortdesc conref="spark.components.Grid#selectionMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionModeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>GridSelectionMode.SINGLE_ROW
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#selectionMode">
      </apiDesc></apiValueDetail><related-links><link href="spark.components.gridClasses.xml#GridSelectionMode"><linktext>spark.components.gridClasses.GridSelectionMode</linktext></link></related-links></apiValue><apiValue id="spark.components:DataGrid:showDataTips:get"><apiName>showDataTips</apiName><shortdesc conref="spark.components.Grid#showDataTips">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showDataTipsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#showDataTips">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:sortableColumns:get"><apiName>sortableColumns</apiName><shortdesc>
      指定用户是否可以交互对列进行排序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sortableColumnsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用户是否可以交互对列进行排序。如果为 <codeph>true</codeph>，用户可以通过单击列标题，按列的数据字段对数据提供程序进行排序。如果为 <codeph>true</codeph>，则单个列可以将其 <codeph>sortable</codeph> 属性设置为 <codeph>false</codeph>，以防止用户按该列排序。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:typicalItem:get"><apiName>typicalItem</apiName><shortdesc conref="spark.components.Grid#typicalItem">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="typicalItemChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#typicalItem">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:DataGrid:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc conref="spark.components.Grid#variableRowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="variableRowHeightChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.Grid#variableRowHeight">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
  RadioButtonGroup 组件定义一组 RadioButton 组件，这些组件相互排斥；因此，用户每次只能选择一个 RadioButton 组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:RadioButtonGroup&gt;</code> tag inherits all of the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:RadioButtonGroup
    <strong>Properties</strong>
    enabled="true"
    selectedValue="null"
    selection="null"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    itemClick="<i>No default</i>"
    valueCommit="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  RadioButtonGroup 组件定义一组 RadioButton 组件，这些组件相互排斥；因此，用户每次只能选择一个 RadioButton 组件。使用 <codeph>&lt;s:RadioButtonGroup></codeph> 标签定义组名称时，需要使用 <codeph>id</codeph> 属性。添加到该组中的任何 <codeph>&lt;s:RadioButton></codeph> 组件都将拥有此组名称。
 
  <p>注意，RadioButtonGroup 组件是 EventDispatcher 的子类，而不是 UIComponent 的子类，并实现 IMXMLObject 接口。所有其它 Flex 可视组件实现 IVisualElement 接口。RadioButtonGroup 组件声明必须包含在 <codeph>&lt;Declarations></codeph> 标签内，因为不可以将该组件声明指定给 IVisualElement。</p> 
 
  <p>要在基于列表的组件（如 List 或 DataGrid）中使用此组件，请创建项呈示器。有关创建项呈示器的信息，请参阅<xref href="http://help.adobe.com/en_US/flex/using/WS4bebcd66a74275c3-fc6548e124e49b51c4-8000.html">自定义 Spark 项呈示器</xref>。 </p>
 
  </apiDesc><example conref="RadioButtonGroupExample.mxml"><swfblock conref="examples/RadioButtonGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  当以编程方式或通过用户交互更改值时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当以编程方式或通过用户交互更改值时分派。
 
  <p>由于以编程方式进行更改会触发此事件，所以请确保任何 <codeph>valueCommit</codeph> 事件处理函数都不会更改可引发另一 <codeph>valueCommit</codeph> 事件的值。例如，不要在 <codeph>valueCommit</codeph> 事件处理函数中更改 <codeph>selectedValue</codeph> 属性或 <codeph>selection</codeph> 属性。 </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  用户在组中选择 RadioButton 组件时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  用户在组中选择 RadioButton 组件时分派。您也可以为各个 RadioButton 组件设置处理函数。仅当用户使用鼠标与单选按钮交互时，才分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:RadioButtonGroup_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  此组中所选 RadioButton 组件的值更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  此组中所选 RadioButton 组件的值更改时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:RadioButtonGroup:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>document</apiItemName><apiType value="mx.core:IFlexDisplayObject"/><apiData>null</apiData><apiDesc>在类扩展 EventDispatcher 的简单情况下，不使用 <codeph>document</codeph> 参数。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links></apiConstructor><apiOperation id="spark.components:RadioButtonGroup:getRadioButtonAt"><apiName>getRadioButtonAt</apiName><shortdesc>
      返回指定索引处的 RadioButton 组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>当索引位于 0 和 <codeph>numRadioButtons</codeph> 之间时，指定的 RadioButton 组件为 1。如果索引无效，则返回 <codeph>null</codeph>。
     
      </apiDesc><apiOperationClassifier>spark.components:RadioButton</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>RadioButtonGroup 中的 RadioButton 的从零开始的索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定索引处的 RadioButton 组件。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="spark.components.numRadioButtons.xml"><linktext>numRadioButtons</linktext></link></related-links></apiOperation><apiOperation id="spark.components:RadioButtonGroup:initialized"><apiName>initialized</apiName><shortdesc>
      IMXMLObject.initialized() 方法的实现支持延迟的实例化。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>创建此对象的 MXML 文档。
     
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>文档用来引用此对象的标识符。如果此对象是文档上的深层属性，则 <codeph>id</codeph> 为 null。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>IMXMLObject.initialized()</codeph> 方法的实现支持延迟的实例化。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.IMXMLObject.xml"><linktext>mx.core.IMXMLObject</linktext></link></related-links></apiOperation><apiValue id="spark.components:RadioButtonGroup:enabled:get"><apiName>enabled</apiName><shortdesc>
      确定是否允许选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      确定是否允许选择。请注意，返回的值仅反映对 <codeph>RadioButtonGroup</codeph> 显式设置的值，而不反映对各个 RadioButton 显式设置的任何值。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:numRadioButtons:get"><apiName>numRadioButtons</apiName><shortdesc>
      属于此 RadioButtonGroup 的 RadioButton 数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="numRadioButtonsChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>"0"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      属于此 RadioButtonGroup 的 RadioButton 数。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selectedValue:get"><apiName>selectedValue</apiName><shortdesc>
      组中所选 RadioButton 组件的 Value 属性（如果未设置），否则为所选 RadioButton 组件的 Label 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      组中所选 RadioButton 组件的 <codeph>value</codeph> 属性（如果未设置），否则为所选 RadioButton 组件的 <codeph>label</codeph> 属性。如果未选择任何 RadioButton，则此属性为 <codeph>null</codeph>。
     
      <p>如果设置了 <codeph>selectedValue</codeph>，则 Flex 会选择 <codeph>value</codeph> 或 <codeph>label</codeph> 属性与此值匹配的第一个 RadioButton 组件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:RadioButtonGroup:selection:get"><apiName>selection</apiName><shortdesc>
      包含对组中当前所选 RadioButton 组件的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components:RadioButton</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      包含对组中当前所选 RadioButton 组件的引用。您只能在 ActionScript 中访问此属性；在 MXML 中此属性不可设置。将此属性设置为 <codeph>null</codeph> 可取消对当前所选 RadioButton 组件的选择。不分派 change 事件。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
  VScrollBar（垂直 ScrollBar）控件可以在因数据太多而不能在显示区域中以垂直方向完全显示时控制显示的数据部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[ <p>The <code>&lt;s:VScrollBar&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VScrollBar
    <strong>Properties</strong>
    viewport=""
  /&gt;
  </pre>
   
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ScrollBarBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  VScrollBar（垂直 ScrollBar）控件可以在因数据太多而不能在显示区域中以垂直方向完全显示时控制显示的数据部分。
 
  <p>虽然 VScrollBar 控件可以单独使用，但通常将它与其他组件一起使用来提供滚动功能。</p>
   <p>VScrollBar 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>15 个像素宽 × 85 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>15 个像素宽 × 15 个像素高</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row><row>
           <entry>默认外观类</entry>
           <entry>spark.skins.spark.VScrollBarSkin
              <p>spark.skins.spark.VScrollBarThumbSkin</p>
              <p>spark.skins.spark.VScrollBarTrackSkin</p></entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VScrollBarExample.mxml"><swfblock conref="examples/VScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#VScrollBarSkin"><linktext>spark.skins.spark.VScrollBarSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links><adobeApiEvent id="spark.components:VScrollBar_mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING_mouseWheelChanging"><apiName>mouseWheelChanging</apiName><shortdesc>
  在 verticalScrollPosition 由于 mouseWheel 事件而发生变化时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在 <codeph>verticalScrollPosition</codeph> 由于 <codeph>mouseWheel</codeph> 事件而发生变化时分派。
 
  <p>默认行为会按“步长”的事件 <codeph>delta</codeph> 数量进行垂直滚动。视口的 <codeph>getVerticalScrollPositionDelta</codeph> 方法使用 <codeph>UP</codeph> 或 <codeph>DOWN</codeph>（具体取决于滚动方向）来确定步长的高度。</p>
 
  <p>对事件调用 <codeph>preventDefault()</codeph> 方法可避免垂直滚动位置发生更改。否则，如果您修改事件的 <codeph>delta</codeph> 属性，则该值会用作垂直“步长”的数量。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VScrollBar:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VScrollBar:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      如果 increase 为 true，则增加页数 value；如果 increase 为 false，则减少页数 value。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>是增加 (<codeph>true</codeph>) 还是减少 (<codeph>false</codeph>) <codeph>value</codeph>。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>increase</codeph> 为 <codeph>true</codeph>，则增加页数 <codeph>value</codeph>；或者如果 <codeph>increase</codeph> 为 <codeph>false</codeph>，则减少页数 <codeph>value</codeph>。增加滚动条的 <codeph>value</codeph> 将向上滚动视域。减少该 <codeph>value</codeph> 将向下滚动视域。
      
      <p>如果设置了 <codeph>viewport</codeph> 属性，则使用该属性的 <codeph>getVerticalScrollPositionDelta()</codeph> 方法计算页增量大小。如果 <codeph>viewport</codeph> 为 null，则使用滚动条的 <codeph>pageSize</codeph> 属性。</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase/changeValueByPage()"><linktext>spark.components.supportClasses.ScrollBarBase.changeValueByPage()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      如果 viewport 为非 null，将通过滚动视域更改垂直滚动位置以实现上移行或下移行的操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>行滚动是向上 (<codeph>true</codeph>) 还是向下 (<codeph>false</codeph>)。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果 <codeph>viewport</codeph> 为非 null，将通过滚动视域更改垂直滚动位置以实现上移行或下移行的操作。此方法通过使用 <codeph>flash.ui.Keyboard.RIGHT</codeph> 或 <codeph>flash.ui.Keyboard.LEFT</codeph> 调用 <codeph>IViewport.getVerticalScrollPositionDelta()</codeph> 方法来计算要滚动的数量。它接着调用 <codeph>setValue()</codeph> 方法以将 <codeph>IViewport.verticalScrollPosition</codeph> 属性设置为相应的值。
           <p>如果 <codeph>viewport</codeph> 为 null，则调用 <codeph>changeValueByStep()</codeph> 方法会更改垂直滚动位置以实现上移行或下移行的操作。</p>
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/changeValueByStep()"><linktext>spark.components.supportClasses.Range.changeValueByStep()</linktext></link><link href="spark.components.supportClasses.xml#Range/setValue()"><linktext>spark.components.supportClasses.Range.setValue()</linktext></link><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.core.xml#IViewport/verticalScrollPosition"><linktext>spark.core.IViewport.verticalScrollPosition</linktext></link><link href="spark.core.xml#IViewport/getVerticalScrollPositionDelta()"><linktext>spark.core.IViewport.getVerticalScrollPositionDelta()</linktext></link></related-links></apiOperation><apiOperation id="spark.components:VScrollBar:protected:setValue"><apiName>setValue</apiName><shortdesc>
      更新 value 属性，并且如果 viewport 为非 null，则将其 verticalScrollPosition 设置为 value。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc><codeph>value</codeph> 属性的新值。 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      更新 value 属性，并且如果 <codeph>viewport</codeph> 为非 null，则将其 <codeph>verticalScrollPosition</codeph> 设置为 <codeph>value</codeph>。
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VScrollBar/viewport"><linktext>视域</linktext></link></related-links></apiOperation><apiValue id="spark.components:VScrollBar:viewport:set"><apiName>viewport</apiName><shortdesc>
      由此滚动条控制的视域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      由此滚动条控制的视域。
      
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
  VideoDisplay 类是一个无镶边的视频播放器，它支持渐进式下载、多比特率和流视频。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><discouragedForProfiles><DiscouragedForProfile name="mobileDevice" owner="spark.components:VideoDisplay">
<description>
 因为该组件不定义手机主题的外观，所以 Adobe 不建议您在手机应用程序中使用该组件。或者，您可以为该组件定义自己的手机外观。有关更多信息，请参阅<xref href="http://help.adobe.com/en_US/flex/mobileapps/WS19f279b149e7481c698e85712b3011fe73-8000.html">手机外观设计的基础知识</xref>。
 </description>
	</DiscouragedForProfile></discouragedForProfiles><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:VideoDisplay&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:VideoDisplay 
    <strong>Properties</strong>
    autoDisplayFirstFrame="true"
    autoPlay="true"
    autoRewind="true"
    loop="false"
    muted="false"
    pauseWhenHidden="true"
    scaleMode="letterbox"
    source=""
    volume="1"
  
    <strong>Events</strong>
    bytesLoadedChange="<i>No default</i>"
    complete="<i>No default</i>"
    currentTimeChange="<i>No default</i>"
    durationChange="<i>No default</i>"
    mediaPlayerStateChange="<i>No default</i>"
  
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  VideoDisplay 类是一个无镶边的视频播放器，它支持渐进式下载、多比特率和流视频。
 
  <p><codeph>VideoDisplay</codeph> 是不支持外观设置的无镶边版本。当不希望用户与控件交互时，该类非常有用。</p>
 
  <p><codeph>VideoPlayer</codeph> 是可设置外观的版本。</p>
   <p>VideoDisplay 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>如果不包含内容，则为 0 个像素宽 × 0 个像素高；如果包含内容，则为视频的宽度和高度</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 个像素宽 × 10000 个像素高</entry>
        </row></tbody></tgroup></adobetable>
   </apiDesc><example conref="VideoDisplayExample.mxml"><swfblock conref="examples/VideoDisplayExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#VideoPlayer"><linktext>spark.components.VideoPlayer</linktext></link></related-links><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE_mediaPlayerStateChange"><apiName>mediaPlayerStateChange</apiName><shortdesc>
  在 MediaPlayer 的状态发生变化时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.MediaPlayerStateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在 MediaPlayer 的状态发生变化时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.DURATION_CHANGE_durationChange"><apiName>durationChange</apiName><shortdesc>
  在媒体的 duration 属性发生变化时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.DURATION_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在媒体的 <codeph>duration</codeph> 属性发生变化时分派。
 
  <p>将源设置为 null 或发生播放错误时，可能无法分派此事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE_currentTimeChange"><apiName>currentTimeChange</apiName><shortdesc>
  在 MediaPlayer 的 currentTime 属性发生变化时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.CURRENT_TIME_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在 MediaPlayer 的 <codeph>currentTime</codeph> 属性发生变化时分派。
 
  <p>将源设置为 null 或发生播放错误时，可能无法分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.TimeEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  在播放头已达到可播放媒体的持续时间时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.TimeEvent.COMPLETE</apiEventType><adobeApiEventClassifier>org.osmf.events.TimeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在播放头已达到可播放媒体的持续时间时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components:VideoDisplay_org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE_bytesLoadedChange"><apiName>bytesLoadedChange</apiName><shortdesc>
  在下载操作进行过程中接收到数据时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>org.osmf.events.LoadEvent.BYTES_LOADED_CHANGE</apiEventType><adobeApiEventClassifier>org.osmf.events.LoadEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在下载操作进行过程中接收到数据时分派。仅当通过从服务器直接下载某个视频（通常通过发出 HTTP 请求）来播放它时，才能分派此事件。从特定媒体服务器（如 Flash Media Server）播放视频时，不会分派此事件。
 
  <p>将源设置为 null 或发生播放错误时，可能无法分派此事件。</p>
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components:VideoDisplay:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
       
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components:VideoDisplay:pause"><apiName>pause</apiName><shortdesc>
      在不移动播放头情况下暂停回放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在不移动播放头情况下暂停回放。如果回放已经暂停或停止，此方法无效。  
           <p>若要再次开始回放，请调用 <codeph>play()</codeph> 方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:play"><apiName>play</apiName><shortdesc>
      让视频播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      让视频播放。可以在视频暂停、停止或正在播放时调用。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:seek"><apiName>seek</apiName><shortdesc>
      搜索到视频中的给定时间。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>搜索时间（以秒为单位）。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      搜索到视频中的给定时间。如果视频正在播放，则从该点继续播放。如果视频已暂停，则搜索到该点并保持暂停。如果视频已停止，则搜索到该点并进入暂停状态。此方法对实时视频流不起作用。
           <p>如果时间小于 0 或 NaN，则会引发异常。如果时间已超过流末尾，或超过到目前为止已下载的文件的数量，则会尝试搜索，并在失败时进行恢复。</p>
     
      <p><codeph>currentTime</codeph> 属性可能无法在调用 <codeph>seek()</codeph> 之后立即获得预期值。对于渐进式下载，由于只能搜索关键帧，因此搜索将转到指定时间后第一个关键帧的时间。</p>
      
      <p><b>注意</b>：对于流式下载，搜索总是转到指定的确切时间，即使 FLV 源文件在此处没有关键帧也是如此。</p>
           <p>搜索是异步搜索，因此如果调用 <codeph>seek()</codeph> 方法，<codeph>currentTime</codeph> 不会立即更新。 </p>
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components:VideoDisplay:stop"><apiName>stop</apiName><shortdesc>
      停止视频回放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      停止视频回放。如果 <codeph>autoRewind</codeph> 设置为 <codeph>true</codeph>，则后退到第一帧。如果视频已经停止，则此方法没有任何作用。若要再次开始播放，请调用 <codeph>play()</codeph>。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#VideoDisplay/autoRewind"><linktext>autoRewind</linktext></link><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiValue id="spark.components:VideoDisplay:autoDisplayFirstFrame:get"><apiName>autoDisplayFirstFrame</apiName><shortdesc>
      如果 autoPlay = false，则 autoDisplayFirstFrame 控制是否在设置 source 时加载视频。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>autoPlay = false</codeph>，则 <codeph>autoDisplayFirstFrame</codeph> 控制是否在设置 <codeph>source</codeph> 时加载视频。如果将 <codeph>autoDisplayFirstFrame</codeph> 设置为 <codeph>true</codeph>，则将加载视频的第一帧，并将视频调整为合适的大小。如果将 <codeph>autoDisplayFirstFrame</codeph> 设置为 <codeph>false</codeph>，则不会与 source 进行连接，不会显示第一帧，且在某个用户尝试播放视频前不会确定视频大小。
     
      <p>如果 <codeph>autoPlay = true</codeph>，则忽略此标志。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoPlay:get"><apiName>autoPlay</apiName><shortdesc>
      指定设置 source 属性后视频是否应立即开始播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定设置 <codeph>source</codeph> 属性后视频是否应立即开始播放。如果为 <codeph>true</codeph>，则视频文件立即开始缓冲并播放。
           <p>即使 <codeph>autoPlay</codeph> 设置为 <codeph>false</codeph>，在调用 <codeph>initialize()</codeph> 方法后 Flex 也会开始加载视频。对于 Flash Media Server，这意味着创建流并加载要显示的第一个帧。对于 HTTP 下载，Flex 则开始下载流并显示第一帧。</p>
     
      <p>如果 <codeph>playWhenHidden</codeph> 设置为 <codeph>false</codeph>，则 <codeph>autoPlay</codeph> 在视频回到舞台且启用并可见时也会影响发生的内容。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
      指定当播放停止时是否应通过调用 stop() 方法或到达流末尾使 FLV 文件后退到第一帧。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定当播放停止时是否应通过调用 <codeph>stop()</codeph> 方法或到达流末尾使 FLV 文件后退到第一帧。
           <p>此属性对实时流视频不起作用。</p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
      已下载到应用程序中的数据的字节数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      已下载到应用程序中的数据的字节数。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
      正下载到应用程序中的数据的总大小（以字节为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      正下载到应用程序中的数据的总大小（以字节为单位）。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:currentTime:get"><apiName>currentTime</apiName><shortdesc>
      视频开始播放后，playhead 的当前时间（以秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      视频开始播放后，playhead 的当前时间（以秒为单位）。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:duration:get"><apiName>duration</apiName><shortdesc>
      回放视频的持续时间（以秒为单位）
           </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      回放视频的持续时间（以秒为单位）
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:loop:get"><apiName>loop</apiName><shortdesc>
      指示回放已完成之后媒体是否应该重新播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指示回放已完成之后媒体是否应该重新播放。<codeph>loop</codeph> 属性优先于 <codeph>autoRewind</codeph> 属性，因此如果将 loop 设置为 <codeph>true</codeph>，则会忽略 <codeph>autoRewind</codeph> 属性。 
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:mediaPlayerState:get"><apiName>mediaPlayerState</apiName><shortdesc>
      视频的当前状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>uninitialized
     
      </apiDefaultValue></apiValueDef><apiDesc>
      视频的当前状态。有关可用值，请参阅 org.osmf.media.MediaPlayerState。
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.media.MediaPlayerState.xml"><linktext>org.osmf.media.MediaPlayerState</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:muted:get"><apiName>muted</apiName><shortdesc>
      设置为 true 会使视频静音，设置为 false 将取消视频的静音。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      设置为 <codeph>true</codeph> 会使视频静音，设置为 <codeph>false</codeph> 将取消视频的静音。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:pauseWhenHidden:get"><apiName>pauseWhenHidden</apiName><shortdesc>
      控制视频在“隐藏”时是否继续播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      控制视频在“隐藏”时是否继续播放。如果对视频或其祖代之一将 <codeph>visible</codeph> 设置为 <codeph>false</codeph> 或将视频从显示列表中去掉，则将“隐藏”该视频。如果设置为 <codeph>true</codeph>，视频将暂停播放，直到视频再次可见为止。如果设置为 <codeph>false</codeph>，则视频在隐藏时将继续播放。
     
      <p>如果禁用视频（或该视频的父代之一），该视频也将暂停，但如果重新启用该视频，则不会重新播放它。此行为并非通过 <codeph>pauseWhenHidden</codeph> 进行控制；它将在 VideoDisplay 组件中定义。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:playing:get"><apiName>playing</apiName><shortdesc>
      如果视频正在播放或正在尝试播放，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="mediaPlayerStateChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果视频正在播放或正在尝试播放，则包含 <codeph>true</codeph>。
      
      <p>因为该视频可能正在搜索或缓冲，所以它可能当前并未播放，但它正在尝试播放。</p> 
           </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VideoDisplay/play()"><linktext>play()</linktext></link><link href="spark.components.xml#VideoDisplay/pause()"><linktext>pause()</linktext></link><link href="spark.components.xml#VideoDisplay/stop()"><linktext>stop()</linktext></link><link href="spark.components.xml#VideoDisplay/autoPlay"><linktext>autoPlay</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:scaleMode:get"><apiName>scaleMode</apiName><shortdesc>
      scaleMode 属性描述了调整视频内容大小的不同方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"letterbox"
           </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>scaleMode</codeph> 属性描述了调整视频内容大小的不同方法。可将 <codeph>scaleMode</codeph> 设置为 <codeph>"none"</codeph>、<codeph>"stretch"</codeph>、<codeph>"letterbox"</codeph> 或 <codeph>"zoom"</codeph>。
     
      <p>如果未对组件指定任何宽度、高度或约束，则此属性不起作用。</p>
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="org.osmf.display.ScaleMode.xml"><linktext>org.osmf.display.ScaleMode</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:source:get"><apiName>source</apiName><shortdesc>
      视频源。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sourceChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      视频源。
     
      <p>对于渐进式下载，源仅是指定要播放的视频文件的路径或 URL。</p>
     
      <p>对于流（录制流、实时流或多比特率流），source 属性是一个 DynamicStreamingVideoSource 对象。如果只希望播放不包含多比特率支持的录制流或实时流视频，则只需传入一个指向视频流的字符串 URL。但是，执行此操作后，会将 streamType 假定为“any”，并且您对流的控制能力不如使用 DynamicStreamingVideoSource 对象时那样强大。</p>
     
      <p>注意：如果以前设置了源，不建议针对 MediaPlayerStateChangeEvent.LOADING 或 MediaPlayerStateChangeEvent.READY 设置源。这可能导致无限循环或 RTE。如果必须执行诸如此类的操作，请等待其它帧设置源。</p>
           </apiDesc></apiValueDetail><related-links><link href="spark.components.mediaClasses.xml#DynamicStreamingVideoSource"><linktext>spark.components.mediaClasses.DynamicStreamingVideoSource</linktext></link></related-links></apiValue><apiValue id="spark.components:VideoDisplay:videoObject:get"><apiName>videoObject</apiName><shortdesc>
      基础 flash player flash.media.Video 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.media:Video"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      基础 Flash Player <codeph>flash.media.Video</codeph> 对象。
     
      <p>如果源为 <codeph>null</codeph>，则可能没有基础 <codeph>flash.media.Video</codeph> 对象。在这种情况下，<codeph>videoObject</codeph> 返回 <codeph>null</codeph>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:VideoDisplay:volume:get"><apiName>volume</apiName><shortdesc>
      音量级别，指定一个介于 0 和 1 之间的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="volumeChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      音量级别，指定一个介于 0 和 1 之间的值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components:TileGroup"><apiName>TileGroup</apiName><shortdesc>
  TileGroup 容器是使用 TileLayout 类的 Group 容器的一个实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="layout"/><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TileGroup&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TileGroup
    <strong>Properties</strong>
    columnAlign="left"
    columnCount="-1"
    columnWidth="0"
    horizontalAlign="justify"
    horizontalGap="6"
    orientation="rows"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    requestedColumnCount"-1"
    requestedRowCount="-1"
    rowAlign="top"
    rowCount="-1"
    rowHeight="0"
    verticalAlign="justify"
    verticalGap="6"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  TileGroup 容器是使用 TileLayout 类的 Group 容器的一个实例。不要修改 <codeph>layout</codeph> 属性。请改用 TileGroup 类的属性来修改 TileLayout 类的特征。
 
  <p>TileGroup 容器具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>大小足以显示其子代</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>10000 个像素宽 × 10000 个像素高</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TileGroupExample.mxml"><swfblock conref="examples/TileGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link></related-links><apiConstructor id="spark.components:TileGroup:TileGroup"><apiName>TileGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。将 <codeph>layout</codeph> 属性初始化为 TileLayout 类的一个实例。
     
      </apiDesc></apiConstructorDetail><related-links><link href="spark.layouts.xml#TileLayout"><linktext>spark.layouts.TileLayout</linktext></link><link href="spark.components.xml#HGroup"><linktext>spark.components.HGroup</linktext></link><link href="spark.components.xml#VGroup"><linktext>spark.components.VGroup</linktext></link></related-links></apiConstructor><apiValue id="spark.components:TileGroup:columnAlign:get"><apiName>columnAlign</apiName><shortdesc conref="spark.layouts.TileLayout#columnAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"left"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnCount:get"><apiName>columnCount</apiName><shortdesc conref="spark.layouts.TileLayout#columnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:columnWidth:get"><apiName>columnWidth</apiName><shortdesc conref="spark.layouts.TileLayout#columnWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#columnWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalAlign:get"><apiName>horizontalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:horizontalGap:get"><apiName>horizontalGap</apiName><shortdesc conref="spark.layouts.TileLayout#horizontalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#horizontalGap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:orientation:get"><apiName>orientation</apiName><shortdesc conref="spark.layouts.TileLayout#orientation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"rows"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#orientation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingBottom:get"><apiName>paddingBottom</apiName><shortdesc conref="spark.layouts.TileLayout#paddingBottom">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingBottom">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingLeft:get"><apiName>paddingLeft</apiName><shortdesc conref="spark.layouts.TileLayout#paddingLeft">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingLeft">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingRight:get"><apiName>paddingRight</apiName><shortdesc conref="spark.layouts.TileLayout#paddingRight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingRight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:paddingTop:get"><apiName>paddingTop</apiName><shortdesc conref="spark.layouts.TileLayout#paddingTop">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#paddingTop">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedColumnCount:get"><apiName>requestedColumnCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedColumnCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:requestedRowCount:get"><apiName>requestedRowCount</apiName><shortdesc conref="spark.layouts.TileLayout#requestedRowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#requestedRowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowAlign:get"><apiName>rowAlign</apiName><shortdesc conref="spark.layouts.TileLayout#rowAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"top"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowCount:get"><apiName>rowCount</apiName><shortdesc conref="spark.layouts.TileLayout#rowCount">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowCount">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:rowHeight:get"><apiName>rowHeight</apiName><shortdesc conref="spark.layouts.TileLayout#rowHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#rowHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalAlign:get"><apiName>verticalAlign</apiName><shortdesc conref="spark.layouts.TileLayout#verticalAlign">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"justify"
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalAlign">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components:TileGroup:verticalGap:get"><apiName>verticalGap</apiName><shortdesc conref="spark.layouts.TileLayout#verticalGap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>6
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.layouts.TileLayout#verticalGap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>