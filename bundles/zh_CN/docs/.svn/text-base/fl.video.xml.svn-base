<?xml version="1.0"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="fl.video"><apiName>fl.video</apiName><apiDetail/><apiClassifier id="fl.video:DVRManager"><apiName>DVRManager</apiName><shortdesc>
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
	 
	 
     
     </apiDesc></apiClassifierDetail><apiConstructor id="fl.video:DVRManager:DVRManager"><apiName>DVRManager</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>nc</apiItemName><apiType value="flash.net:NetConnection"/><apiDesc>
		 
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 
         
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="fl.video:DVRManager:checkInterval"><apiName>checkInterval</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
		 
         
         </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>interval</apiItemName><apiType value="Number"/><apiDesc>
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph/><codeph/> 
         
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DVRManager:getStreamDuration"><apiName>getStreamDuration</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>streamName</apiItemName><apiType value="String"/><apiDesc>        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         <codeph/><codeph/> 
         
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="fl.video:DVRManager:DVR_ERROR"><apiName>DVR_ERROR</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dvrError</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:DVR_EVENT"><apiName>DVR_EVENT</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dvrEvent</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:DVR_STOP"><apiName>DVR_STOP</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dvrStop</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:currentDuration:get"><apiName>currentDuration</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:isRec:get"><apiName>isRec</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
         
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:nc:get"><apiName>nc</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.net:NetConnection"/></apiValueDef><apiDesc>
		  
         
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:offline:get"><apiName>offline</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
         
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:offset:get"><apiName>offset</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
         
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DVRManager:totalDuration:get"><apiName>totalDuration</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          
		  
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:NCManagerDynamicStream"><apiName>NCManagerDynamicStream</apiName><shortdesc>
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>
     </apiTipText></apiTipTexts><apiBaseInterface>fl.video:INCManager</apiBaseInterface><apiBaseClassifier>fl.video:NCManager</apiBaseClassifier></apiClassifierDef><apiDesc>
	 
	 
	 <p/>
	 
     <codeblock rev="3.0">
     import fl.video.
     VideoPlayer.iNCManagerClass = fl.video.NCManagerDynamicStream;
     </codeblock>
	 
     </apiDesc></apiClassifierDetail><related-links><link href="fl.video.xml#NCManager"><linktext>NCManager</linktext></link></related-links><apiConstructor id="fl.video:NCManagerDynamicStream:NCManagerDynamicStream"><apiName>NCManagerDynamicStream</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiTipTexts><apiTipText>
         </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
         
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="fl.video:NCManagerDynamicStream:connectDynamicStream"><apiName>connectDynamicStream</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dsi</apiItemName><apiType value=""/><apiDesc>
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		  
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="fl.video:NCManagerDynamicStream:SHORT_VERSION"><apiName>SHORT_VERSION</apiName><shortdesc>
	指示组件短版本号的状态变量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5</apiData><apiType value="String"/></apiValueDef><apiDesc>
	指示组件短版本号的状态变量。 版本号在您有 FLA 文件并且需要知道组件版本时很有用。 要确定组件版本，请在 FLA 文件中键入下列 trace 代码：
	
	<codeblock>FLVPlayback.SHORT_VERSION</codeblock>
	
	<p><codeph>SHORT_VERSION</codeph> 变量仅包含主版本号和次版本号，例如：2.0。<codeph>VERSION</codeph> 变量包含主版本号和次版本号，以及修订版本号和生成版本号，例如：2.0.0.11。</p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#NCManagerDynamicStream/VERSION"><linktext>VERSION variable</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManagerDynamicStream:VERSION"><apiName>VERSION</apiName><shortdesc>
	指示组件长版本号的状态变量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5.0.15</apiData><apiType value="String"/></apiValueDef><apiDesc>
	指示组件长版本号的状态变量。 版本号在您有 FLA 文件并且需要知道组件版本时很有用。 要确定组件版本，请在 FLA 文件中键入下列 trace 代码：
	
	<codeblock>FLVPlayback.VERSION</codeblock>
	
	<p><codeph>VERSION</codeph> 变量包含主版本号和次版本号，以及修订版本号和生成版本号，例如：2.0.0.11。<codeph>SHORT_VERSION</codeph> 变量仅包含主版本号和次版本号，例如：2.0。 </p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#NCManagerDynamicStream/SHORT_VERSION"><linktext>SHORT_VERSION variable</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManagerDynamicStream:streamLength:get"><apiName>streamLength</apiName><shortdesc>
		 流的长度，以毫秒为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiTipTexts><apiTipText>streamLength 属性
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 流的长度，以毫秒为单位。 调用 <codeph>VideoPlayer.ncConnected()</codeph> 方法之后，如果其返回值未定义、为 <codeph>null</codeph> 或小于 0，则 VideoPlayer 对象将认为不存在任何流长度信息。 如果返回流长度信息，则其将覆盖包括由 <codeph>VideoPlayer.play()</codeph> 方法的 <codeph>totalTime</codeph> 参数、<codeph>VideoPlayer.load()</codeph> 方法设置的信息或从 FLV 文件元数据接收到的信息在内的任何现有流长度信息。
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/streamLength"><linktext>INCManager.streamLength</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:IVPEvent"><apiName>IVPEvent</apiName><shortdesc>
	 IVPEvent 接口由适用于 FLVPlayback 组件中特定 VideoPlayer 对象的 video 事件实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>IVPEvent 接口
     
     </apiTipText></apiTipTexts><apiBaseClassifier/></apiClassifierDef><apiDesc>
	 IVPEvent 接口由适用于 FLVPlayback 组件中特定 VideoPlayer 对象的 video 事件实现。 当在 FLVPlayback 组件中使用多个 VideoPlayer 对象时，将为每个对象分配一个不同的索引，且这些索引将用于 <codeph>visibleVideoPlayerIndex</codeph> 属性、<codeph>activeVideoPlayerIndex</codeph> 属性和 <codeph>getVideoPlayer()</codeph> 方法。 当触发了特定于某一 VideoPlayer 对象的事件时，事件类实现 IVPEvent 接口且 <codeph>vp</codeph> 属性等于该事件涉及的 VideoPlayer 对象的索引。
     
     </apiDesc></apiClassifierDetail><apiValue id="fl.video:IVPEvent:fl.video:IVPEvent:type:get"><apiName>type</apiName><shortdesc>
         事件的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiTipTexts><apiTipText>type 属性
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
         事件的类型。类型区分大小写。
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:IVPEvent:fl.video:IVPEvent:vp:get"><apiName>vp</apiName><shortdesc>
         该事件涉及的 VideoPlayer 对象的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/><apiTipTexts><apiTipText>vp 属性
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
         该事件涉及的 VideoPlayer 对象的索引。
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:AutoLayoutEvent"><apiName>AutoLayoutEvent</apiName><shortdesc>
     当自动调整视频播放器大小并进行布置时，Flash&amp;#xAE; Player 会调度 AutoLayoutEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>fl.video:IVPEvent</apiBaseInterface><apiBaseClassifier>fl.video:LayoutEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
     Flash<sup>®</sup> Player 在自动调整视频播放器大小和布置视频播放器时调度 AutoLayoutEvent 对象。 当 <codeph>maintainAspectRatio</codeph> 属性或 <codeph>autoSize</codeph> 属性设置为 <codeph>true</codeph> 或者加载了新的 FLV 文件时，将自动布置视频播放器。 
     
     <p>只有一种类型的 AutoLayoutEvent 对象：<codeph>AutoLayoutEvent.AUTO_LAYOUT</codeph>。</p>
     
     <p>尝试对视频播放器进行自动布局后，即使没有更改尺寸也将调度该事件对象。 </p>
     
     <p>在以下三种情况下也会调度 <codeph>LayoutEvent</codeph> 对象：</p>
     <ul>
     <li>视频播放器在布局后可见。</li>
     <li>有两个大小或位置不同的视频播放器，并且将 <codeph>visibleVideoPlayerIndex</codeph> 属性从一个视频播放器切换到另一个视频播放器。</li>
     <li>调用了更改视频播放器大小或位置的方法或属性，例如：<codeph>setSize()</codeph>、<codeph>setScale()</codeph>、<codeph>width</codeph>、<codeph>height</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>registrationWidth</codeph> 和 <codeph>registrationHeight</codeph>。</li>
     </ul>
     
     <p>如果正在使用多个视频播放器实例，则该事件可能不会应用于可见的视频播放器。</p>
     
     </apiDesc></apiClassifierDetail><related-links><link href="fl.video.xml#AutoLayoutEvent/AUTO_LAYOUT"><linktext>AUTO_LAYOUT</linktext></link></related-links><adobeApiEvent id="fl.video:AutoLayoutEvent:AUTO_LAYOUT_autoLayout"><apiName>autoLayout</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:AutoLayoutEvent:AUTO_LAYOUT</apiEventType><adobeApiEventClassifier>fl.video:AutoLayoutEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:autoLayout"><linktext>FLVPlayback.autoLayout</linktext></link></related-links></adobeApiEvent><apiConstructor id="fl.video:AutoLayoutEvent:AutoLayoutEvent"><apiName>AutoLayoutEvent</apiName><shortdesc>
         创建一个 Event 对象，其中包含有关 autoLayout 事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的自动 layout 事件：<codeph>AutoLayoutEvent.AUTO_LAYOUT</codeph>。
         
         </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
         
         </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
         
         </apiDesc></apiParam><apiParam><apiItemName>oldBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>指示在发生 <codeph>autoLayout</codeph> 事件前，目标的 <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph> 和 <codeph>height</codeph> 属性的值。 事件侦听器可以通过 <codeph>LayoutEvent.oldBounds</codeph> 属性访问此信息。
         
         </apiDesc></apiParam><apiParam><apiItemName>oldRegistrationBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>指示在发生 <codeph>autoLayout</codeph> 事件前，目标的 <codeph>registrationX</codeph>、<codeph>registrationY</codeph>、<codeph>registrationWidth</codeph> 和 <codeph>registrationHeight</codeph> 属性的值。 事件侦听器可以通过 <codeph>LayoutEvent.oldRegistrationBounds</codeph> 属性访问此信息。
         
         </apiDesc></apiParam><apiParam><apiItemName>vp</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>该事件涉及的 VideoPlayer 对象的索引。
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
         创建一个 Event 对象，其中包含有关 <codeph>autoLayout</codeph> 事件的信息。 将 Event 对象作为参数传递给事件侦听器。
         
         </apiDesc></apiConstructorDetail><related-links><link href="fl.video.xml#LayoutEvent/oldBounds"><linktext>LayoutEvent.oldBounds</linktext></link><link href="fl.video.xml#LayoutEvent/oldRegistrationBounds"><linktext>LayoutEvent.oldRegistrationBounds</linktext></link></related-links></apiConstructor><apiValue id="fl.video:AutoLayoutEvent:AUTO_LAYOUT"><apiName>AUTO_LAYOUT</apiName><shortdesc>
         定义 autoLayout 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>autoLayout</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>autoLayout</codeph> 事件对象的 <codeph>type</codeph> 属性值。
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>oldBounds</codeph></entry><entry><codeph>autoLayout</codeph> 事件发生前，目标的 <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph> 和 <codeph>height</codeph> 属性的值。</entry></row><row><entry><codeph>oldRegistrationBounds</codeph></entry><entry><codeph>autoLayout</codeph> 事件发生前，目标的 <codeph>registrationX</codeph>、<codeph>registrationY</codeph>、<codeph>registrationWidth</codeph> 和 <codeph>registrationHeight</codeph> 属性的值。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:autoLayout"><linktext>FLVPlayback.autoLayout</linktext></link></related-links></apiValue><apiValue id="fl.video:AutoLayoutEvent:vp:get"><apiName>vp</apiName><shortdesc>
         该事件涉及的 VideoPlayer 对象的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
         该事件涉及的 VideoPlayer 对象的索引。
         
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/activeVideoPlayerIndex"><linktext>FLVPlayback.activeVideoPlayerIndex</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/visibleVideoPlayerIndex"><linktext>FLVPlayback.visibleVideoPlayerIndex</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/getVideoPlayer()"><linktext>FLVPlayback.getVideoPlayer()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:DynamicStreamItem"><apiName>DynamicStreamItem</apiName><shortdesc>
     
     </shortdesc><prolog><author>Adobe Systems Incorporated
     
     </author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
     
     <codeph/>
     
     </apiDesc></apiClassifierDetail><apiConstructor id="fl.video:DynamicStreamItem:DynamicStreamItem"><apiName>DynamicStreamItem</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          
		 <p> </p>
         <p><codeph/></p>
         
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="fl.video:DynamicStreamItem:addStream"><apiName>addStream</apiName><shortdesc>
		  
         
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>streamName</apiItemName><apiType value="String"/><apiDesc><codeph/><codeph/><codeph/>
         
         </apiDesc></apiParam><apiParam><apiItemName>bitRate</apiItemName><apiType value="Number"/><apiDesc><codeph/>
		 
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		  
         
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="fl.video:DynamicStreamItem:streams:get"><apiName>streams</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 <codeph/><codeph/><codeph/><codeph/><codeph/><codeph/> 
         
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:MetadataEvent"><apiName>MetadataEvent</apiName><shortdesc>
         当用户请求 FLV 文件的元数据信息包 (NetStream.onMetaData) 以及在 FLV 文件中遇到提示点 (NetStream.onCuePoint) 时，Flash&amp;#xAE; Player 会调度 MetadataEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>fl.video:IVPEvent</apiBaseInterface><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
         Flash<sup>®</sup> Player 在用户请求 FLV 文件的元数据信息包 (<codeph>NetStream.onMetaData</codeph>) 以及在 FLV 文件中遇到提示点 (<codeph>NetStream.onCuePoint</codeph>) 时调度 MetadataEvent 对象。
		 
		 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.net.xml#NetStream/event:onCuePoint"><linktext>NetStream.onCuePoint 事件</linktext></link><link href="" invalidHref="flash.net.xml#NetStream/event:onMetaData"><linktext>NetStream.onMetaData 事件</linktext></link></related-links><adobeApiEvent id="fl.video:MetadataEvent:CUE_POINT_cuePoint"><apiName>cuePoint</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:MetadataEvent:CUE_POINT</apiEventType><adobeApiEventClassifier>fl.video:MetadataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:cuePoint"><linktext>cuePoint 事件</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:MetadataEvent:METADATA_RECEIVED_metadataReceived"><apiName>metadataReceived</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:MetadataEvent:METADATA_RECEIVED</apiEventType><adobeApiEventClassifier>fl.video:MetadataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:metadataReceived"><linktext>metadataReceived 事件</linktext></link></related-links></adobeApiEvent><apiConstructor id="fl.video:MetadataEvent:MetadataEvent"><apiName>MetadataEvent</apiName><shortdesc>
		 创建一个 Event 对象，其中包含有关 metadata 事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。可能的值包括 <codeph>MetadataEvent.CUE_POINT</codeph> 和 <codeph>MetadataEvent.METADATA_RECEIVED</codeph>。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>info</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>确定要添加的动态属性。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>vp</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>确定 VideoPlayer 对象的索引。
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 创建一个 Event 对象，其中包含有关 metadata 事件的信息。 将 Event 对象作为参数传递给事件侦听器。
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="fl.video:MetadataEvent:CUE_POINT"><apiName>CUE_POINT</apiName><shortdesc>
		 定义 cuePoint 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cuePoint</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 定义 <codeph>cuePoint</codeph> 事件对象的 <codeph>type</codeph> 属性值。
		 
		 <p>此事件具有以下属性：</p>
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
	         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>info</codeph></entry><entry>具有描述提示点的属性的对象。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:cuePoint"><linktext>cuePoint 事件</linktext></link></related-links></apiValue><apiValue id="fl.video:MetadataEvent:METADATA_RECEIVED"><apiName>METADATA_RECEIVED</apiName><shortdesc>
		 定义 metadataReceived 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>metadataReceived</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 定义 <codeph>metadataReceived</codeph> 事件对象的 <codeph>type</codeph> 属性值。
		 
		 <p>此事件具有以下属性：</p>
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
	         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>info</codeph></entry><entry>具有描述 FLV 文件的属性的对象。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:metadataReceived"><linktext>metadataReceived 事件</linktext></link></related-links></apiValue><apiValue id="fl.video:MetadataEvent:info:get"><apiName>info</apiName><shortdesc>
		 具有根据事件类型添加动态属性的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
		 具有根据事件类型添加动态属性的对象。
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.net.xml#NetStream/event:onCuePoint"><linktext>NetStream.onCuePoint 事件</linktext></link><link href="" invalidHref="flash.net.xml#NetStream/event:onMetaData"><linktext>NetStream.onMetaData 事件</linktext></link></related-links></apiValue><apiValue id="fl.video:MetadataEvent:vp:get"><apiName>vp</apiName><shortdesc>
		 该事件涉及的 VideoPlayer 对象的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
		 该事件涉及的 VideoPlayer 对象的索引。
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/activeVideoPlayerIndex"><linktext>FLVPlayback.activeVideoPlayerIndex</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/visibleVideoPlayerIndex"><linktext>FLVPlayback.visibleVideoPlayerIndex</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/getVideoPlayer()"><linktext>FLVPlayback.getVideoPlayer()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:FMSCapabilities"><apiName>FMSCapabilities</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="fl.video:FMSCapabilities:FMSCapabilities"><apiName>FMSCapabilities</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>version</apiItemName><apiType value="String"/><apiData>2,0,0,0</apiData><apiDesc>        
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
         <codeph/>
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="fl.video:FMSCapabilities:codecs:get"><apiName>codecs</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
          
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FMSCapabilities:dataStreamAccess:get"><apiName>dataStreamAccess</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FMSCapabilities:dvr:get"><apiName>dvr</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FMSCapabilities:dynamicStreaming:get"><apiName>dynamicStreaming</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FMSCapabilities:progressive:get"><apiName>progressive</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
          
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FMSCapabilities:version:get"><apiName>version</apiName><shortdesc>
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
          
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
	 与使用 FLVPlayback 组件相比，VideoPlayer 类可以让您创建出 SWF 文件稍微小一些的视频播放器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>VideoPlayer 类
     
     </apiTipText></apiTipTexts><apiBaseClassifier>flash.media:Video</apiBaseClassifier></apiClassifierDef><apiDesc>
	 与使用 FLVPlayback 组件相比，VideoPlayer 类可以让您创建出 SWF 文件稍微小一些的视频播放器。 <codeph/> 
	 
     <p>FLVPlayback 类包装 VideoPlayer 类。由于使用 FLVPlayback 类可以访问 VideoPlayer 类中的所有功能，因此，可以在几乎所有情况下使用 FLVPlayback 类。</p>
	 
	 <p><codeph/><codeph/><codeph/></p>
	 
	 <codeblock>var _forceNCManager:fl.video.NCManager;</codeblock>
	 
	 <p>NCManager 类实现 INCManager 接口，且可使用实现该接口的自定义类进行替换，以管理网络通信。 如果您进行了上述替换，则还需要包括以下语句，以用提供的类名称替换 NCManager：</p>
	 
	 <codeblock>fl.video.VideoPlayer.iNCManagerClass = fl.video.NCManager;</codeblock>
	 
	 <p>如果您在使用默认的 NCManager 类，则不需要添加此语句。</p>
	 
     <p><b>注意</b>：您还可以设置 <codeph>iNCManagerClass</codeph>，以便在使用 FLVPlayback 组件时替换默认的 fl.video.NCManager。</p>
	 
	 <p>为了为多个带宽处理多个流，NCManager 支持 SMIL 的一个子集。</p>
	 
	 </apiDesc><example conref="VideoPlayerExample.as"/></apiClassifierDetail><related-links><link href="fl.video.xml#NCManager"><linktext>NCManager</linktext></link><link href="" invalidHref="fl.video.FLVPlayback.xml"><linktext>FLVPlayback</linktext></link></related-links><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.UNSUPPORTED_PLAYER_VERSION_unsupportedPlayerVersion"><apiName>unsupportedPlayerVersion</apiName><shortdesc>
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 <codeph/>
	 
	 <p><codeph/><codeph/></p>
	 
     </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoEvent/UNSUPPORTED_PLAYER_VERSION"><linktext/></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.STATE_CHANGE_stateChange"><apiName>stateChange</apiName><shortdesc>
	 回放状态发生更改时调度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.STATE_CHANGE</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>stateChange 事件
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 回放状态发生更改时调度。 当 <codeph>autoRewind</codeph> 调用完成时，将在后退状态下调度 <codeph>stateChange</codeph> 事件。 <codeph>stateChange</codeph> 事件在后退完成前不会启动。 
	 
	 <p>此事件可用于跟踪回放何时进入或离开不可响应状态（例如在连接、调整大小或后退过程中）。  当播放器进入可响应状态时，<codeph>play()</codeph>、<codeph>pause()</codeph>、<codeph>stop()</codeph> 和 <codeph>seek()</codeph> 方法会将要执行的请求排队。</p>
	 
	 <p><codeph>stateChange</codeph> 事件为 VideoEvent 类型，并具有常量 <codeph>VideoEvent.STATE_CHANGE</codeph>。</p>
	 
     </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoEvent/STATE_CHANGE"><linktext>VideoEvent.STATE_CHANGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.AUTO_REWOUND_autoRewound"><apiName>autoRewound</apiName><shortdesc>
	 由于 autoRewind 属性设置为 true 而将播放头移至视频播放器的开始位置时调度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.AUTO_REWOUND</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>autoRewound 事件
     </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 由于 <codeph>autoRewind</codeph> 属性设置为 <codeph>true</codeph> 而将播放头移至视频播放器的开始位置时调度。
	 
	 <p><codeph>autoRewound</codeph> 事件为 VideoEvent 类型，并具有常量 <codeph>VideoEvent.AUTO_REWOUND</codeph>。</p>
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoEvent/AUTO_REWOUND"><linktext>VideoEvent.AUTO_REWOUND</linktext></link><link href="fl.video.xml#VideoPlayer/autoRewind"><linktext>autoRewind</linktext></link><link href="fl.video.xml#VideoState/REWINDING"><linktext>VideoState.REWINDING</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.LayoutEvent.LAYOUT_layout"><apiName>layout</apiName><shortdesc>
	 在调整视频播放器大小或布置视频播放器时调度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.LayoutEvent.LAYOUT</apiEventType><adobeApiEventClassifier>fl.video.LayoutEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>layout 事件
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 在调整视频播放器大小或布置视频播放器时调度。 布局有以下两种情况：
	 <ul><li>通过使用 <codeph>autoLayout</codeph> 事件、调用 <codeph>setScale()</codeph> 或 <codeph>setSize()</codeph> 方法或更改 <codeph>width</codeph>、<codeph>height</codeph>、<codeph>scaleX</codeph> 和 <codeph>scaleY</codeph> 属性布置视频播放器。</li>
	 <li>有两个大小不同的视频播放器，并且将 <codeph>visibleVideoPlayerIndex</codeph> 属性从一个视频播放器切换到另一个视频播放器。</li>
	 </ul>  
	 
	 <p><codeph>layout</codeph> 事件为 LayoutEvent 类型，并具有常量 <codeph>LayoutEvent.LAYOUT</codeph>。</p> 
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:autoLayout"><linktext>autoLayout 事件</linktext></link><link href="fl.video.xml#LayoutEvent/LAYOUT"><linktext>LayoutEvent.LAYOUT</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/visibleVideoPlayerIndex"><linktext>FLVPlayback.visibleVideoPlayerIndex</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.READY_ready"><apiName>ready</apiName><shortdesc>
	 FLV 文件已加载并可以显示时调度此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.READY</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>ready 事件
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 FLV 文件已加载并可以显示时调度此事件。 在您使用 <codeph>play()</codeph> 或 <codeph>load()</codeph> 方法加载新的 FLV 文件后首次进入可响应状态时，该事件发生。 它只为加载的每个 FLV 文件发生一次。
	 
	 <p><codeph>ready</codeph> 事件为 VideoEvent 类型，并具有常量 <codeph>VideoEvent.READY</codeph>。</p> 
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoPlayer/load()"><linktext>load()</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link><link href="fl.video.xml#VideoEvent/READY"><linktext>VideoEvent.READY</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
	 根据已加载的字节数指示完成的进度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>fl.video.VideoProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>progress 事件
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 根据已加载的字节数指示完成的进度。 按 <codeph>progressInterval</codeph> 属性所指定的频率调度，从加载开始时开始，到所有字节加载结束或者出现网络错误时结束。 默认为每隔 0.25 秒调度一次，从调用 load 时开始，到所有字节加载结束或者出现网络错误时结束。 使用此事件可以检查已加载的字节数或缓冲区中的字节数。 
	 
	 <p>仅针对渐进式 HTTP 下载进行分派。  根据已加载的字节数指示进度。  事件对象具有 <codeph>bytesLoaded</codeph> 和 <codeph>bytesTotal</codeph> 属性，与名称相同的 FLVPlayback 属性相同。</p>
	 
	 <p><codeph>progress</codeph> 事件为 VideoProgressEvent 类型，并具有常量 <codeph>VideoProgressEvent.PROGRESS</codeph>。</p> 
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoPlayer/bytesLoaded"><linktext>bytesLoaded</linktext></link><link href="fl.video.xml#VideoPlayer/bytesTotal"><linktext>bytesTotal</linktext></link><link href="fl.video.xml#VideoProgressEvent/PROGRESS"><linktext>VideoProgressEvent.PROGRESS</linktext></link><link href="fl.video.xml#VideoPlayer/progressInterval"><linktext>progressInterval</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.PLAYHEAD_UPDATE_playheadUpdate"><apiName>playheadUpdate</apiName><shortdesc>
	 在 FLV 文件按 playheadUpdateInterval 属性所指定的频率播放或者开始后退时调度该事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.PLAYHEAD_UPDATE</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiDefaultValue>0.25
	 
	 </apiDefaultValue><apiTipTexts><apiTipText>change 事件
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 在 FLV 文件按 <codeph>playheadUpdateInterval</codeph> 属性所指定的频率播放或者开始后退时调度该事件。 当视频播放器处于暂停或停止状态时，该组件不调度此事件（除非发生搜索）。 
	 
	 <p><codeph>playheadUpdate</codeph> 事件为 VideoEvent 类型，并具有常量 <codeph>VideoEvent.PLAYHEAD_UPDATE</codeph>。</p> 
     
     </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoEvent/PLAYHEAD_UPDATE"><linktext>VideoEvent.PLAYHEAD_UPDATE</linktext></link><link href="fl.video.xml#VideoPlayer/playheadUpdateInterval"><linktext>playheadUpdateInterval</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.MetadataEvent.METADATA_RECEIVED_metadataReceived"><apiName>metadataReceived</apiName><shortdesc>
	 第一次到达 FLV 文件的元数据时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.MetadataEvent.METADATA_RECEIVED</apiEventType><adobeApiEventClassifier>fl.video.MetadataEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>metadataReceived 事件
	 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 第一次到达 FLV 文件的元数据时分派。事件对象具有一个 <codeph>info</codeph> 属性，该属性包含 <codeph>NetStream.onMetaData</codeph> 事件回调接收的 info 对象。
	 
	 <p><codeph>metadataReceived</codeph> 事件为 MetadataEvent 类型，并具有常量 <codeph>MetadataEvent.METADATA_RECEIVED</codeph>。</p>
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#MetadataEvent/METADATA_RECEIVED"><linktext>MetadataEvent.METADATA_RECEIVED</linktext></link><link href="" invalidHref="flash.net.xml#NetStream/event:onMetaData"><linktext>NetStream.onMetaData 事件</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.MetadataEvent.CUE_POINT_cuePoint"><apiName>cuePoint</apiName><shortdesc>
	 到达提示点时调度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.MetadataEvent.CUE_POINT</apiEventType><adobeApiEventClassifier>fl.video.MetadataEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>cuePoint 事件
     </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 到达提示点时调度。 事件对象具有一个 <codeph>info</codeph> 属性，该属性包含 FLV 文件提示点的 <codeph>NetStream.onCuePoint</codeph> 事件回调接收的 info 对象。 对于 ActionScript 提示点，它包含传递到 ActionScript 提示点方法或属性的对象。
	 
	 <p><codeph>cuePoint</codeph> 事件为 MetadataEvent 类型，并具有常量 <codeph>MetadataEvent.CUE_POINT</codeph>。</p>
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#MetadataEvent/CUE_POINT"><linktext>MetadataEvent.CUE_POINT</linktext></link><link href="" invalidHref="flash.net.xml#NetStream/event:onCuePoint"><linktext>NetStream.onCuePoint 事件</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
	 因为播放器到达 FLV 文件的末尾而完成播放时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.COMPLETE</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>complete 事件
     </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 因为播放器到达 FLV 文件的末尾而完成播放时进行分派。 如果您调用 <codeph>stop()</codeph> 或 <codeph>pause()</codeph> 方法或者单击相应的控件，则组件将不会分派该事件。 
	 
	 <p>当应用程序使用渐进式下载时，将不会显式设置 <codeph>totalTime</codeph> 属性，还会下载未在元数据中指定持续时间的 FLV 文件。 视频播放器在调度此事件前将 <codeph>totalTime</codeph> 属性设置为近似的总时间值。</p>
	 
	 <p>视频播放器还会调度 <codeph>stateChange</codeph> 和 <codeph>stopped</codeph> 事件。</p>
	 
	 <p><codeph>complete</codeph> 事件为 VideoEvent 类型，并具有常量 <codeph>VideoEvent.COMPLETE</codeph>。</p>
	 
	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoPlayer/event:stateChange"><linktext>stateChange 事件</linktext></link><link href="fl.video.xml#VideoPlayer/stop()"><linktext>stop()</linktext></link><link href="fl.video.xml#VideoPlayer/pause()"><linktext>pause()</linktext></link><link href="fl.video.xml#VideoPlayer/totalTime"><linktext>totalTime</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoPlayer_fl.video.VideoEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
	 在以下情况下，VideoPlayer 实例会调度此事件：由于超时或通过调用 close() 方法而关闭 NetConnection，或者您调用了 load() 或 play() 方法或设置了 source 属性，从而导致 RTMP 连接关闭。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video.VideoEvent.CLOSE</apiEventType><adobeApiEventClassifier>fl.video.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>close 事件
     </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
	 在以下情况下，VideoPlayer 实例会调度此事件：由于超时或通过调用 <codeph>close()</codeph> 方法而关闭 NetConnection，或者您调用了 <codeph>load()</codeph> 或 <codeph>play()</codeph> 方法或设置了 <codeph>source</codeph> 属性，从而导致 RTMP 连接关闭。 只有从 Flash Media Server (FMS) 或其它 Flash 视频流服务 (FVSS) 进行流式加载时，FLVPlayback 实例才调度此事件。 
	 
	 <p><codeph>close</codeph> 事件为 VideoEvent 类型，并具有常量 <codeph>VideoEvent.CLOSE</codeph>。</p>
	 
 	 </apiDesc></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoEvent/CLOSE"><linktext>VideoEvent.CLOSE</linktext></link><link href="fl.video.xml#VideoPlayer/close()"><linktext>close()</linktext></link><link href="fl.video.xml#VideoPlayer/source"><linktext>source</linktext></link><link href="fl.video.xml#VideoPlayer/load()"><linktext>load()</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link></related-links></adobeApiEvent><apiConstructor id="fl.video:VideoPlayer:VideoPlayer"><apiName>VideoPlayer</apiName><shortdesc>
		 创建一个具有指定宽度和高度的 VideoPlayer 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>width</apiItemName><apiType value="int"/><apiData>320</apiData><apiDesc>视频播放器的宽度，以像素为单位。
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="int"/><apiData>240</apiData><apiDesc>视频播放器的高度，以像素为单位。
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 创建一个具有指定宽度和高度的 VideoPlayer 对象。
		 
		 </apiDesc></apiConstructorDetail><related-links><link href="fl.video.xml#INCManager"><linktext>INCManager</linktext></link><link href="fl.video.xml#NCManager"><linktext>NCManager</linktext></link></related-links></apiConstructor><apiOperation id="fl.video:VideoPlayer:flvplayback_internal:_playDynamicStream"><apiName>_playDynamicStream</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="flvplayback_internal"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>startTime</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>	 </apiDesc></apiParam><apiParam><apiItemName>endTime</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>	 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		  
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:VideoPlayer:close"><apiName>close</apiName><shortdesc>
		 强制关闭视频流和 Flash Media Server 连接。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 强制关闭视频流和 Flash Media Server 连接。 此方法触发 <codeph>close</codeph> 事件。 由于闲置超时功能会关闭流，因此通常无需直接调用该方法。
		 
         </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/idleTimeout"><linktext>idleTimeout</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:flvplayback_internal:handleDVRError"><apiName>handleDVRError</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="flvplayback_internal"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>e</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="fl.video:VideoPlayer:load"><apiName>load</apiName><shortdesc>
		 与 play() 方法类似，但使 FLV 文件加载而不播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiDesc>一个要加载的 FLV 文件的 URL 字符串。 如果不为 URL 传递任何值，则将引发带有消息 <codeph>null URL sent to VideoPlayer.load</codeph> 的错误。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>totalTime</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>FLV 文件的长度。 传入 0、<codeph>null</codeph> 或未定义的值将自动从元数据、服务器或 XML 中检测长度。 
		  
		 </apiDesc></apiParam><apiParam><apiItemName>isLive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果从 Flash Media Server (FMS) 流式加载实时输入信号，则值为 <codeph>true</codeph>。 
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 与 <codeph>play()</codeph> 方法类似，但使 FLV 文件加载而不播放。 适当时会自动调整大小，并且显示 FLV 文件的第一帧。 初次加载和自动布局后，状态将为 <codeph>VideoState.PAUSED</codeph>。
		 
		 <p>该方法使用与 <codeph>play()</codeph> 方法相同的参数，但如果没有 URL，则无法调用 <codeph>load()</codeph> 方法。 否则，将会引发错误。 如果视频播放器处于不可响应状态，则 <codeph>load()</codeph> 方法会将请求排队。</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:ncConnected"><apiName>ncConnected</apiName><shortdesc>
		 在调用 INCManager.connectToURL() 方法后，连接完成或失败后由 INCManager 调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 在调用 <codeph>INCManager.connectToURL()</codeph> 方法后，连接完成或失败后由 INCManager 调用。 如果连接失败，请在调用之前将 <codeph>INCManager.netConnection</codeph> 属性设置为 <codeph>null</codeph> 或未定义的值。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/ncReconnected()"><linktext>ncReconnected()</linktext></link><link href="fl.video.xml#INCManager/connectToURL()"><linktext>INCManager.connectToURL()</linktext></link><link href="fl.video.xml#NCManager/connectToURL()"><linktext>NCManager.connectToURL()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:ncReconnected"><apiName>ncReconnected</apiName><shortdesc>
		 在调用 INCManager.reconnect() 方法后，重新连接完成或失败后由 INCManager 调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 在调用 <codeph>INCManager.reconnect()</codeph> 方法后，重新连接完成或失败后由 INCManager 调用。 如果连接失败，请在调用之前将 <codeph>INCManager.netconnection</codeph> 属性设置为 <codeph>null</codeph>。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/ncConnected()"><linktext>ncConnected()</linktext></link><link href="fl.video.xml#INCManager/reconnect()"><linktext>INCManager.reconnect()</linktext></link><link href="fl.video.xml#NCManager/reconnect()"><linktext>NCManager.reconnect()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:pause"><apiName>pause</apiName><shortdesc>
		 暂停视频回放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 暂停视频回放。 如果视频已经暂停或停止，则此方法没有任何作用。  若要再次开始播放，请调用 <codeph>play()</codeph>。 不使用任何参数。
		 
		 <p>如果播放器处于不可响应状态，则 <codeph>pause()</codeph> 方法会将请求排队。</p>
		 
		 <p>如果在没有连接任何流的情况下调用，则将引发异常。  使用 <codeph>stateChange</codeph> 事件和 <codeph>connected</codeph> 属性可以确定何时调用此方法才是安全的。</p>
		 
         <p>如果播放器处于停止状态，则调用 <codeph>pause()</codeph> 方法没有任何作用，播放器保持在停止状态。</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/stateResponsive"><linktext>stateResponsive</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:play"><apiName>play</apiName><shortdesc>
		 让视频播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>如果要加载和播放新的 FLV 文件，则传入 URL 字符串。 如果已经加载了一个 FLV 文件，并想继续播放它，则传入 <codeph>null</codeph>。 
		 
		 </apiDesc></apiParam><apiParam><apiItemName>totalTime</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>传入 FLV 文件的长度。 传入 <codeph>0</codeph> 或 <codeph>NaN</codeph> 将自动从元数据、服务器或 XML 中检测长度。 如果在调用 <codeph>ncConnected</codeph> 属性时 <codeph>INCManager.streamLength</codeph> 属性不是 <codeph>0</codeph>、<codeph>null</codeph> 或未定义，则其值优先于此值。  
		 
		 </apiDesc></apiParam><apiParam><apiItemName>isLive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果从 Flash Media Server (FMS) 流式加载实时输入信号，则传入 <codeph>true</codeph>。 
		 
		 </apiDesc></apiParam><apiTipTexts><apiTipText>
play 方法

		 
		 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
		 让视频播放。可以在视频暂停、停止或已经在播放时调用。 调用此方法时不带任何参数将播放已加载的视频，或传入 URL 来加载新的流。
		 
		 <p>如果播放器处于不可响应状态，则会将请求排队。</p>
		 
		 <p>如果在未连接任何流的情况下进行不带任何参数的调用，将引发异常。 使用 <codeph>stateChange</codeph> 事件和 <codeph>connected</codeph> 属性可以确定何时调用此方法才是安全的。</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/stateResponsive"><linktext>stateResponsive</linktext></link><link href="fl.video.xml#VideoPlayer/load()"><linktext>load()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:play2"><apiName>play2</apiName><shortdesc>
		 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dsi</apiItemName><apiOperationClassifier>fl.video:DynamicStreamItem</apiOperationClassifier><apiDesc>
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:VideoPlayer:playWhenEnoughDownloaded"><apiName>playWhenEnoughDownloaded</apiName><shortdesc>
		 当下载到足以播放时播放 FLV 文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiTipTexts><apiTipText>playWhenEnoughDownloaded 方法
		 
         </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
		 当下载到足以播放时播放 FLV 文件。 当 FLV 文件下载完成或从 Flash Media Server (FMS) 进行流式加载时，调用 <codeph>playWhenEnoughDownloaded()</codeph> 方法等同于调用不带参数的 <codeph>play()</codeph> 方法。 调用该方法不会暂停回放，因此，在大多数情况下，您可能需要在调用该方法前调用 <codeph>pause()</codeph> 方法。
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:VideoPlayer:seek"><apiName>seek</apiName><shortdesc>
		 在文件中搜索到给定时间，以秒为单位指定，精确到小数点后三位（毫秒）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>如果时间 &lt; 0 或者为 <codeph>NaN</codeph>。
         </apiDesc><apiItemName>VideoError</apiItemName><apiOperationClassifier>fl.video:VideoError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>time</apiItemName><apiType value="Number"/><apiDesc>一个数字，指定放置播放头的时间，以秒为单位。
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 在文件中搜索到给定时间，以秒为单位指定，精确到小数点后三位（毫秒）。 如果正在播放视频，则视频将继续从该点播放。 如果视频已暂停，则视频将搜索到该点并保持暂停状态。 如果视频已停止，则视频搜索到该点并进入暂停状态。 使用实时流时，不起任何作用。
		 
         <p>在调用一种搜索方法或者设置 <codeph>playheadTime</codeph> 以引发搜索后，<codeph>playheadTime</codeph> 属性可能不会立即包含预期值。 对于渐进式下载，由于只能搜索关键帧，因此搜索将转到指定时间后第一个关键帧的时间。</p>
		 
		 <p><b>注意</b>：对于流式下载，搜索总是转到指定的确切时间，即使 FLV 源文件在此处没有关键帧也是如此。</p>
		 
		 <p>由于搜索是异步执行的，因此，如果调用 seek 方法或者设置 <codeph>playheadTime</codeph> 属性，则 <codeph>playheadTime</codeph> 将不会立即更新。 若要在搜索完成后获得这一时间，需要侦听 <codeph>seek</codeph> 事件，该事件只在 <codeph>playheadTime</codeph> 属性更新后才启动。</p>
		 
		 <p>如果在没有连接任何流的情况下调用，则将引发异常。  使用 <codeph>stateChange</codeph> 事件和 <codeph>connected</codeph> 属性可以确定何时调用此方法才是安全的。</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/stateResponsive"><linktext>stateResponsive</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:setScale"><apiName>setScale</apiName><shortdesc>
		 同时设置 scaleX 和 scaleY 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>scaleX</apiItemName><apiType value="Number"/><apiDesc>一个代表水平缩放的数字。
		 </apiDesc></apiParam><apiParam><apiItemName>scaleY</apiItemName><apiType value="Number"/><apiDesc>一个代表垂直缩放的数字。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 同时设置 <codeph>scaleX</codeph> 和 <codeph>scaleY</codeph> 属性。 单独设置 <codeph>scaleX</codeph> 或 <codeph>scaleY</codeph> 会触发两次 <codeph>autolayout</codeph> 事件，而调用 <codeph>setScale()</codeph> 方法将只引发一次 <codeph>autolayout</codeph> 事件。 
                 
		 <p>如果 <codeph>scaleMode</codeph> 属性为 <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph> 或 <codeph>VideoScaleMode.NO_SCALE</codeph>，则调用该方法会立即引发 <codeph>autolayout</codeph> 事件。</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/scaleX"><linktext>scaleX</linktext></link><link href="fl.video.xml#VideoPlayer/scaleY"><linktext>scaleY</linktext></link><link href="fl.video.xml#VideoScaleMode/MAINTAIN_ASPECT_RATIO"><linktext>VideoScaleMode.MAINTAIN_ASPECT_RATIO</linktext></link><link href="fl.video.xml#VideoScaleMode/NO_SCALE"><linktext>VideoScaleMode.NO_SCALE</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:setSize"><apiName>setSize</apiName><shortdesc>
		 同时设置 width 和 height 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>视频播放器的宽度。
		 </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>视频播放器的高度。
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 同时设置 <codeph>width</codeph> 和 <codeph>height</codeph> 属性。 单独设置 <codeph>width</codeph> 或 <codeph>height</codeph> 会触发两次 <codeph>autolayout</codeph> 事件，而调用 <codeph>setSize()</codeph> 方法将只引发一次 <codeph>autolayout</codeph> 事件。 
		 
		 <p>如果 <codeph>scaleMode</codeph> 属性为 <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph> 或 <codeph>VideoScaleMode.NO_SCALE</codeph>，则调用该方法会立即触发 <codeph>autolayout</codeph> 事件。</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/width"><linktext>width</linktext></link><link href="fl.video.xml#VideoPlayer/height"><linktext>height</linktext></link><link href="fl.video.xml#VideoScaleMode/MAINTAIN_ASPECT_RATIO"><linktext>VideoScaleMode.MAINTAIN_ASPECT_RATIO</linktext></link><link href="fl.video.xml#VideoScaleMode/NO_SCALE"><linktext>VideoScaleMode.NO_SCALE</linktext></link></related-links></apiOperation><apiOperation id="fl.video:VideoPlayer:stop"><apiName>stop</apiName><shortdesc>
		 停止视频回放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 停止视频回放。 如果 <codeph>autoRewind</codeph> 设置为 <codeph>true</codeph>，则后退到第一帧。 如果视频已经停止，则此方法没有任何作用。  若要再次开始播放，请调用 <codeph>play()</codeph>。 不使用任何参数。
		 
		 <p>如果播放器处于不可响应状态，则会将请求排队。</p>
		 
		 <p>如果在没有连接任何流的情况下调用，则将引发异常。  使用 <codeph>stateChange</codeph> 事件和 <codeph>connected</codeph> 属性可以确定何时调用此方法才是安全的。</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/stateResponsive"><linktext>stateResponsive</linktext></link><link href="fl.video.xml#VideoPlayer/autoRewind"><linktext>autoRewind</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link></related-links></apiOperation><apiValue id="fl.video:VideoPlayer:SHORT_VERSION"><apiName>SHORT_VERSION</apiName><shortdesc>
	指示组件短版本号的状态变量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5</apiData><apiType value="String"/></apiValueDef><apiDesc>
	指示组件短版本号的状态变量。 版本号在您有 FLA 文件并且需要知道组件版本时很有用。 要确定组件版本，请在 FLA 文件中键入下列 trace 代码：
	
	<codeblock>FLVPlayback.SHORT_VERSION</codeblock>
	
	<p><codeph>SHORT_VERSION</codeph> 变量仅包含主版本号和次版本号，例如：2.0。<codeph>VERSION</codeph> 变量包含主版本号和次版本号，以及修订版本号和生成版本号，例如：2.0.0.11。</p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/VERSION"><linktext>VERSION variable</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:VERSION"><apiName>VERSION</apiName><shortdesc>
	指示组件长版本号的状态变量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5.0.15</apiData><apiType value="String"/></apiValueDef><apiDesc>
	指示组件长版本号的状态变量。 版本号在您有 FLA 文件并且需要知道组件版本时很有用。 要确定组件版本，请在 FLA 文件中键入下列 trace 代码：
	
	<codeblock>FLVPlayback.VERSION</codeblock>
	
	<p><codeph>VERSION</codeph> 变量包含主版本号和次版本号，以及修订版本号和生成版本号，例如：2.0.0.11。<codeph>SHORT_VERSION</codeph> 变量仅包含主版本号和次版本号，例如：2.0。 </p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/SHORT_VERSION"><linktext>SHORT_VERSION variable</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:iNCManagerClass"><apiName>iNCManagerClass</apiName><shortdesc>
		 为使所有 VideoPlayer 对象将您的自定义类用作默认的 INCManager 实现，请将 iNCManagerClass 属性设置为您的自定义类的类对象或字符串名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>fl.video.NCManagerDynamicStream</apiData><apiType value="Object"/><apiDefaultValue>"fl.video.NCManager" as a string
		 
		 </apiDefaultValue><apiTipTexts><apiTipText>VideoPlayer 类
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 为使所有 VideoPlayer 对象将您的自定义类用作默认的 INCManager 实现，请将 <codeph>iNCManagerClass</codeph> 属性设置为您的自定义类的类对象或字符串名称。 FLVPlayback 类包含自定义类的定义，而视频播放器则不包含。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:netStreamClientClass"><apiName>netStreamClientClass</apiName><shortdesc>
	为 NetStream 的客户端属性注册自定义类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiType value="Object"/><apiException><apiDesc>如果将此属性设置为无效值，则会引发 <codeph>VideoError.NETSTREAM_CLIENT_CLASS_UNSET</codeph>。
   </apiDesc><apiItemName>VideoError</apiItemName><apiOperationClassifier>fl.video:VideoError</apiOperationClassifier></apiException><apiDefaultValue>fl.video.VideoPlayerClient
   </apiDefaultValue></apiValueDef><apiDesc>
	为 NetStream 的客户端属性注册自定义类。 在默认情况下，使用 <codeph>fl.video.VideoPlayerClient</codeph>；此类处理 <codeph>onMetaData()</codeph> 和 <codeph>onCuePoint()</codeph> 消息。 若要为其它消息添加自定义处理，例如 <codeph>onImageData()</codeph> 和 <codeph>onTextData()</codeph>，您可以创建自己的类并将此属性设置为该类。
	
	<p>该类的构造函数必须使用一个 <codeph>VideoPlayer</codeph> 实例作为其唯一参数，而且该参数必须具有可以使用 Boolean 值的属性。 当客户端仍在等待文件开始处应有的数据消息时，此属性应该为 <codeph>false</codeph>。 如果在接收这些消息之前 VideoPlayer 执行其调整大小或自动后退，而可能无法再收到这些消息。 默认情况下，一调用 <codeph>onMetaData()</codeph>，<codeph>fl.video.VideoPlayerClient</codeph> 就会从 ready 属性返回 <codeph>true</codeph>。</p>
	
	<p>您可以将该属性设置为该类对象本身（如下例所示）或该类的字符串名称：</p>
	<codeblock>
        import fl.video.
        VideoPlayer.netStreamClientClass = MyCustomClient;
        </codeblock>
        <p>请注意：仅仅将其设置为该类的字符串名称是无法强制该类编译到 SWF 中的。 默认值是类对象 <codeph>fl.video.VideoPlayerClient</codeph>，而不是字符串名称。</p>
	<p>极力建议将任何自定义实现都作为 <codeph>fl.video.VideoPlayer</codeph> 的子类。 其它方式都有可能造成破坏元数据和 VideoPlayer 和 FLVPlayback 组件中内置的提示点处理。</p>
	
        
   </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:align:get"><apiName>align</apiName><shortdesc>
		 指定如何相对于 registrationX、registrationY、registrationWidth 和 registrationHeight 属性显示视频。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>VideoAlign.CENTER
		 
		 </apiDefaultValue></apiValueDef><apiDesc>
		 指定如何相对于 <codeph>registrationX</codeph>、<codeph>registrationY</codeph>、<codeph>registrationWidth</codeph> 和 <codeph>registrationHeight</codeph> 属性显示视频。 当将 <codeph>scaleMode</codeph> 属性设置为 <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph> 或 <codeph>VideoScaleMode.NO_SCALE</codeph> 时，<codeph>align</codeph> 属性执行该自动布局。 在加载 FLV 文件后更改该属性会使自动布局立即开始。 值来自 VideoAlign 类。
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/registrationX"><linktext>registrationX</linktext></link><link href="fl.video.xml#VideoPlayer/registrationY"><linktext>registrationY</linktext></link><link href="fl.video.xml#VideoPlayer/registrationWidth"><linktext>registrationWidth</linktext></link><link href="fl.video.xml#VideoPlayer/registrationHeight"><linktext>registrationHeight</linktext></link><link href="fl.video.xml#VideoPlayer/scaleMode"><linktext>scaleMode</linktext></link><link href="fl.video.xml#VideoAlign"><linktext>VideoAlign</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
		 一个布尔值，如果为 true，则播放停止时（由于播放器到达流的末端或调用了 stop() 方法），会使 FLV 文件后退到第 1 帧。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
         
         </apiDefaultValue></apiValueDef><apiDesc>
		 一个布尔值，如果为 <codeph>true</codeph>，则播放停止时（由于播放器到达流的末端或调用了 <codeph>stop()</codeph> 方法），会使 FLV 文件后退到第 1 帧。 此属性对于实时流无意义。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:bufferTime:get"><apiName>bufferTime</apiName><shortdesc>
		 一个数字，指定开始播放视频流前要在内存中缓冲的秒数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 一个数字，指定开始播放视频流前要在内存中缓冲的秒数。 对于通过 RTMP 流式处理的 FLV 文件（它们并不下载并且只在内存中缓冲），使该设置的值大于默认值 0.1 十分重要。对于通过 HTTP 渐进式下载的 FLV 文件，增加该值只会带来很小的好处，尽管它可以改善在旧式、速度较慢的计算机上查看高质量视频的效果。
		 
		 <p>对于预先录制（非实时）的视频，请不要将 <codeph>bufferTime</codeph> 属性设置为 <codeph>0</codeph>；应使用默认缓冲时间或增加缓冲时间。</p>
		 
		 <p>此属性并不指定在开始回放前要下载的 FLV 文件量。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/bufferTime"><linktext>FLVPlayback.bufferTime</linktext></link><link href="fl.video.xml#VideoPlayer/isLive"><linktext>isLive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
		 一个数字，指示 HTTP 下载的下载程度，以字节数表示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/><apiTipTexts><apiTipText>已加载的字节数
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 一个数字，指示 HTTP 下载的下载程度，以字节数表示。 在没有流时、流来自 Flash Media Server (FMS) 时或者没有可用信息时，返回 0。 返回值只用于 HTTP 下载。
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
		 一个数字，指定 HTTP 下载的总下载字节数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/><apiTipTexts><apiTipText>要加载的字节数
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 一个数字，指定 HTTP 下载的总下载字节数。 在没有流时、流来自 Flash Media Server (FMS) 时或者没有可用信息时，返回 -1。 返回值只用于 HTTP 下载。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:dvrFixedDuration:get"><apiName>dvrFixedDuration</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/isDVR"><linktext/></link><link href="fl.video.xml#VideoPlayer/dvrIncrement"><linktext/></link><link href="fl.video.xml#VideoPlayer/dvrIncrementVariance"><linktext/></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:dvrIncrement:get"><apiName>dvrIncrement</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		  
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/isDVR"><linktext/></link><link href="fl.video.xml#VideoPlayer/dvrIncrementVariance"><linktext/></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:dvrIncrementVariance:get"><apiName>dvrIncrementVariance</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/isDVR"><linktext/></link><link href="fl.video.xml#VideoPlayer/dvrIncrement"><linktext/></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:dvrSnapToLive:get"><apiName>dvrSnapToLive</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		  
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/isDVR"><linktext/></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:idleTimeout:get"><apiName>idleTimeout</apiName><shortdesc>
		 由于播放暂停或停止，Flash 终止与视频服务器（例如 Flash Media Server）之间的空闲连接之前等待的时间（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 由于播放暂停或停止，Flash 终止与视频服务器（例如 Flash Media Server）之间的空闲连接之前等待的时间（以毫秒为单位）。 此属性对通过 HTTP 的 FLV 文件下载没有影响。
		 
		 <p>如果设置了此属性，则视频流空闲时，会用新值重新开始超时期间。</p>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:isDVR:get"><apiName>isDVR</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.0.0.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/isDVR"><linktext/></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:isLive:get"><apiName>isLive</apiName><shortdesc>
		 一个布尔值，如果是实时视频流，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 一个布尔值，如果是实时视频流，则为 <codeph>true</codeph>。 只有从视频服务器（例如 Flash Media Server）或其它 Flash 视频流服务进行流式加载时，此属性才有效。 对于 HTTP 下载，会忽略此属性的值。 
		 
		 <p>将预先录制的视频流发送到视频播放器时，将 <codeph>isLive</codeph> 属性设置为 <codeph>false</codeph>；发送实时数据（如实时广播）时将该属性设置为 <codeph>true</codeph>。 为提高性能，请在将 <codeph>isLive</codeph> 属性设置为 <codeph>false</codeph> 时不要将 <codeph>bufferTime</codeph> 属性设置为 <codeph>0</codeph>。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/bufferTime"><linktext>bufferTime</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/isLive"><linktext>FLVPlayback.isLive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:isRTMP:get"><apiName>isRTMP</apiName><shortdesc>
		 一个布尔值，如果正在使用 RTMP 从 Flash Media Server (FMS) 流式加载 FLV 文件，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 一个布尔值，如果正在使用 RTMP 从 Flash Media Server (FMS) 流式加载 FLV 文件，则为 <codeph>true</codeph>。 对于任何其它 FLV 文件源，它的值都是 <codeph>false</codeph>。 
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/isRTMP"><linktext>FLVPlayback.isRTMP</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:metadata:get"><apiName>metadata</apiName><shortdesc>
         一个对象，它是通过调用 NetSteam.onMetaData() 回调方法（如果有）而接收到的元数据信息包。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
         一个对象，它是通过调用 <codeph>NetSteam.onMetaData()</codeph> 回调方法（如果有）而接收到的元数据信息包。 分派 <codeph>metadataReceived</codeph> 事件后准备就绪。
		 
		 <p>如果 FLV 文件是用 Flash 8 编码器编码的，则 <codeph>metadata</codeph> 属性包含以下信息。早期的 FLV 文件只包含 <codeph>height</codeph>、<codeph>width</codeph> 和 <codeph>duration</codeph> 值。</p>
		 
		 <adobetable class="innertable">
		 	
		 		
		 		
		 
		 
 		 
 		 
 		 
 		 
		 
 		 
 		 
		 <tgroup cols="2"><thead><row><entry><b>参数</b></entry><entry><b>描述</b></entry></row></thead><tbody><row><entry><codeph>canSeekToEnd</codeph></entry><entry>一个布尔值，如果 FLV 文件是用最后一帧（它允许定位到渐进式下载影片剪辑的末尾）上的关键帧编码的，则该值为 <codeph>true</codeph>。如果 FLV 文件不是用最后一帧上的关键帧编码的，则该值为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cuePoints</codeph></entry><entry>嵌入在 FLV 文件中的提示点对象组成的数组，每个提示点对应一个对象。 如果 FLV 文件不包含任何提示点，则值是未定义的。每个对象都具有以下属性：
	       	
		 			<ul>
		 				<li><codeph>type</codeph> -- 一个字符串，它将提示点的类型指定为“navigation”或“event”。</li>
		 				<li><codeph>name</codeph> -- 一个字符串，表示提示点的名称。</li>
		 				<li><codeph>time</codeph> -- 一个数字，表示以秒为单位的提示点的时间，精确到三位小数（毫秒）。</li>
		 				<li><codeph>parameters</codeph> -- 一个可选对象，具有用户在创建提示点时指定的名称-值对。</li>
		 			</ul>
		 		</entry></row><row><entry><codeph>audiocodecid</codeph></entry><entry>一个数字，指示已使用的音频编解码器（编码/解码技术）。</entry></row><row><entry><codeph>audiodelay</codeph></entry><entry> 一个数字，在源文件中表示时间 <codeph>0</codeph>，从该时间起对 FLV 文件进行编码。 
		 <p>视频内容延迟很短的一段时间，以便与音频同步。例如，如果 <codeph>audiodelay</codeph> 值为 <codeph>.038</codeph>，则在源文件里从时间 <codeph>0</codeph> 处开始的视频在 FLV 文件里从时间 <codeph>.038</codeph> 处开始。</p> 
		 <p>请注意，FLVPlayback 和 VideoPlayer 类将在其时间设置中补偿该延迟。 这意味着您可以继续使用在源文件中所使用的时间设置。</p>
</entry></row><row><entry><codeph>audiodatarate</codeph></entry><entry>一个数字，表示每秒音频的千字节数。</entry></row><row><entry><codeph>videocodecid</codeph></entry><entry>一个数字，表示用于对视频进行编码的编解码器版本。</entry></row><row><entry><codeph>framerate</codeph></entry><entry>一个数字，表示 FLV 文件的帧频。</entry></row><row><entry><codeph>videodatarate</codeph></entry><entry>一个数字，表示 FLV 文件的视频数据速率。</entry></row><row><entry><codeph>height</codeph></entry><entry>一个数字，表示 FLV 文件的高度。</entry></row><row><entry><codeph>width</codeph></entry><entry>一个数字，表示 FLV 文件的宽度。</entry></row><row><entry><codeph>duration</codeph></entry><entry>一个数字，以秒为单位指定 FLV 文件的持续时间。</entry></row></tbody></tgroup></adobetable>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/metadata"><linktext>FLVPlayback.metadata</linktext></link><link href="fl.video.xml#VideoPlayer/load()"><linktext>load()</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:ncMgr:get"><apiName>ncMgr</apiName><shortdesc>
		 一个 INCManager 对象，它提供对实现 INCManager 的类的实例的访问，而该类是 NCManager 类的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>fl.video:INCManager</apiValueClassifier></apiValueDef><apiDesc>
		 一个 INCManager 对象，它提供对实现 <codeph>INCManager</codeph> 的类的实例的访问，而该类是 NCManager 类的接口。
		 
		 <p>您可以使用此属性来实现需要自定义初始化的自定义 INCManager。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/ncMgr"><linktext>FLVPlayback.ncMgr</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:netConnection:get"><apiName>netConnection</apiName><shortdesc>
		 允许直接访问由视频播放器创建的 NetConnection 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.net:NetConnection"/></apiValueDef><apiDesc>
		 允许直接访问由视频播放器创建的 NetConnection 实例。  
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:netStream:get"><apiName>netStream</apiName><shortdesc>
		 允许直接访问由视频播放器创建的 NetStream 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.net:NetStream"/></apiValueDef><apiDesc>
		 允许直接访问由视频播放器创建的 NetStream 实例。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
		 一个数字，表示当前播放头的时间或位置（以秒为单位计算），可以是小数值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiTipTexts><apiTipText>播放头的当前位置（以秒为单位）
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 一个数字，表示当前播放头的时间或位置（以秒为单位计算），可以是小数值。 设置此属性会触发搜索，并具有搜索的所有限制。
		 
		 <p>播放头时间发生变化（包括播放 FLV 文件时每隔 0.25 秒更改一次）时，该组件会调度 <codeph>playheadUpdate</codeph> 事件。</p>
		 
		 <p>由于几种原因，在调用一种搜索方法或者设置 <codeph>playheadTime</codeph> 以引发搜索后，<codeph>playheadTime</codeph> 属性中不太可能立即包含预期值。 首先，对于渐进式下载，由于只能搜索关键帧，因此搜索将转到指定时间后第一个关键帧的时间。  （对于流式下载，搜索总是转到指定的确切时间，即使 FLV 源文件在此处没有关键帧也是如此。）  其次，由于搜索是异步执行的，因此，如果调用 seek 方法或者设置 playheadTime 属性，则 <codeph>playheadTime</codeph> 不会立即更新。 若要在搜索完成后获取时间，请侦听 <codeph>seek</codeph> 事件，该事件在 <codeph>playheadTime</codeph> 属性更新后才会引发。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/seek()"><linktext>seek()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/playheadTime"><linktext>FLVPlayback.playheadTime</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:playheadUpdateInterval:get"><apiName>playheadUpdateInterval</apiName><shortdesc>
		 一个数字，表示每个 playheadUpdate 事件之间的时间量，以毫秒为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>250
         
         </apiDefaultValue></apiValueDef><apiDesc>
		 一个数字，表示每个 <codeph>playheadUpdate</codeph> 事件之间的时间量，以毫秒为单位。 播放 FLV 文件时设置此属性会重新启动计时器。 
		 
		 <p>因为 ActionScript 提示点在播放头更新时开始，所以，降低 <codeph>playheadUpdateInterval</codeph> 属性的值可增加 ActionScript 提示点的精确度。</p>
		 
		 <p>因为播放头更新间隔是通过调用全局 <codeph>setInterval()</codeph> 方法设置的，所以，更新操作无法比 SWF 文件帧频更频繁地触发，这与此方法设置的任何间隔一样。 因此，举例来说，对于每秒 12 帧的默认帧频而言，您可以创建的最低有效间隔大约为 83 毫秒，或者 1 秒（1000 毫秒）的 12 分之 1。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/playheadUpdateInterval"><linktext>FLVPlayback.playheadUpdateInterval</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:progressInterval:get"><apiName>progressInterval</apiName><shortdesc>
		 一个数字，表示每个 progress 事件之间的时间量，以毫秒为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 一个数字，表示每个 <codeph>progress</codeph> 事件之间的时间量，以毫秒为单位。 如果您在播放视频流时设置此属性，则会重新启动记时器。 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:registrationHeight:get"><apiName>registrationHeight</apiName><shortdesc>
		 高度，用于在自动调整大小时对齐视频内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 高度，用于在自动调整大小时对齐视频内容。 请勿将 <codeph>registrationHeight</codeph> 属性与 <codeph>height</codeph> 属性混淆。 <codeph>height</codeph> 属性反映视频内容的实际高度。
		 
		 <p>示例 1，使用下列设置加载一 80x80 FLV 文件：
		 <ul>
		 <li><codeph>registrationX</codeph> = 100</li> 
		 <li><codeph>registrationY</codeph> = 100</li>
		 <li><codeph>registrationWidth</codeph> = 60</li> 
		 <li><codeph>registrationHeight</codeph> = 40</li>
		 <li><codeph>align</codeph> = <codeph>VideoAlign.CENTER</codeph></li> 
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.NO_SCALE</codeph></li>
		 </ul>
		 
		 
		 经过自动调整大小后，您将得到：
		 <ul>
		 <li><codeph>x</codeph> = 90</li>
		 <li><codeph>y</codeph> = 80</li>
		 <li><codeph>width</codeph> = 80</li>
		 <li><codeph>height</codeph> = 80</li>  
		 </ul>
		 </p>
		 
		 <p>示例 2，使用下列设置加载与示例 1 相同的场景：
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph></li>
		 </ul>
		 
		 您将得到：
		 <ul>
		 <li><codeph>x</codeph> = 110</li>
		 <li><codeph>y</codeph> = 100</li> 
		 <li><codeph>width</codeph> = 40</li> 
		 <li><codeph>height</codeph> = 80</li>
		 </ul>
		 </p>
		 
		 <p>示例 3，使用下列设置加载与示例 2 相同的场景：
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.EXACT_FIT</codeph></li>
		 </ul>
		 
		 您将获得与注册值相同的所有值：
		 <ul>
		 <li><codeph>x</codeph> = 100</li> 
		 <li><codeph>y</codeph> = 100</li>
		 <li><codeph>width</codeph> = 60</li> 
		 <li><codeph>height</codeph> = 40</li>
		 </ul>
		 </p>
		 
		 <p>设置 <codeph>registrationHeight</codeph> 属性等同于设置 <codeph>height</codeph> 属性，反之亦然。 设置任何其它属性或调用更改高度的任何方法（例如 <codeph>scaleX</codeph>、<codeph>setSize</codeph> 和 <codeph>setScale</codeph>）也会使 <codeph>height</codeph> 和 <codeph>registrationHeight</codeph> 保持同步。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/registrationX"><linktext>registrationX</linktext></link><link href="fl.video.xml#VideoPlayer/registrationY"><linktext>registrationY</linktext></link><link href="fl.video.xml#VideoPlayer/registrationWidth"><linktext>registrationWidth</linktext></link><link href="fl.video.xml#VideoAlign"><linktext>VideoAlign</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:registrationWidth:get"><apiName>registrationWidth</apiName><shortdesc>
		 宽度，用于在自动调整大小时对齐视频内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 宽度，用于在自动调整大小时对齐视频内容。 请勿将 <codeph>registrationWidth</codeph> 属性与 <codeph>width</codeph> 属性混淆。 <codeph>width</codeph> 属性反映视频内容的实际宽度。
		 
		 <p>示例 1，使用下列设置加载一 80x80 FLV 文件：
		 <ul>
		 <li><codeph>registrationX</codeph> = 100</li> 
		 <li><codeph>registrationY</codeph> = 100</li>
		 <li><codeph>registrationWidth</codeph> = 60</li> 
		 <li><codeph>registrationHeight</codeph> = 40</li>
		 <li><codeph>align</codeph> = <codeph>VideoAlign.CENTER</codeph></li> 
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.NO_SCALE</codeph></li>
		 </ul>
		 
		 
		 经过自动调整大小后，您将得到：
		 <ul>
		 <li><codeph>x</codeph> = 90</li>
		 <li><codeph>y</codeph> = 80</li>
		 <li><codeph>width</codeph> = 80</li>
		 <li><codeph>height</codeph> = 80</li>  
		 </ul>
		 </p>
		 
		 <p>示例 2，使用下列设置加载与示例 1 相同的场景：
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph></li>
		 </ul>
		 
		 您将得到：
		 <ul>
		 <li><codeph>x</codeph> = 110</li>
		 <li><codeph>y</codeph> = 100</li> 
		 <li><codeph>width</codeph> = 40</li> 
		 <li><codeph>height</codeph> = 80</li>
		 </ul>
		 </p>
		 
		 <p>示例 3，使用下列设置加载与示例 2 相同的场景：
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.EXACT_FIT</codeph></li>
		 </ul>
		 
		 您将获得与注册值相同的所有值：
		 <ul>
		 <li><codeph>x</codeph> = 100</li> 
		 <li><codeph>y</codeph> = 100</li>
		 <li><codeph>width</codeph> = 60</li> 
		 <li><codeph>height</codeph> = 40</li>
		 </ul>
		 </p>
		 
		 <p>设置 <codeph>registrationWidth</codeph> 属性等同于设置 <codeph>width</codeph> 属性，反之亦然。 设置任何其它属性或调用更改宽度的任何方法（例如 <codeph>scaleX</codeph>、<codeph>setSize</codeph> 和 <codeph>setScale</codeph>）也会使 <codeph>width</codeph> 和 <codeph>registrationWidth</codeph> 保持同步。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/registrationX"><linktext>registrationX</linktext></link><link href="fl.video.xml#VideoPlayer/registrationY"><linktext>registrationY</linktext></link><link href="fl.video.xml#VideoPlayer/registrationHeight"><linktext>registrationHeight</linktext></link><link href="fl.video.xml#VideoAlign"><linktext>VideoAlign</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:registrationX:get"><apiName>registrationX</apiName><shortdesc>
		 x 坐标，用于在自动调整大小时对齐视频内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 x 坐标，用于在自动调整大小时对齐视频内容。 请勿将其与反映视频内容实际位置的 <codeph>x</codeph> 属性混淆。
		 
		 <p>示例 1，使用下列设置加载一 80x80 FLV 文件：
		 <ul>
		     <li><codeph>registrationX</codeph> = 100</li> 
		     <li><codeph>registrationY</codeph> = 100</li>
		     <li><codeph>registrationWidth</codeph> = 60</li> 
		     <li><codeph>registrationHeight</codeph> = 40</li>
		     <li><codeph>align</codeph> = <codeph>VideoAlign.CENTER</codeph></li> 
		     <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.NO_SCALE</codeph></li>
		 </ul>
		 
		 
		 经过自动调整大小后，您将得到：
		 <ul>
             <li><codeph>x</codeph> = 90</li>
             <li><codeph>y</codeph> = 80</li>
             <li><codeph>width</codeph> = 80</li>
             <li><codeph>height</codeph> = 80</li>  
		 </ul>
		 </p>
		 
		 <p>示例 2，使用下列设置加载与示例 1 相同的场景：
		 <ul>
		     <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph></li>
		 </ul>
		 
		 您将得到：
		 <ul>
		 <li><codeph>x</codeph> = 110</li>
		 <li><codeph>y</codeph> = 100</li> 
		 <li><codeph>width</codeph> = 40</li> 
		 <li><codeph>height</codeph> = 80</li>
		 </ul>
		 </p>
		 
		 <p>示例 3，使用下列设置加载与示例 2 相同的场景：
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.EXACT_FIT</codeph></li>
		 </ul>
		 
		 您将获得与注册值相同的所有值：
		 <ul>
		 <li><codeph>x</codeph> = 100</li> 
		 <li><codeph>y</codeph> = 100</li>
		 <li><codeph>width</codeph> = 60</li> 
		 <li><codeph>height</codeph> = 40</li>
		 </ul>
		 </p>
		 
		 <p>如果设置了 <codeph>x</codeph> 或 <codeph>registrationX</codeph> 属性，则第二个属性会更改以维持其与第一个属性的偏移量。 例如，如果 <codeph>x</codeph> = 10 且 <codeph>registrationX</codeph> = 20，则设置 <codeph>x</codeph> = 110 的同时也会设置 <codeph>registrationX</codeph> = 120。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/registrationY"><linktext>registrationY</linktext></link><link href="fl.video.xml#VideoPlayer/registrationWidth"><linktext>registrationWidth</linktext></link><link href="fl.video.xml#VideoPlayer/registrationHeight"><linktext>registrationHeight</linktext></link><link href="fl.video.xml#VideoAlign"><linktext>VideoAlign</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:registrationY:get"><apiName>registrationY</apiName><shortdesc>
		 y 坐标，用于在自动调整大小时对齐视频内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 y 坐标，用于在自动调整大小时对齐视频内容。 请勿将其与反映视频内容实际位置的 <codeph>y</codeph> 属性混淆。
		 
		 <p>示例 1，使用下列设置加载一 80x80 FLV 文件：
		 <ul>
		 <li><codeph>registrationX</codeph> = 100</li> 
		 <li><codeph>registrationY</codeph> = 100</li>
		 <li><codeph>registrationWidth</codeph> = 60</li> 
		 <li><codeph>registrationHeight</codeph> = 40</li>
		 <li><codeph>align</codeph> = <codeph>VideoAlign.CENTER</codeph></li> 
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.NO_SCALE</codeph></li>
		 </ul>
		 
		 
		 经过自动调整大小后，您将得到：
		 <ul>
		 <li><codeph>x</codeph> = 90</li>
		 <li><codeph>y</codeph> = 80</li>
		 <li><codeph>width</codeph> = 80</li>
		 <li><codeph>height</codeph> = 80</li>  
		 </ul>
		 </p>
		 
		 <p>示例 2，使用下列设置加载与示例 1 相同的场景：
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph></li>
		 </ul>
		 
		 您将得到：
		 <ul>
		 <li><codeph>x</codeph> = 110</li>
		 <li><codeph>y</codeph> = 100</li> 
		 <li><codeph>width</codeph> = 40</li> 
		 <li><codeph>height</codeph> = 80</li>
		 </ul>
		 </p>
		 
		 <p>示例 3，使用下列设置加载与示例 2 相同的场景：
		 <ul>
		 <li><codeph>scaleMode</codeph> = <codeph>VideoScaleMode.EXACT_FIT</codeph></li>
		 </ul>
		 
		 您将获得与注册值相同的所有值：
		 <ul>
		 <li><codeph>x</codeph> = 100</li> 
		 <li><codeph>y</codeph> = 100</li>
		 <li><codeph>width</codeph> = 60</li> 
		 <li><codeph>height</codeph> = 40</li>
		 </ul>
		 </p>
		 
		 <p>如果设置了 <codeph>y</codeph> 或 <codeph>registrationY</codeph> 属性，则第二个属性会更改以维持其与第一个属性的偏移量。 例如，如果 <codeph>y</codeph> = 10 且 <codeph>registrationY</codeph> = 20，则设置 <codeph>y</codeph> = 110 的同时也会设置 <codeph>registrationY</codeph> = 120。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/registrationX"><linktext>registrationX</linktext></link><link href="fl.video.xml#VideoPlayer/registrationWidth"><linktext>registrationWidth</linktext></link><link href="fl.video.xml#VideoPlayer/registrationHeight"><linktext>registrationHeight</linktext></link><link href="fl.video.xml#VideoAlign"><linktext>VideoAlign</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:scaleMode:get"><apiName>scaleMode</apiName><shortdesc>
		 指定在视频加载后如何调整其大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>VideoScaleMode.MAINTAIN_ASPECT_RATIO
                 
                 </apiDefaultValue></apiValueDef><apiDesc>
		 指定在视频加载后如何调整其大小。 如果设置为 <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph>，则将视频高宽比保持在由 <codeph>registrationX</codeph>、<codeph>registrationY</codeph>、<codeph>registrationWidth</codeph> 和 <codeph>registrationHeight</codeph> 所定义的矩形内。 如果设置为 <codeph>VideoScaleMode.NO_SCALE</codeph>，则会使视频自动调整为源 FLV 文件尺寸大小。 如果设置为 <codeph>VideoScaleMode.EXACT_FIT</codeph>，则忽略源 FLV 文件的尺寸大小，并将视频拉伸到适合 <codeph>registrationX</codeph>、<codeph>registrationY</codeph>、<codeph>registrationWidth</codeph> 和 <codeph>registrationHeight</codeph> 所定义的矩形。 如果在加载 FLV 文件后设置该属性，则立即开始自动布局。 值来自 <codeph>VideoScaleMode</codeph>。
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoScaleMode"><linktext>VideoScaleMode</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:soundTransform:get"><apiName>soundTransform</apiName><shortdesc>
		 提供对 NetStream.soundTransform 属性的直接访问，以提供更多声音控制。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.media:SoundTransform"/></apiValueDef><apiDesc>
		 提供对 <codeph>NetStream.soundTransform</codeph> 属性的直接访问，以提供更多声音控制。 设置此属性以更改设置；使用此属性的 getter 存取器方法来恢复当前设置。
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/volume"><linktext>volume</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:source:get"><apiName>source</apiName><shortdesc>
		 一个字符串，它指定要进行流式处理的 FLV 文件的 URL 以及如何对其进行流式处理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 一个字符串，它指定要进行流式处理的 FLV 文件的 URL 以及如何对其进行流式处理。 URL 可以是指向 FLV 文件的 HTTP URL、指向流的 RTMP URL，也可以是指向 XML 文件的 HTTP URL。
		 
		 <p>如果您通过组件检查器或属性检查器设置了此属性，则 FLV 文件在发生下一个 <codeph>enterFrame</codeph> 事件时开始加载和播放。 在延迟期间可以设置影响加载的 <codeph>isLive</codeph>、<codeph>autoPlay</codeph> 和 <codeph>cuePoints</codeph> 等属性。 它还允许放置在第一帧上的 ActionScript 在 FLVPlayback 组件开始播放前对其产生影响。</p>
		 
		 <p>如果您通过 ActionScript 设置该属性，则它会在 <codeph>autoPlay</codeph> 属性设置为 <codeph>false</codeph> 时，立即调用 <codeph>VideoPlayer.load()</codeph> 方法。 或者，它会在 <codeph>autoPlay</codeph> 属性设置为 <codeph>true</codeph> 时调用 <codeph>VideoPlayer.play()</codeph> 方法。 <codeph>autoPlay</codeph>、<codeph>totalTime</codeph> 和 <codeph>isLive</codeph> 属性影响新 FLV 文件的加载方式，因此，如果您要设置这些属性，则必须在设置 <codeph>source</codeph> 属性前设置它们。</p>
		 
		 <p>通过将 <codeph>autoPlay</codeph> 属性设置为 <codeph>false</codeph>，可以防止自动播放新的 FLV 文件。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/autoPlay"><linktext>FLVPlayback.autoPlay</linktext></link><link href="fl.video.xml#VideoPlayer/isLive"><linktext>isLive</linktext></link><link href="fl.video.xml#VideoPlayer/totalTime"><linktext>totalTime</linktext></link><link href="fl.video.xml#VideoPlayer/load()"><linktext>load()</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>play()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/load()"><linktext>FLVPlayback.load()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/play()"><linktext>FLVPlayback.play()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:state:get"><apiName>state</apiName><shortdesc>
		 一个字符串，指定组件的状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		 一个字符串，指定组件的状态。 该属性通过 <codeph>load()</codeph>、<codeph>play()</codeph>、<codeph>stop()</codeph>、<codeph>pause()</codeph> 和 <codeph>seek()</codeph> 方法进行设置。 
		 
		 <p>state 属性的可能值包括：<codeph>buffering</codeph>、<codeph>connectionError</codeph>、<codeph>disconnected</codeph>、<codeph>loading</codeph>、<codeph>paused</codeph>、<codeph>playing</codeph>、<codeph>rewinding</codeph>、<codeph>seeking</codeph> 和 <codeph>stopped</codeph>。 您可以使用 FLVPlayback 类属性测试这些状态。 </p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState/DISCONNECTED"><linktext>VideoState.DISCONNECTED</linktext></link><link href="fl.video.xml#VideoState/STOPPED"><linktext>VideoState.STOPPED</linktext></link><link href="fl.video.xml#VideoState/PLAYING"><linktext>VideoState.PLAYING</linktext></link><link href="fl.video.xml#VideoState/PAUSED"><linktext>VideoState.PAUSED</linktext></link><link href="fl.video.xml#VideoState/BUFFERING"><linktext>VideoState.BUFFERING</linktext></link><link href="fl.video.xml#VideoState/LOADING"><linktext>VideoState.LOADING</linktext></link><link href="fl.video.xml#VideoState/CONNECTION_ERROR"><linktext>VideoState.CONNECTION_ERROR</linktext></link><link href="fl.video.xml#VideoState/REWINDING"><linktext>VideoState.REWINDING</linktext></link><link href="fl.video.xml#VideoState/SEEKING"><linktext>VideoState.SEEKING</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:stateResponsive:get"><apiName>stateResponsive</apiName><shortdesc>
		 一个布尔值，如果处于响应状态，则为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 一个布尔值，如果处于响应状态，则为 <codeph>true</codeph>。 如果状态为不可响应状态，则对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph>、<codeph>pause()</codeph> 和 <codeph>seek()</codeph> 方法的调用将被排队，以供以后在状态更改为可响应状态时执行。 因为这些调用被排队并在以后执行，所以，通常不必跟踪 <codeph>stateResponsive </codeph> 属性的值。 可响应状态是：<codeph>stopped</codeph>、<codeph>playing</codeph>、<codeph>paused</codeph> 和 <codeph>buffering</codeph>。 
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link><link href="fl.video.xml#VideoState/DISCONNECTED"><linktext>VideoState.DISCONNECTED</linktext></link><link href="fl.video.xml#VideoState/STOPPED"><linktext>VideoState.STOPPED</linktext></link><link href="fl.video.xml#VideoState/PLAYING"><linktext>VideoState.PLAYING</linktext></link><link href="fl.video.xml#VideoState/PAUSED"><linktext>VideoState.PAUSED</linktext></link><link href="fl.video.xml#VideoState/LOADING"><linktext>VideoState.LOADING</linktext></link><link href="fl.video.xml#VideoState/RESIZING"><linktext>VideoState.RESIZING</linktext></link><link href="fl.video.xml#VideoState/CONNECTION_ERROR"><linktext>VideoState.CONNECTION_ERROR</linktext></link><link href="fl.video.xml#VideoState/REWINDING"><linktext>VideoState.REWINDING</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:totalTime:get"><apiName>totalTime</apiName><shortdesc>
		 一个数字，表示视频的总播放时间，以秒为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiTipTexts><apiTipText>FLV 的总长度（以秒为单位）
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 一个数字，表示视频的总播放时间，以秒为单位。
		 
		 <p>在从 Flash Media Server (FMS) 进行流式加载并使用默认的 <codeph>NCManager</codeph> 时，服务器端应用程序编程接口 (API) 会自动确定此值，并且该值会覆盖通过此属性设置或从元数据中收集的任何值。 设置 <codeph>source</codeph> 属性后，可以在到达 <codeph>stopped</codeph> 或 <codeph>playing</codeph> 状态时读取此属性。 此属性对于来自 FMS 的实时流无意义。</p>
		 
		 <p>对于 HTTP 下载，如果 FLV 文件嵌入了元数据，则会自动确定该值；如果未嵌入元数据，则应显式设置该值，否则该值将为 NaN。 如果显式设置该值，则将忽略流中的元数据值。</p>
		 
		 <p>设置此属性时，该值会影响通过设置 <codeph>source</codeph> 加载的下一个 FLV 文件。 但它对已加载的 FLV 文件没有任何影响。 而且，在加载 FLV 文件之后，此属性才会返回传递到其中的新值。</p>
		 
		 <p>如果从未设置此属性（显式或自动），则回放仍有效，但可能会导致搜索控件出问题。</p>
		 
		 <p>除非显式设置该值，否则在将其设置为一个来自元数据的有效值之前，该值一直为 NaN。</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/source"><linktext>source</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:videoHeight:get"><apiName>videoHeight</apiName><shortdesc>
		 加载的 FLV 文件的源宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 加载的 FLV 文件的源宽度。 如果还没有可用的信息，则该属性返回 -1。
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/height"><linktext>height</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:videoWidth:get"><apiName>videoWidth</apiName><shortdesc>
		 加载的 FLV 文件的源宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
		 加载的 FLV 文件的源宽度。 如果还没有可用的信息，则该属性返回 -1。
		 
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/width"><linktext>width</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:visible:get"><apiName>visible</apiName><shortdesc>
		 一个布尔值，如果为 true，则 VideoPlayer 实例可见。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
         
         </apiDefaultValue></apiValueDef><apiDesc>
		 一个布尔值，如果为 <codeph>true</codeph>，则 VideoPlayer 实例可见。 如果为 <codeph>false</codeph>，则会使实例不可见。 
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoPlayer:volume:get"><apiName>volume</apiName><shortdesc>
		 一个数字，介于 0 到 1 的范围内，指示音量控制设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
		 
		 </apiDefaultValue><apiTipTexts><apiTipText>音量设置，取值范围为 0 到 1。
		 
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 一个数字，介于 0 到 1 的范围内，指示音量控制设置。 
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/soundTransform"><linktext>soundTransform</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:height:set"><apiName>height</apiName><shortdesc>
		 一个数字，指定 VideoPlayer 实例的高度，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
		 一个数字，指定 VideoPlayer 实例的高度，以像素为单位。 
		 
		 <p><b>注意</b>：请勿将该属性与类似于 <codeph>fl.video.VideoPlayer.videoHeight</codeph> 属性的 <codeph>flash.media.Video.height</codeph> 属性混淆。</p>
         
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#height/setSize()"><linktext>setSize()</linktext></link><link href="" invalidHref="flash.media.xml#Video/videoHeight"><linktext>Video.videoHeight</linktext></link><link href="" invalidHref="fl.video.xml#height/videoHeight"><linktext>VideoPlayer.videoHeight</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:scaleX:set"><apiName>scaleX</apiName><shortdesc>
		 一个代表水平缩放的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/><apiDefaultValue>1
         </apiDefaultValue></apiValueDef><apiDesc>
		 一个代表水平缩放的数字。 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#scaleX/setScale()"><linktext>setScale()</linktext></link><link href="" invalidHref="fl.video.xml#scaleX/scaleY"><linktext>scaleY</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:scaleY:set"><apiName>scaleY</apiName><shortdesc>
		 一个代表垂直缩放的数字。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/><apiDefaultValue>1
         </apiDefaultValue></apiValueDef><apiDesc>
		 一个代表垂直缩放的数字。 
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#scaleY/setScale()"><linktext>setScale()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:width:set"><apiName>width</apiName><shortdesc>
		 一个数字，指定舞台上 VideoPlayer 实例的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
		 一个数字，指定舞台上 VideoPlayer 实例的宽度。
		 
		 <p><b>注意</b>：<codeph>flash.media.Video.width</codeph> 属性与 <codeph>fl.video.VideoPlayer.videoWidth</codeph> 属性类似。</p>
         
		 
		 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#width/setSize()"><linktext>setSize()</linktext></link><link href="" invalidHref="flash.media.xml#Video/videoWidth"><linktext>Video.videoWidth</linktext></link><link href="" invalidHref="fl.video.xml#width/videoWidth"><linktext>VideoPlayer.videoWidth</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:x:set"><apiName>x</apiName><shortdesc>
		 一个数字，指定视频播放器的水平位置，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
		 一个数字，指定视频播放器的水平位置，以像素为单位。
		 
		 <p>设置 <codeph>x</codeph> 属性也会影响到 <codeph>registrationX</codeph> 属性。 如果设置了 <codeph>x</codeph> 或 <codeph>registrationX</codeph> 属性，则第二个属性会更改以维持其与第一个属性的偏移量。 例如，如果 <codeph>x</codeph> = 10 且 <codeph>registrationX</codeph> = 20，则设置 <codeph>x</codeph> = 110 的同时也会设置 <codeph>registrationX</codeph> = 120。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#x/registrationX"><linktext>registrationX</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoPlayer:y:set"><apiName>y</apiName><shortdesc>
		 一个数字，指定视频播放器的垂直位置，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Number"/></apiValueDef><apiDesc>
		 一个数字，指定视频播放器的垂直位置，以像素为单位。
		 
		 <p>设置 <codeph>y</codeph> 属性也会影响到 <codeph>registrationY</codeph> 属性。 如果设置了 <codeph>y</codeph> 或 <codeph>registrationY</codeph> 属性，则第二个属性会更改以维持其与第一个属性的偏移量。 例如，如果 <codeph>y</codeph> = 10 且 <codeph>registrationY</codeph> = 20，则设置 <codeph>y</codeph> = 110 的同时也会设置 <codeph>registrationY</codeph> = 120。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#y/registrationY"><linktext>registrationY</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:NCManager"><apiName>NCManager</apiName><shortdesc>
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>fl.video:INCManager</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 <codeph/>
	 
	 <p>NCManager 类搜索 URL 并假定：</p>
	 <ul>
	 <li/>
	 <li/>
	 <li>如果其以 .flv 结尾，则推断其为渐进式下载的 FLV。 否则，其为要下载和分析的 SMIL 文件。</li>
	 </ul>
	 
	 </apiDesc><example conref="NCManagerExample.as"/></apiClassifierDetail><apiConstructor id="fl.video:NCManager:NCManager"><apiName>NCManager</apiName><shortdesc>
         创建新的 NCManager 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
         创建新的 NCManager 实例。
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="fl.video:NCManager:close"><apiName>close</apiName><shortdesc conref="INCManager#close()">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="INCManager#close()">
	 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/close()"><linktext>INCManager.close()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:connectAgain"><apiName>connectAgain</apiName><shortdesc conref="INCManager#connectAgain()">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果尝试建立其它连接，则为 <codeph>true</codeph>。 如果已经进行过尝试或者不值得再次尝试，则为 <codeph>false</codeph>。
         
         </apiDesc></apiReturn></apiOperationDef><apiDesc conref="INCManager#connectAgain()">
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/connectAgain()"><linktext>INCManager.connectAgain()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:connectToURL"><apiName>connectToURL</apiName><shortdesc conref="INCManager#connectToURL()">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>如果同步建立连接，则为 <codeph>true</codeph>。 如果尝试异步建立连接，以便调用方收到“connected”事件，则为 <codeph>false</codeph>。
         
         </apiDesc></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiDesc>VideoPlayer 对象请求连接的 URL。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="INCManager#connectToURL()">
	 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/connectToURL()"><linktext>INCManager.connectToURL()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:getProperty"><apiName>getProperty</apiName><shortdesc>
		 允许获取 fallbackServerName、fpadZone、objectEncoding 和 proxyType 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>fallbackServerName、fpadZone、objectEncoding 和 proxyType 属性的字符串表示形式。
         </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="String"/><apiDesc><codeph>getProperty</codeph> 方法正在调用的属性的名称。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 允许获取 <codeph>fallbackServerName</codeph>、<codeph>fpadZone</codeph>、<codeph>objectEncoding</codeph> 和 <codeph>proxyType</codeph> 属性。 有关这些属性的说明，请参阅“<codeph>setProperty()</codeph>”。
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#NCManager/setProperty()"><linktext>setProperty()</linktext></link><link href="fl.video.xml#NCManager/fallbackServerName"><linktext>fallbackServerName</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:helperDone"><apiName>helperDone</apiName><shortdesc conref="INCManager#helperDone()">
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>helper</apiItemName><apiType value="Object"/><apiDesc>帮助器对象。
         
         </apiDesc></apiParam><apiParam><apiItemName>success</apiItemName><apiType value="Boolean"/><apiDesc>某任务完成时的信号设置。 如果 <codeph>success</codeph> 为 <codeph>true</codeph>，则说明任务成功完成；否则为 <codeph>false</codeph>。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc conref="INCManager#helperDone()">
	 
	 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/helperDone()"><linktext>INCManager.helperDone()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:reconnect"><apiName>reconnect</apiName><shortdesc conref="INCManager#reconnect()">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="INCManager#reconnect()">
	 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/reconnect()"><linktext>INCManager.reconnect()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:NCManager:setProperty"><apiName>setProperty</apiName><shortdesc>
		 允许设置 fallbackServerName、fpadZone、objectEncoding 和 proxyType 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="String"/><apiDesc><codeph>setProperty</codeph> 方法正在调用的属性的名称。
		 
		 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>属性值。
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 允许设置 <codeph>fallbackServerName</codeph>、<codeph>fpadZone</codeph>、<codeph>objectEncoding</codeph> 和 <codeph>proxyType</codeph> 属性。
		 
		 <p><codeph>fallbackServerName</codeph> 属性指定当派生自传递给 <codeph>connectToURL()</codeph> 的 URL 的主服务器地址无法访问时，将使用的 Flash Media Server (FMS) URL。 也可以通过 <codeph>fallbackServerName</codeph> 属性直接设置该属性。</p>
		 
	 <p><codeph>fpadZone</codeph> 属性指定 Flash Media Server (FMS) 的 <codeph>fpadZone</codeph> 属性。 如果返回值不是数字 (NaN)，则不设置任何区域。 必须在连接过程开始生效前设置 <codeph>fpadZone</codeph> 属性。 如果您不想设置区域，请将 <codeph>fpadZone</codeph> 属性设置为 <codeph>NaN</codeph>。</p>
		 默认值为 <codeph>NaN</codeph>。
		 
		 <p><codeph>objectEncoding</codeph> 属性指定 <codeph>NetConnection</codeph> 实例上的 <codeph>objectEncoding</codeph> 属性要使用的值。 默认值为 <codeph>flash.net.ObjectEncoding.AMF0</codeph>。</p>
		 
		 <p><codeph>proxyType</codeph> 属性指定 <codeph>NetConnection</codeph> 实例上的 <codeph>proxyType</codeph> 属性要使用的值。 默认值为“best”。</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#NCManager/getProperty()"><linktext>getProperty()</linktext></link><link href="fl.video.xml#NCManager/fallbackServerName"><linktext>fallbackServerName</linktext></link></related-links></apiOperation><apiValue id="fl.video:NCManager:DEFAULT_TIMEOUT"><apiName>DEFAULT_TIMEOUT</apiName><shortdesc>
	 默认超时时间，以毫秒为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiData>60000</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	 默认超时时间，以毫秒为单位。
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/timeout"><linktext>INCManager.timeout</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:SHORT_VERSION"><apiName>SHORT_VERSION</apiName><shortdesc>
	指示组件短版本号的状态变量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5</apiData><apiType value="String"/></apiValueDef><apiDesc>
	指示组件短版本号的状态变量。 版本号在您有 FLA 文件并且需要知道组件版本时很有用。 要确定组件版本，请在 FLA 文件中键入下列 trace 代码：
	
	<codeblock>FLVPlayback.SHORT_VERSION</codeblock>
	
	<p><codeph>SHORT_VERSION</codeph> 变量仅包含主版本号和次版本号，例如：2.0。<codeph>VERSION</codeph> 变量包含主版本号和次版本号，以及修订版本号和生成版本号，例如：2.0.0.11。</p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#NCManager/VERSION"><linktext>VERSION variable</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:VERSION"><apiName>VERSION</apiName><shortdesc>
	指示组件长版本号的状态变量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5.0.15</apiData><apiType value="String"/></apiValueDef><apiDesc>
	指示组件长版本号的状态变量。 版本号在您有 FLA 文件并且需要知道组件版本时很有用。 要确定组件版本，请在 FLA 文件中键入下列 trace 代码：
	
	<codeblock>FLVPlayback.VERSION</codeblock>
	
	<p><codeph>VERSION</codeph> 变量包含主版本号和次版本号，以及修订版本号和生成版本号，例如：2.0.0.11。<codeph>SHORT_VERSION</codeph> 变量仅包含主版本号和次版本号，例如：2.0。 </p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#NCManager/SHORT_VERSION"><linktext>SHORT_VERSION variable</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:fallbackServerName"><apiName>fallbackServerName</apiName><shortdesc>
	 间接或直接公开 fallbackServerName 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	 间接或直接公开 <codeph>fallbackServerName</codeph> 属性。
	 
	 <ul>
	 <li>间接 -- 在 SMIL 中提供另一个 &lt;meta base>。 <codeph>fallbackServerName</codeph> 属性 (property) 使用该 base 属性 (attribute)。 （<codeph>fallbackServerName</codeph> 属性仅使用服务器名称，不使用其它名称。）</li>
	 
	 <li>直接 -- 访问 FLVPlayback 或 VideoPlayer 中的 <codeph>ncMgr</codeph> 属性并设置 <codeph>fallbackServerName</codeph> 属性或使用 <codeph>setProperty()</codeph> 方法。</li>
         </ul>
         
		 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#NCManager/setProperty()"><linktext>setProperty()</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:bitrate:get"><apiName>bitrate</apiName><shortdesc>
		 当从 Flash Media Server (FMS) 进行流式加载时，bitrate 属性返回根据自动检测计算出的值，而不是通过 bitrate() 属性设置的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
		 当从 Flash Media Server (FMS) 进行流式加载时，<codeph>bitrate</codeph> 属性返回根据自动检测计算出的值，而不是通过 <codeph>bitrate()</codeph> 属性设置的值。
		 
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/bitrate"><linktext>INCManager.bitrate</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:isDynamicStream:get"><apiName>isDynamicStream</apiName><shortdesc>
		 
         
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:NCManager:isRTMP:get"><apiName>isRTMP</apiName><shortdesc conref="INCManager#isRTMP">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="INCManager#isRTMP">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/isRTMP"><linktext>INCManager.isRTMP</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:netConnection:get"><apiName>netConnection</apiName><shortdesc conref="INCManager#netConnection">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.net:NetConnection"/></apiValueDef><apiDesc conref="INCManager#netConnection">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/netConnection"><linktext>INCManager.netConnection</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:streamHeight:get"><apiName>streamHeight</apiName><shortdesc conref="INCManager#streamHeight">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="INCManager#streamHeight">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/streamHeight"><linktext>INCManager.streamHeight</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:streamLength:get"><apiName>streamLength</apiName><shortdesc conref="INCManager#streamLength">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="INCManager#streamLength">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/streamLength"><linktext>INCManager.streamLength</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:streamName:get"><apiName>streamName</apiName><shortdesc conref="INCManager#streamName">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="INCManager#streamName">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/streamName"><linktext>INCManager.streamName</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:streamWidth:get"><apiName>streamWidth</apiName><shortdesc conref="INCManager#streamWidth">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="INCManager#streamWidth">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/streamWidth"><linktext>INCManager.streamWidth</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:streams:get"><apiName>streams</apiName><shortdesc conref="INCManager#streams">
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc conref="INCManager#streams">
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:NCManager:timeout:get"><apiName>timeout</apiName><shortdesc conref="INCManager#timeout">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="INCManager#timeout">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/timeout"><linktext>INCManager.timeout</linktext></link></related-links></apiValue><apiValue id="fl.video:NCManager:videoPlayer:get"><apiName>videoPlayer</apiName><shortdesc conref="INCManager#videoPlayer">
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>fl.video:VideoPlayer</apiValueClassifier></apiValueDef><apiDesc conref="INCManager#videoPlayer">
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/videoPlayer"><linktext>INCManager.videoPlayer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:VideoEvent"><apiName>VideoEvent</apiName><shortdesc>
     当用户播放视频时，Flash&amp;#xAE; Player 会调度 VideoEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>VideoEvent 类
     </apiTipText></apiTipTexts><apiBaseInterface>fl.video:IVPEvent</apiBaseInterface><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
     Flash<sup>®</sup> Player 在用户播放视频时调度 VideoEvent 对象。
     
     </apiDesc></apiClassifierDetail><adobeApiEvent id="fl.video:VideoEvent:AUTO_REWOUND_autoRewound"><apiName>autoRewound</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:AUTO_REWOUND</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:BUFFERING_STATE_ENTERED_bufferingStateEntered"><apiName>bufferingStateEntered</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:BUFFERING_STATE_ENTERED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:CLOSE</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:COMPLETE</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:FAST_FORWARD_fastForward"><apiName>fastForward</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:FAST_FORWARD</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:PAUSED_STATE_ENTERED_pausedStateEntered"><apiName>pausedStateEntered</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:PAUSED_STATE_ENTERED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:PLAYHEAD_UPDATE_playheadUpdate"><apiName>playheadUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:PLAYHEAD_UPDATE</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:PLAYING_STATE_ENTERED_playingStateEntered"><apiName>playingStateEntered</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:PLAYING_STATE_ENTERED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:READY_ready"><apiName>ready</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:READY</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:REWIND_rewind"><apiName>rewind</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:REWIND</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:SCRUB_FINISH_scrubFinish"><apiName>scrubFinish</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:SCRUB_FINISH</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:SCRUB_START_scrubStart"><apiName>scrubStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:SCRUB_START</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:SEEKED_seeked"><apiName>seeked</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:SEEKED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:SKIN_LOADED_skinLoaded"><apiName>skinLoaded</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:SKIN_LOADED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:STATE_CHANGE_stateChange"><apiName>stateChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:STATE_CHANGE</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:STOPPED_STATE_ENTERED_stoppedStateEntered"><apiName>stoppedStateEntered</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoEvent:STOPPED_STATE_ENTERED</apiEventType><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="fl.video:VideoEvent:UNSUPPORTED_PLAYER_VERSION_stoppedStateEntered"><apiName>stoppedStateEntered</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType/><adobeApiEventClassifier>fl.video:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></adobeApiEvent><apiConstructor id="fl.video:VideoEvent:VideoEvent"><apiName>VideoEvent</apiName><shortdesc>
         创建一个 Event 对象，其中包含有关 video 事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。可能的值有：<codeph>VideoEvent.AUTO_REWOUND</codeph>、<codeph>VideoEvent.BUFFERING_STATE_ENTERED</codeph>、<codeph>VideoEvent.CLOSE</codeph>、<codeph>VideoEvent.COMPLETE</codeph>、<codeph>VideoEvent.FAST_FORWARD</codeph>、<codeph>VideoEvent.PAUSED_STATE_ENTERED</codeph>、<codeph>VideoEvent.PLAYHEAD_UPDATE</codeph>、<codeph>VideoEvent.PLAYING_STATE_ENTERED</codeph>、<codeph>VideoEvent.READY</codeph>、<codeph>VideoEvent.REWIND</codeph>、<codeph>VideoEvent.SCRUB_FINISH</codeph>、<codeph>VideoEvent.SCRUB_START</codeph>、<codeph>VideoEvent.SEEKED</codeph>、<codeph>VideoEvent.SKIN_LOADED</codeph>、<codeph>VideoEvent.STATE_CHANGE</codeph>、<codeph>VideoEvent.STOPPED_STATE_ENTERED</codeph> 和 <codeph>VideoEvent.VOLUME_UPDATE</codeph>。
         
         </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
         
         </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
         
         </apiDesc></apiParam><apiParam><apiItemName>state</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。
         
         </apiDesc></apiParam><apiParam><apiItemName>playheadTime</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>一个数字，表示当前播放头的时间或位置。
         
         </apiDesc></apiParam><apiParam><apiItemName>vp</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>确定 VideoPlayer 对象的索引。     
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
         创建一个 Event 对象，其中包含有关 video 事件的信息。 将 Event 对象作为参数传递给事件侦听器。
         
         </apiDesc></apiConstructorDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiConstructor><apiValue id="fl.video:VideoEvent:AUTO_REWOUND"><apiName>AUTO_REWOUND</apiName><shortdesc>
         定义 autoRewound 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>autoRewound</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>autoRewound</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:BUFFERING_STATE_ENTERED"><apiName>BUFFERING_STATE_ENTERED</apiName><shortdesc>
         定义 bufferingStateEntered 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bufferingStateEntered</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>bufferingStateEntered</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
         定义 close 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>close</codeph> 事件对象的 <codeph>type</codeph> 属性值。
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
         定义 complete 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>complete</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:FAST_FORWARD"><apiName>FAST_FORWARD</apiName><shortdesc>
         定义 fastForward 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fastForward</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>fastForward</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:PAUSED_STATE_ENTERED"><apiName>PAUSED_STATE_ENTERED</apiName><shortdesc>
         定义 pausedStateEntered 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pausedStateEntered</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>pausedStateEntered</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:PLAYHEAD_UPDATE"><apiName>PLAYHEAD_UPDATE</apiName><shortdesc>
         定义 playheadUpdate 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>playheadUpdate</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>playheadUpdate</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:PLAYING_STATE_ENTERED"><apiName>PLAYING_STATE_ENTERED</apiName><shortdesc>
         定义 playingStateEntered 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>playingStateEntered</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>playingStateEntered</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:READY"><apiName>READY</apiName><shortdesc>
         定义 ready 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ready</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>ready</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:REWIND"><apiName>REWIND</apiName><shortdesc>
         定义 rewind 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rewind</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>rewind</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:SCRUB_FINISH"><apiName>SCRUB_FINISH</apiName><shortdesc>
         定义 scrubFinish 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scrubFinish</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>scrubFinish</codeph> 事件对象的 <codeph>type</codeph> 属性值。 
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:SCRUB_START"><apiName>SCRUB_START</apiName><shortdesc>
         定义 scrubStart 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scrubStart</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>scrubStart</codeph> 事件对象的 <codeph>type</codeph> 属性值。
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:SEEKED"><apiName>SEEKED</apiName><shortdesc>
         定义 seeked 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>seeked</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>seeked</codeph> 事件对象的 <codeph>type</codeph> 属性值。
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:SKIN_LOADED"><apiName>SKIN_LOADED</apiName><shortdesc>
         定义 skinLoaded 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>skinLoaded</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>skinLoaded</codeph> 事件对象的 <codeph>type</codeph> 属性值。
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:STATE_CHANGE"><apiName>STATE_CHANGE</apiName><shortdesc>
         定义 stateChange 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stateChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>stateChange</codeph> 事件对象的 <codeph>type</codeph> 属性值。
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:STOPPED_STATE_ENTERED"><apiName>STOPPED_STATE_ENTERED</apiName><shortdesc>
         定义 stoppedStateEntered 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stoppedStateEntered</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>stoppedStateEntered</codeph> 事件对象的 <codeph>type</codeph> 属性值。
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:UNSUPPORTED_PLAYER_VERSION"><apiName>UNSUPPORTED_PLAYER_VERSION</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unsupportedPlayerVersion</apiData><apiType value="String"/></apiValueDef><apiDesc>
         <codeph/><codeph/>
         
         <p>此事件具有以下属性：</p>
         <adobetable class="innertable">
             
             
             
             
             
             
         <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>state</codeph></entry><entry>一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>一个数字，表示当前播放头的时间或位置。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState"><linktext>VideoState</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
         一个数字，表示当前播放头的时间或位置（以秒为单位计算），可以是小数值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiTipTexts><apiTipText>播放头的当前位置（以秒为单位）
         
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
         一个数字，表示当前播放头的时间或位置（以秒为单位计算），可以是小数值。 设置此属性会触发搜索，并具有搜索的所有限制。
         
         <p>播放头时间发生变化（播放 FLV 文件时每隔 0.25 秒更改一次）时，该组件会调度 <codeph>playheadUpdate</codeph> 事件。</p>
         
         <p>由于几种原因，在调用一种搜索方法或者设置 <codeph>playheadTime</codeph> 以引发搜索后，<codeph>playheadTime</codeph> 属性中可能不会立即包含预期值。 首先，对于渐进式下载，由于只能搜索关键帧，因此搜索将转到指定时间后第一个关键帧的时间。  （对于流式下载，搜索总是转到指定的确切时间，即使 FLV 源文件在此处没有关键帧也是如此。）  其次，由于搜索是异步执行的，因此，如果调用搜索方法或者设置 <codeph>playheadTime</codeph> 属性，<codeph>playheadTime</codeph> 将不会立即更新。 若要在搜索完成后获取时间，请侦听 <codeph>seek</codeph> 事件，该事件在 <codeph>playheadTime</codeph> 属性更新后才会引发。</p>
         
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/playheadTime"><linktext>FLVPlayback.playheadTime</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/seek()"><linktext>FLVPlayback.seek()</linktext></link><link href="fl.video.xml#VideoPlayer/playheadTime"><linktext>VideoPlayer.playheadTime</linktext></link><link href="fl.video.xml#VideoPlayer/seek()"><linktext>VideoPlayer.seek()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:state:get"><apiName>state</apiName><shortdesc>
         一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
         一个字符串，标识来自 VideoState 类的用于描述组件回放状态的常量。 该属性通过 <codeph>load()</codeph>、<codeph>play()</codeph>、<codeph>stop()</codeph>、<codeph>pause()</codeph> 和 <codeph>seek()</codeph> 方法进行设置。 
         
         <p>state 属性的可能值包括：<codeph>buffering</codeph>、<codeph>connectionError</codeph>、<codeph>disconnected</codeph>、<codeph>loading</codeph>、<codeph>paused</codeph>、<codeph>playing</codeph>、<codeph>rewinding</codeph>、<codeph>seeking</codeph> 和 <codeph>stopped</codeph>。 您可以使用 FLVPlayback 类的属性测试这些状态。 </p>
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoState/DISCONNECTED"><linktext>VideoState.DISCONNECTED</linktext></link><link href="fl.video.xml#VideoState/STOPPED"><linktext>VideoState.STOPPED</linktext></link><link href="fl.video.xml#VideoState/PLAYING"><linktext>VideoState.PLAYING</linktext></link><link href="fl.video.xml#VideoState/PAUSED"><linktext>VideoState.PAUSED</linktext></link><link href="fl.video.xml#VideoState/BUFFERING"><linktext>VideoState.BUFFERING</linktext></link><link href="fl.video.xml#VideoState/LOADING"><linktext>VideoState.LOADING</linktext></link><link href="fl.video.xml#VideoState/CONNECTION_ERROR"><linktext>VideoState.CONNECTION_ERROR</linktext></link><link href="fl.video.xml#VideoState/REWINDING"><linktext>VideoState.REWINDING</linktext></link><link href="fl.video.xml#VideoState/SEEKING"><linktext>VideoState.SEEKING</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoEvent:vp:get"><apiName>vp</apiName><shortdesc>
         该事件涉及的 VideoPlayer 对象的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
         该事件涉及的 VideoPlayer 对象的索引。
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoAlign"><apiName>VideoAlign</apiName><shortdesc>
	 VideoAlign 类提供了用于 FLVPlayback.align 和 VideoPlayer.align 属性的常量值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 VideoAlign 类提供了用于 <codeph>FLVPlayback.align</codeph> 和 <codeph>VideoPlayer.align</codeph> 属性的常量值。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/align"><linktext>FLVPlayback.align</linktext></link><link href="fl.video.xml#VideoPlayer/align"><linktext>VideoPlayer.align</linktext></link></related-links><apiValue id="fl.video:VideoAlign:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
         指定视频靠底部对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
         指定视频靠底部对齐。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:BOTTOM_LEFT"><apiName>BOTTOM_LEFT</apiName><shortdesc>
         指定视频靠左下角对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottomLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
         指定视频靠左下角对齐。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:BOTTOM_RIGHT"><apiName>BOTTOM_RIGHT</apiName><shortdesc>
         指定视频靠右下角对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottomRight</apiData><apiType value="String"/></apiValueDef><apiDesc>
         指定视频靠右下角对齐。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:CENTER"><apiName>CENTER</apiName><shortdesc>
         指定视频居中对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
         指定视频居中对齐。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:LEFT"><apiName>LEFT</apiName><shortdesc>
         指定视频靠左对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
         指定视频靠左对齐。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:RIGHT"><apiName>RIGHT</apiName><shortdesc>
         指定视频靠右对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
         指定视频靠右对齐。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:TOP"><apiName>TOP</apiName><shortdesc>
         指定视频靠顶部对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
         指定视频靠顶部对齐。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:TOP_LEFT"><apiName>TOP_LEFT</apiName><shortdesc>
         指定视频靠左上角对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>topLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
         指定视频靠左上角对齐。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoAlign:TOP_RIGHT"><apiName>TOP_RIGHT</apiName><shortdesc>
         指定视频靠右上角对齐。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>topRight</apiData><apiType value="String"/></apiValueDef><apiDesc>
         指定视频靠右上角对齐。
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:DynamicStream"><apiName>DynamicStream</apiName><shortdesc>
     
     </shortdesc><prolog><author>Adobe Systems Incorporated
     
     </author><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.net:NetStream</apiBaseClassifier></apiClassifierDef><apiDesc>
     
     <codeph/><codeph/>
     
     <codeblock> 
     import fl.video. 
     
     var dsi:DynamicStreamItem = new DynamicStreamItem(); 
     dsi.uri = "rtmp://localhost/vod/"; 
     dsi.addStream("mp4:sample1_150kbps.f4v", 150); 
     dsi.addStream("mp4:sample1_700kbps.f4v", 700); 
     dsi.addStream("mp4:sample1_1500kbps.f4v", 1500); 
     
     vid.play2(dsi);
     </codeblock>
     
	 </apiDesc></apiClassifierDetail><apiConstructor id="fl.video:DynamicStream:DynamicStream"><apiName>DynamicStream</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>nc</apiItemName><apiType value="flash.net:NetConnection"/><apiDesc>	 
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="fl.video:DynamicStream:close"><apiName>close</apiName><shortdesc>
 		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
 		 <codeph/>
 		 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:getStreamItemAt"><apiName>getStreamItemAt</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>fl.video:DynamicStreamItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:manualSwitchMode"><apiName>manualSwitchMode</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>mode</apiItemName><apiType value="Boolean"/><apiDesc>        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph/><codeph/><codeph/><codeph/><codeph/><codeph/>
         
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:onMetaData"><apiName>onMetaData</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>infoObj</apiItemName><apiType value="Object"/><apiDesc>        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph/>  
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:onPlayStatus"><apiName>onPlayStatus</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>info</apiItemName><apiType value="Object"/><apiDesc>        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         <codeph/>
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:play"><apiName>play</apiName><shortdesc>
 		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>args</apiItemName><apiType value="restParam"/><apiDesc>		 
         </apiDesc></apiParam></apiOperationDef><apiDesc>
 		 <codeph/>
 		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:play2"><apiName>play2</apiName><shortdesc>
 		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>param</apiItemName><apiType value="flash.net:NetStreamPlayOptions"/><apiDesc>		 
 		 </apiDesc></apiParam></apiOperationDef><apiDesc>
 		 <codeph/><codeph/>
 		 </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.net.NetStream.xml"><linktext>flash.net.NetStream</linktext></link></related-links></apiOperation><apiOperation id="fl.video:DynamicStream:setBandwidthLimit"><apiName>setBandwidthLimit</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>limit</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
         
		 
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:startPlay"><apiName>startPlay</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dsi</apiItemName><apiOperationClassifier>fl.video:DynamicStreamItem</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
		 <codeph/>
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:DynamicStream:switchDown"><apiName>switchDown</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         <codeph/> 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#DynamicStream/manualSwitchMode()"><linktext/></link></related-links></apiOperation><apiOperation id="fl.video:DynamicStream:switchToStreamName"><apiName>switchToStreamName</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>        
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph/> 
         
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#DynamicStream/manualSwitchMode()"><linktext/></link></related-links></apiOperation><apiOperation id="fl.video:DynamicStream:switchToStreamRate"><apiName>switchToStreamRate</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>rate</apiItemName><apiType value="int"/><apiDesc>        </apiDesc></apiParam></apiOperationDef><apiDesc>
         <codeph/> 
		 
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#DynamicStream/manualSwitchMode()"><linktext/></link></related-links></apiOperation><apiOperation id="fl.video:DynamicStream:switchUp"><apiName>switchUp</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         <codeph/>
         
		 </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#DynamicStream/manualSwitchMode()"><linktext/></link></related-links></apiOperation><apiValue id="fl.video:DynamicStream:STATE_BUFFERING"><apiName>STATE_BUFFERING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiData>buffering</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:STATE_PAUSED"><apiName>STATE_PAUSED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiData>paused</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:STATE_PLAYING"><apiName>STATE_PLAYING</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiData>playing</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:STATE_STOPPED"><apiName>STATE_STOPPED</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiDynamic/><apiData>stopped</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:VERSION"><apiName>VERSION</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1.1.0.6</apiData><apiType value="String"/></apiValueDef></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:aggressiveModeBufferLength:get"><apiName>aggressiveModeBufferLength</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
         
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:currentStreamBitRate:get"><apiName>currentStreamBitRate</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
         <codeph/><codeph/><codeph/>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:currentStreamName:get"><apiName>currentStreamName</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
         <codeph/><codeph/><codeph/> 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:droppedFramesLockDelay:get"><apiName>droppedFramesLockDelay</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
         <codeph/><codeph/>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:maxBandwidth:get"><apiName>maxBandwidth</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
         
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:preferredBufferLength:get"><apiName>preferredBufferLength</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
         <codeph/><codeph/>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:startBufferLength:get"><apiName>startBufferLength</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
         
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:DynamicStream:switchQOSTimerDelay:get"><apiName>switchQOSTimerDelay</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
         
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoError"><apiName>VideoError</apiName><shortdesc>
     VideoError 异常是报告来自于 FLVPlayback 和 VideoPlayer 类的运行时错误的主要机制。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>VideoError 类
     </apiTipText></apiTipTexts><apiBaseClassifier>Error</apiBaseClassifier></apiClassifierDef><apiDesc>
     VideoError 异常是报告来自于 FLVPlayback 和 VideoPlayer 类的运行时错误的主要机制。
     
     </apiDesc></apiClassifierDetail><apiConstructor id="fl.video:VideoError:VideoError"><apiName>VideoError</apiName><shortdesc>
         创建新的 VideoError 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>errCode</apiItemName><apiType value="uint"/><apiDesc>与错误对应的代码。
         
         </apiDesc></apiParam><apiParam><apiItemName>msg</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>错误消息。
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
         创建新的 VideoError 对象。
         
         </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="fl.video:VideoError:DELETE_DEFAULT_PLAYER"><apiName>DELETE_DEFAULT_PLAYER</apiName><shortdesc>
         状态变量，指示用户无法删除默认的 VideoPlayer 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1007</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         状态变量，指示用户无法删除默认的 VideoPlayer 对象。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:ILLEGAL_CUE_POINT"><apiName>ILLEGAL_CUE_POINT</apiName><shortdesc>
         状态变量，指示非法提示点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1002</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         状态变量，指示非法提示点。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:INCMANAGER_CLASS_UNSET"><apiName>INCMANAGER_CLASS_UNSET</apiName><shortdesc>
         状态变量，指示 INCManager 类未设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1008</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         状态变量，指示 INCManager 类未设置。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:INVALID_SEEK"><apiName>INVALID_SEEK</apiName><shortdesc>
         状态变量，指示无效的搜索。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1003</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         状态变量，指示无效的搜索。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:INVALID_SOURCE"><apiName>INVALID_SOURCE</apiName><shortdesc>
         状态变量，指示无效的源。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1004</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         状态变量，指示无效的源。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:INVALID_XML"><apiName>INVALID_XML</apiName><shortdesc>
         状态变量，指示无效的 XML。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1005</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         状态变量，指示无效的 XML。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:MISSING_SKIN_STYLE"><apiName>MISSING_SKIN_STYLE</apiName><shortdesc>
         状态变量，指示缺少的外观样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1010</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         状态变量，指示缺少的外观样式。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:NETSTREAM_CLIENT_CLASS_UNSET"><apiName>NETSTREAM_CLIENT_CLASS_UNSET</apiName><shortdesc>
	当 VideoPlayer.netStatusClientClass 静态属性被设置为无效值时出现的错误。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1012</apiData><apiType value="uint"/></apiValueDef><apiDesc>
	当 <codeph>VideoPlayer.netStatusClientClass</codeph> 静态属性被设置为无效值时出现的错误。 这包括两种情况：它是一个字符串而且无法找到该类；该类不具有使用 VideoPlayer 实例作为参数的构造函数。
	
	<p>可以看到一条错误信息示例，其中有以下代码：</p>
	<codeblock>
	  // Place the FLVPlayback component on the Stage at 0,0 and provide the instance name myflvPlayback.
	  import fl.video.
	  VideoPlayer.netStreamClientClass = null;
	   try {
	        myflvPlayback.play('test.flv');
	   } catch (e:VideoError) {
	         if (e.code =VideoError.NETSTREAM_CLIENT_CLASS_UNSET) {
	           trace('I forced this error on purpose');
	         }
	  }
	</codeblock>
    	</apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:NO_BITRATE_MATCH"><apiName>NO_BITRATE_MATCH</apiName><shortdesc>
         状态变量，指示没有匹配的位速率。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1006</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         状态变量，指示没有匹配的位速率。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:NO_CONNECTION"><apiName>NO_CONNECTION</apiName><shortdesc>
         状态变量，指示 Flash Player 无法连接到服务器或者无法找到服务器上的 FLV 文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         状态变量，指示 Flash Player 无法连接到服务器或者无法找到服务器上的 FLV 文件。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:NULL_URL_LOAD"><apiName>NULL_URL_LOAD</apiName><shortdesc>
         状态变量，指示向 load() 方法发送的 URL 为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1009</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         状态变量，指示向 <codeph>load()</codeph> 方法发送的 URL 为 <codeph>null</codeph>。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoError:SHORT_VERSION"><apiName>SHORT_VERSION</apiName><shortdesc>
	指示组件短版本号的状态变量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5</apiData><apiType value="String"/></apiValueDef><apiDesc>
	指示组件短版本号的状态变量。 版本号在您有 FLA 文件并且需要知道组件版本时很有用。 要确定组件版本，请在 FLA 文件中键入下列 trace 代码：
	
	<codeblock>FLVPlayback.SHORT_VERSION</codeblock>
	
	<p><codeph>SHORT_VERSION</codeph> 变量仅包含主版本号和次版本号，例如：2.0。<codeph>VERSION</codeph> 变量包含主版本号和次版本号，以及修订版本号和生成版本号，例如：2.0.0.11。</p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoError/VERSION"><linktext>VERSION variable</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoError:UNSUPPORTED_PROPERTY"><apiName>UNSUPPORTED_PROPERTY</apiName><shortdesc>
         状态变量，指示向 INCManager 类、getProperty 或 setProperty 方法传递了一个不支持的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1011</apiData><apiType value="uint"/></apiValueDef><apiDesc>
         状态变量，指示向 INCManager 类、<codeph>getProperty</codeph> 或 <codeph>setProperty</codeph> 方法传递了一个不支持的属性。
	 
	 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#INCManager/getProperty()"><linktext>INCManager.getProperty()</linktext></link><link href="fl.video.xml#INCManager/setProperty()"><linktext>INCManager.setProperty()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoError:VERSION"><apiName>VERSION</apiName><shortdesc>
	指示组件长版本号的状态变量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2.5.0.15</apiData><apiType value="String"/></apiValueDef><apiDesc>
	指示组件长版本号的状态变量。 版本号在您有 FLA 文件并且需要知道组件版本时很有用。 要确定组件版本，请在 FLA 文件中键入下列 trace 代码：
	
	<codeblock>FLVPlayback.VERSION</codeblock>
	
	<p><codeph>VERSION</codeph> 变量包含主版本号和次版本号，以及修订版本号和生成版本号，例如：2.0.0.11。<codeph>SHORT_VERSION</codeph> 变量仅包含主版本号和次版本号，例如：2.0。 </p>
	
    </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoError/SHORT_VERSION"><linktext>SHORT_VERSION variable</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoError:code:get"><apiName>code</apiName><shortdesc>
         与错误对应的代码。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="uint"/></apiValueDef><apiDesc>
         与错误对应的代码。 错误代码被传递给构造函数。
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:LayoutEvent"><apiName>LayoutEvent</apiName><shortdesc>
	 调整视频播放器大小和/或布置视频播放器时调度此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 调整视频播放器大小和/或布置视频播放器时调度此事件。 布局有以下两种情况：
	 <ul>
       <li>通过使用 <codeph>autoLayout</codeph> 事件、调用 <codeph>setScale()</codeph>、<codeph>setSize()</codeph> 方法或更改 <codeph>width</codeph>、<codeph>height</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>registrationWidth</codeph> 和 <codeph>registrationHeight</codeph> 属性布置视频播放器。</li>
	   <li>有两个大小或位置不同的视频播放器，并且将 <codeph>visibleVideoPlayerIndex</codeph> 属性从一个视频播放器切换到另一个视频播放器。</li>
	 </ul>  
	 
	 <p>只有一种类型的 LayoutEvent 对象：<codeph>LayoutEvent.LAYOUT</codeph>。</p>
	 
     </apiDesc></apiClassifierDetail><related-links><link href="fl.video.xml#LayoutEvent/LAYOUT"><linktext>LAYOUT</linktext></link></related-links><adobeApiEvent id="fl.video:LayoutEvent:LAYOUT_layout"><apiName>layout</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:LayoutEvent:LAYOUT</apiEventType><adobeApiEventClassifier>fl.video:LayoutEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:layout"><linktext>layout 事件</linktext></link></related-links></adobeApiEvent><apiConstructor id="fl.video:LayoutEvent:LayoutEvent"><apiName>LayoutEvent</apiName><shortdesc>
         创建一个 Event 对象，其中包含有关 layout 事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的自动 layout 事件：<codeph>LayoutEvent.LAYOUT</codeph>。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 <codeph>bubbles</codeph> 属性访问此信息。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 <codeph>cancelable</codeph> 属性访问此信息。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>oldBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>指示在发生 <codeph>layout</codeph> 事件前，目标的 <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph> 和 <codeph>height</codeph> 属性的值。 事件侦听器可以通过 <codeph>oldBounds</codeph> 属性访问此信息。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>oldRegistrationBounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData><apiDesc>指示在发生 <codeph>layout</codeph> 事件前，目标的 <codeph>registrationX</codeph>、<codeph>registrationY</codeph>、<codeph>registrationWidth</codeph> 和 <codeph>registrationHeight</codeph> 属性的值。 事件侦听器可以通过 <codeph>oldRegistrationBounds</codeph> 属性访问此信息。
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
         创建一个 Event 对象，其中包含有关 <codeph>layout</codeph> 事件的信息。 将 Event 对象作为参数传递给事件侦听器。
	 
         </apiDesc></apiConstructorDetail><related-links><link href="fl.video.xml#LayoutEvent/oldBounds"><linktext>oldBounds</linktext></link><link href="fl.video.xml#LayoutEvent/oldRegistrationBounds"><linktext>oldRegistrationBounds</linktext></link></related-links></apiConstructor><apiValue id="fl.video:LayoutEvent:LAYOUT"><apiName>LAYOUT</apiName><shortdesc>
         定义 layout 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>layout</apiData><apiType value="String"/></apiValueDef><apiDesc>
         定义 <codeph>layout</codeph> 事件对象的 <codeph>type</codeph> 属性值。
         
         <p>此事件具有以下属性：</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>oldBounds</codeph></entry><entry><codeph>layout</codeph> 事件发生前，目标的 <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph> 和 <codeph>height</codeph> 属性的值。</entry></row><row><entry><codeph>oldRegistrationBounds</codeph></entry><entry><codeph>layout</codeph> 事件发生前，目标的 <codeph>registrationX</codeph>、<codeph>registrationY</codeph>、<codeph>registrationWidth</codeph> 和 <codeph>registrationHeight</codeph> 属性的值。</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/event:layout"><linktext>layout 事件</linktext></link></related-links></apiValue><apiValue id="fl.video:LayoutEvent:oldBounds:get"><apiName>oldBounds</apiName><shortdesc>
		 指示在事件发生前，目标的 x、y、width 和 height 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
		 指示在事件发生前，目标的 <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph> 和 <codeph>height</codeph> 属性的值。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:LayoutEvent:oldRegistrationBounds:get"><apiName>oldRegistrationBounds</apiName><shortdesc>
		 指示在事件发生前，目标的 registrationX、registrationY、registrationWidth 和 registrationHeight 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
		 指示在事件发生前，目标的 <codeph>registrationX</codeph>、<codeph>registrationY</codeph>、<codeph>registrationWidth</codeph> 和 <codeph>registrationHeight</codeph> 属性的值。
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoScaleMode"><apiName>VideoScaleMode</apiName><shortdesc>
	 VideoScaleMode 类提供了用于 FLVPlayback.scaleMode 和 VideoPlayer.scaleMode 属性的常量值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 VideoScaleMode 类提供了用于 <codeph>FLVPlayback.scaleMode</codeph> 和 <codeph>VideoPlayer.scaleMode</codeph> 属性的常量值。
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/scaleMode"><linktext>FLVPlayback.scaleMode</linktext></link><link href="fl.video.xml#VideoPlayer/scaleMode"><linktext>VideoPlayer.scaleMode</linktext></link></related-links><apiValue id="fl.video:VideoScaleMode:EXACT_FIT"><apiName>EXACT_FIT</apiName><shortdesc>
         指定以 registrationHeight 或 height 及 registrationWidth 或 width 属性所指定的高度和宽度显示视频。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exactFit</apiData><apiType value="String"/></apiValueDef><apiDesc>
         指定以 <codeph>registrationHeight</codeph> 或 <codeph>height</codeph> 及 <codeph>registrationWidth</codeph> 或 <codeph>width</codeph> 属性所指定的高度和宽度显示视频。
	 
	 <p>例如，若 <codeph>registrationWidth = width = 100</codeph>，<codeph>registrationHeight = height = 100</codeph>，<codeph>registrationX = 200</codeph> 且 <codeph>registrationY = 200</codeph>，并且加载一个 FLV 文件，其 <codeph>width</codeph> 为 648，<codeph>height</codeph> 为 480（高宽比近似为 4:3），并且 <codeph>align = VideoAlign.CENTER</codeph>，<codeph>scaleMode = EXACT_FIT</codeph>，将会得到 <codeph>width = 100</codeph>、<codeph>height = 100</codeph>、<codeph>x = 200</codeph> 和 <codeph>y = 200</codeph>。</p>
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoScaleMode:MAINTAIN_ASPECT_RATIO"><apiName>MAINTAIN_ASPECT_RATIO</apiName><shortdesc>
     指定将视频限制在由 registrationX、registrationY、registrationWidth 和 registrationHeight 属性所确定的矩形中，但保持其原始高宽比。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>maintainAspectRatio</apiData><apiType value="String"/></apiValueDef><apiDesc>
     指定将视频限制在由 <codeph>registrationX</codeph>、<codeph>registrationY</codeph>、<codeph>registrationWidth</codeph> 和 <codeph>registrationHeight</codeph> 属性所确定的矩形中，但保持其原始高宽比。
     
	 <p>例如，若 <codeph>registrationWidth = 100</codeph>，<codeph>registrationHeight = 100</codeph>，<codeph>registrationX = 200</codeph> 且 <codeph>registrationY = 200</codeph>，并且加载一个 FLV 文件，其 <codeph>width</codeph> 为 648，<codeph>height</codeph> 为 480（高宽比近似为 4:3），并且 <codeph>align = VideoAlign.CENTER</codeph>，<codeph>scaleMode = MAINTAIN_ASPECT_RATIO</codeph>，将会得到 <codeph>width = 100</codeph>、<codeph>height = (100 ~~ 480 / 648) = 74</codeph>、<codeph>x = 10</codeph> 和 <codeph>y = (10 + ((100 - 74) / 2)) = 23</codeph>。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoScaleMode:NO_SCALE"><apiName>NO_SCALE</apiName><shortdesc>
         指定完全以源视频的高度和宽度显示视频。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>noScale</apiData><apiType value="String"/></apiValueDef><apiDesc>
         指定完全以源视频的高度和宽度显示视频。
	 
	 <p>例如，若 <codeph>registrationWidth = 100</codeph>，<codeph>registrationHeight = 100</codeph>，<codeph>registrationX = 200</codeph> 且 <codeph>registrationY = 200</codeph>，并且加载一个 FLV 文件，其 <codeph>width</codeph> 为 648，<codeph>height</codeph> 为 480（高宽比近似为 4:3），并且 <codeph>align = VideoAlign.CENTER</codeph>，<codeph>scaleMode = NO_SCALE</codeph>，将会得到 <codeph>width = 648</codeph>、<codeph>height = 480</codeph>、<codeph>x = (200 + ((100 - 648) / 2)) = -74</codeph> 和 <codeph>y = (200 + ((100 - 480) / 2)) = 10</codeph>。</p>
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoProgressEvent"><apiName>VideoProgressEvent</apiName><shortdesc>
     当用户在渐进式 HTTP 下载视频过程中请求已加载的字节数时，Flash&amp;#xAE; Player 会调度 VideoProgressEvent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>VideoProgressEvent 类
     </apiTipText></apiTipTexts><apiBaseInterface>fl.video:IVPEvent</apiBaseInterface><apiBaseClassifier>flash.events:ProgressEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
     当用户在渐进式 HTTP 下载视频过程中请求已加载的字节数时，Flash<sup>®</sup> Player 调度 VideoProgressEvent 对象。 
     
     </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.events.ProgressEvent.xml"><linktext>ProgressEvent</linktext></link></related-links><adobeApiEvent id="fl.video:VideoProgressEvent:PROGRESS_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>fl.video:VideoProgressEvent:PROGRESS</apiEventType><adobeApiEventClassifier>fl.video:VideoProgressEvent</adobeApiEventClassifier><apiDefinedEvent/><apiTipTexts><apiTipText>PROGRESS 常量
         </apiTipText></apiTipTexts></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="fl.video:VideoProgressEvent:VideoProgressEvent"><apiName>VideoProgressEvent</apiName><shortdesc>
     创建一个 Event 对象，其中包含有关进度事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件的类型。事件侦听器可以通过继承的 <codeph>type</codeph> 属性访问此信息。只有一种类型的 progress 事件：VideoProgressEvent.PROGRESS。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。事件侦听器可以通过继承的 bubbles 属性访问此信息。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。事件侦听器可以通过继承的 cancelable 属性访问此信息。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>在侦听器处理事件时加载的项数或字节数。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>如果加载过程成功，将加载的总项数或总字节数。
	 
	 </apiDesc></apiParam><apiParam><apiItemName>vp</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>确定 VideoPlayer 对象的索引。
         
         </apiDesc></apiParam></apiConstructorDef><apiDesc>
     创建一个 Event 对象，其中包含有关进度事件的信息。将 Event 对象作为参数传递给事件侦听器。
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="fl.video:VideoProgressEvent:PROGRESS"><apiName>PROGRESS</apiName><shortdesc>
     定义 progress 事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiType value="String"/><apiTipTexts><apiTipText>PROGRESS 常量
         </apiTipText></apiTipTexts></apiValueDef><apiDesc>
     定义 <codeph>progress</codeph> 事件对象的 <codeph>type</codeph> 属性值。
	 
	 <p>此事件具有以下属性：</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     

	 <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>在侦听器处理事件时加载的项数或字节数。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>如果加载过程成功，将加载的总项数或总字节数。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
	 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:VideoProgressEvent:vp:get"><apiName>vp</apiName><shortdesc>
         该事件涉及的 VideoPlayer 对象的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
         该事件涉及的 VideoPlayer 对象的索引。
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:INCManager"><apiName>INCManager</apiName><shortdesc>
     INCManager 是创建 VideoPlayer 类的 flash.net.NetConnection 的类的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
     INCManager 是创建 VideoPlayer 类的 <codeph>flash.net.NetConnection</codeph> 的类的接口。 默认的 INCManager 实现是 NCManager 类。 从 Flash Media Server (FMS) 进行流式加载时使用 NCManagerNative 类。 您还可以创建一个实现 INCManager 接口的自定义类，然后让 VideoPlayer 类使用该类来创建 NetConnection。
     
     <p>使用下列代码将一个自定义类注册为由 VideoPlayer 对象使用的 INCManager 实现。 用您的自定义类替换 <codeph>fl.video.NCManagerNative</codeph>。</p>
     
     <codeblock>fl.video.VideoPlayer.iNCManagerClass = fl.video.NCManagerNative;</codeblock>
     
     </apiDesc></apiClassifierDetail><related-links><link href="fl.video.xml#VideoPlayer"><linktext>fl.video.VideoPlayer</linktext></link></related-links><apiOperation id="fl.video:INCManager:fl.video:INCManager:close"><apiName>close</apiName><shortdesc>
         关闭 NetConnection。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         关闭 NetConnection。
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:connectAgain"><apiName>connectAgain</apiName><shortdesc>
         如果成功建立连接但未找到流，则由 VideoPlayer 对象调用。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果尝试建立其它连接，则为 <codeph>true</codeph>。 如果已经进行过尝试或者不值得再次尝试，则为 <codeph>false</codeph>。
         
         </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
         如果成功建立连接但未找到流，则由 VideoPlayer 对象调用。 如果 RTMP URL 可能有多个不同的解释，则使用不同的 URL 尝试连接到服务器，并返回不同的流名称。
         
         <p>当 URL 类似于 rtmp://servername/path1/path2/path3 时，这样做是有必要的。 传递应用程序名称和实例名称时，请用 rtmp://servername/path1/path2 打开 NetConnection 对象，或者使用默认实例，以便用 path2/path3 打开流。 总之，只要路径包含的部分超过两个，上述方法即可行，而如果只含有两个部分（永远不应只有一个部分）则不可行。</p>
         
         </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/connectToURL()"><linktext>connectToURL()</linktext></link><link href="fl.video.xml#VideoPlayer/isRTMP"><linktext>VideoPlayer.isRTMP</linktext></link></related-links></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:connectDynamicStream"><apiName>connectDynamicStream</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dsi</apiItemName><apiType value=""/><apiDesc><xref href="http://www.adobe.com/go/fms_dynamicstreaming"/>
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
		 <codeph/>
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:connectToURL"><apiName>connectToURL</apiName><shortdesc>
         由 VideoPlayer 对象调用，以要求连接到 URL。 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果同步建立连接，则为 <codeph>true</codeph>。 如果尝试异步建立连接，以便调用方收到“connected”事件，则为 <codeph>false</codeph>。
         
         </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiDesc>VideoPlayer 对象请求连接的 URL。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         由 VideoPlayer 对象调用，以要求连接到 URL。 无论连接成功与否，都调用 <codeph>VideoPlayer.ncConnected()</codeph> 方法。 如果连接失败，请在调用之前设置 <codeph>nc = null</codeph>。
         
         </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#INCManager/reconnect()"><linktext>reconnect()</linktext></link><link href="fl.video.xml#VideoPlayer/ncConnected()"><linktext>VideoPlayer.ncConnected()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:getProperty"><apiName>getProperty</apiName><shortdesc>
         获取实现 INCManager 的类所支持的任意属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>属性的值。
         
         </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="String"/><apiDesc><codeph>getProperty</codeph> 方法正在调用的属性的名称。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         获取实现 INCManager 的类所支持的任意属性的值。 有关所支持属性的列表，请参阅特定的实现类。 对不支持的属性调用该方法将引发包含代码 <codeph>VideoError.UNSUPPORTED_PROPERTY=1011</codeph> 的 VideoError 对象。
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:helperDone"><apiName>helperDone</apiName><shortdesc>
         由为 NCManager 对象执行任务的任何帮助器对象调用，以表示它已经完成了任务以及是否成功。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>helper</apiItemName><apiType value="Object"/><apiDesc>帮助器对象。
         
         </apiDesc></apiParam><apiParam><apiItemName>success</apiItemName><apiType value="Boolean"/><apiDesc>某任务完成时的信号设置。 如果 <codeph>success</codeph> 为 <codeph>true</codeph>，则说明任务成功完成；否则为 <codeph>false</codeph>。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         由为 NCManager 对象执行任务的任何帮助器对象调用，以表示它已经完成了任务以及是否成功。 NCManager 对象将其与 SMILManager 一起使用。
         
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:reconnect"><apiName>reconnect</apiName><shortdesc>
         失去连接后，由 VideoPlayer 对象调用来要求重新连接。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
         失去连接后，由 VideoPlayer 对象调用来要求重新连接。 无论连接成功与否，都调用 <codeph>VideoPlayer.ncReconnected()</codeph> 方法。 如果连接失败，请在调用之前设置 <codeph>nc = null</codeph>。
         
         </apiDesc></apiOperationDetail><related-links><link href="fl.video.xml#VideoPlayer/idleTimeout"><linktext>VideoPlayer.idleTimeout</linktext></link><link href="fl.video.xml#VideoPlayer/ncReconnected()"><linktext>VideoPlayer.ncReconnected()</linktext></link></related-links></apiOperation><apiOperation id="fl.video:INCManager:fl.video:INCManager:setProperty"><apiName>setProperty</apiName><shortdesc>
         设置实现 INCManager 的类所支持的任意属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>属性的值。
         
         </apiDesc><apiType value="void"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="String"/><apiDesc><codeph>setProperty</codeph> 方法正在调用的属性的名称。
         
         </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>属性值。
         
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         设置实现 INCManager 的类所支持的任意属性的值。 有关所支持属性的列表，请参阅特定的实现类。 对不支持的属性调用该方法将引发包含代码 <codeph>VideoError.UNSUPPORTED_PROPERTY=1011</codeph> 的 VideoError 对象。
         
         </apiDesc></apiOperationDetail></apiOperation><apiValue id="fl.video:INCManager:fl.video:INCManager:bitrate:get"><apiName>bitrate</apiName><shortdesc>
         用于在多个流间切换的带宽，以每秒位数为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
         用于在多个流间切换的带宽，以每秒位数为单位。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:isDynamicStream:get"><apiName>isDynamicStream</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:isRTMP:get"><apiName>isRTMP</apiName><shortdesc>
         </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
         <codeph/>如果流是 HTTP、本地或其它文件的渐进式下载，则为 <codeph>false</codeph>。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:netConnection:get"><apiName>netConnection</apiName><shortdesc>
         对 NetConnection 对象的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.net:NetConnection"/></apiValueDef><apiDesc>
         对 NetConnection 对象的引用。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:streamHeight:get"><apiName>streamHeight</apiName><shortdesc>
         流的高度，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
         流的高度，以像素为单位。 调用 <codeph>VideoPlayer.ncConnected()</codeph> 方法之后，如果 <codeph>streamHeight</codeph> 属性小于 0，则 VideoPlayer 对象将认为不存在流高度信息。 如果 VideoPlayer 对象将 <codeph>scaleMode</codeph> 属性设置为 <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph> 或 <codeph>VideoScaleMode.NO_SCALE</codeph>，则将使用该值，并立即调整大小，而不作等待。
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/ncConnected()"><linktext>VideoPlayer.ncConnected()</linktext></link><link href="fl.video.xml#VideoPlayer/scaleMode"><linktext>VideoPlayer.scaleMode</linktext></link></related-links></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:streamLength:get"><apiName>streamLength</apiName><shortdesc>
         流的长度，以秒为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
         流的长度，以秒为单位。 调用 <codeph>VideoPlayer.ncConnected()</codeph> 方法之后，如果其返回值未定义、为 <codeph>null</codeph> 或小于 0，则 VideoPlayer 对象将认为不存在任何流长度信息。 如果返回流长度信息，则它将覆盖任何现有的流长度信息，包括由 <codeph>VideoPlayer.play()</codeph> 方法或 <codeph>VideoPlayer.load()</codeph> 方法的 <codeph>totalTime</codeph> 参数设置的信息或从 文件的元数据接收到的信息。
         
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/ncConnected()"><linktext>VideoPlayer.ncConnected()</linktext></link><link href="fl.video.xml#VideoPlayer/play()"><linktext>VideoPlayer.play()</linktext></link><link href="fl.video.xml#VideoPlayer/load()"><linktext>VideoPlayer.load()</linktext></link></related-links></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:streamName:get"><apiName>streamName</apiName><shortdesc>
         传递给 NetStream.play() 方法的流名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
         传递给 <codeph>NetStream.play()</codeph> 方法的流名称。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:streamWidth:get"><apiName>streamWidth</apiName><shortdesc>
         流的宽度，以像素为单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
         流的宽度，以像素为单位。 调用 <codeph>VideoPlayer.ncConnected()</codeph> 方法之后，如果 <codeph>streamWidth</codeph> 属性小于 0，则 VideoPlayer 对象将认为不存在流宽度信息。 如果 VideoPlayer 对象将 <codeph>scaleMode</codeph> 属性设置为 <codeph>VideoScaleMode.MAINTAIN_ASPECT_RATIO</codeph> 或 <codeph>VideoScaleMode.NO_SCALE</codeph>，则将使用该值，并立即调整大小，而不作等待。
         </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/ncConnected()"><linktext>VideoPlayer.ncConnected()</linktext></link><link href="fl.video.xml#VideoPlayer/scaleMode"><linktext>VideoPlayer.scaleMode</linktext></link></related-links></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:streams:get"><apiName>streams</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="FLVPlayback" version="2.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:timeout:get"><apiName>timeout</apiName><shortdesc>
         以毫秒为单位的时间，在该时间之后，建立连接的尝试将停止。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
         以毫秒为单位的时间，在该时间之后，建立连接的尝试将停止。
         
         </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:INCManager:fl.video:INCManager:videoPlayer:get"><apiName>videoPlayer</apiName><shortdesc>
         拥有此对象的 VideoPlayer 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>fl.video:VideoPlayer</apiValueClassifier></apiValueDef><apiDesc>
         拥有此对象的 VideoPlayer 对象。
         
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="fl.video:VideoState"><apiName>VideoState</apiName><shortdesc>
	 VideoState 类提供了用于只读 FLVPlayback.state 和 VideoPlayer.state 属性的常量值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 VideoState 类提供了用于只读 <codeph>FLVPlayback.state</codeph> 和 <codeph>VideoPlayer.state</codeph> 属性的常量值。
	 
     </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="fl.video.xml#VideoPlayer/state"><linktext>VideoPlayer.state</linktext></link></related-links><apiValue id="fl.video:VideoState:BUFFERING"><apiName>BUFFERING</apiName><shortdesc>
		 视频播放器处于缓冲状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>buffering</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 视频播放器处于缓冲状态。 在对 <codeph>play()</codeph> 或 <codeph>load()</codeph> 方法进行调用之后视频播放器立即进入此状态。 使用 <codeph>FLVPlayback.state</codeph> 属性获得视频播放器的当前状态。
		 
		 <p>这是可响应状态。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/buffering"><linktext>FLVPlayback.buffering</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:CONNECTION_ERROR"><apiName>CONNECTION_ERROR</apiName><shortdesc>
		 视频播放器处于连接错误状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>connectionError</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 视频播放器处于连接错误状态。 尝试加载视频流但未成功时视频播放器进入此状态。 发生此错误有以下两个可能的原因：未连接到服务器或未找到流。 使用 <codeph>FLVPlayback.state</codeph> 属性获得视频播放器的当前状态。
		 
		 <p>这是不可响应状态。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:DISCONNECTED"><apiName>DISCONNECTED</apiName><shortdesc>
		 视频播放器处于断开连接状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>disconnected</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 视频播放器处于断开连接状态。 当由于调用 <codeph>closeVideoPlayer()</codeph> 方法或空闲超时而关闭流时视频播放器进入此状态。 使用 <codeph>FLVPlayback.state</codeph> 属性获得视频播放器的当前状态。
		 
		 <p>FLVPlayback 实例在您设置 <codeph>FLVPlayback.source</codeph> 属性之前处于断开连接状态。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/closeVideoPlayer()"><linktext>FLVPlayback.closeVideoPlayer()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/idleTimeout"><linktext>FLVPlayback.idleTimeout</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/source"><linktext>FLVPlayback.source</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:LOADING"><apiName>LOADING</apiName><shortdesc>
		 视频播放器处于加载状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loading</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 视频播放器处于加载状态。 调用 <codeph>play()</codeph> 或 <codeph>load()</codeph> 方法后，或设置 <codeph>FLVPlayback.source</codeph> 属性后视频播放器立即进入此状态。 使用 <codeph>FLVPlayback.state</codeph> 属性获得视频播放器的当前状态。
		 
		 <p>这是不可响应状态。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/load()"><linktext>FLVPlayback.load()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/play()"><linktext>FLVPlayback.play()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/source"><linktext>FLVPlayback.source</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:PAUSED"><apiName>PAUSED</apiName><shortdesc>
		 视频播放器处于暂停状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>paused</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 视频播放器处于暂停状态。 当加载了 FLV 文件，但由于调用 <codeph>pause()</codeph> 或 <codeph>load()</codeph> 方法而暂停播放时视频播放器进入此状态。 使用 <codeph>FLVPlayback.state</codeph> 属性获得视频播放器的当前状态。
		 
		 <p>这是可响应状态。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/load()"><linktext>FLVPlayback.load()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/pause()"><linktext>FLVPlayback.pause()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/paused"><linktext>FLVPlayback.paused</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:PLAYING"><apiName>PLAYING</apiName><shortdesc>
		 视频播放器处于播放状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>playing</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 视频播放器处于播放状态。 当加载并播放 FLV 文件时视频播放器进入此状态。 使用 <codeph>FLVPlayback.state</codeph> 属性获得视频播放器的当前状态。
		 
		 <p>这是可响应状态。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/playing"><linktext>FLVPlayback.playing</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/play()"><linktext>FLVPlayback.play()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:RESIZING"><apiName>RESIZING</apiName><shortdesc>
		 视频播放器处于调整大小状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resizing</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 视频播放器处于调整大小状态。 在自动布局时视频播放器进入此状态。 <codeph>FLVPlayback</codeph> 实例从不具有该常量的状态值，只有 <codeph>VideoPlayer</codeph> 实例具有。 使用 <codeph>VideoPlayer.state</codeph> 属性获得视频播放器的当前状态。
		 
		 <p>这是不可响应状态。</p>
		 
                 </apiDesc></apiValueDetail><related-links><link href="fl.video.xml#VideoPlayer/state"><linktext>VideoPlayer.state</linktext></link><link href="fl.video.xml#VideoPlayer/stateResponsive"><linktext>VideoPlayer.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:REWINDING"><apiName>REWINDING</apiName><shortdesc>
		 视频播放器处于后退状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rewinding</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 视频播放器处于后退状态。 当视频自动后退时视频播放器进入此状态。 单击停止按钮或视频播放到末尾时，视频停止后将自动后退。 后退完成后，将停止该状态。  使用 <codeph>FLVPlayback.state</codeph> 属性获得视频播放器的当前状态。
		 
		 <p>这是不可响应状态。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/autoRewind"><linktext>FLVPlayback.autoRewind</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:SEEKING"><apiName>SEEKING</apiName><shortdesc>
		 视频播放器处于搜索状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>seeking</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 视频播放器处于搜索状态。 调用 <codeph>seek()</codeph> 方法后以及当用户使用搜索栏进行拖拽时视频播放器进入此状态。 使用 <codeph>FLVPlayback.state</codeph> 属性获得视频播放器的当前状态。
		 
		 <p>这是不可响应状态。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/seek()"><linktext>FLVPlayback.seek()</linktext></link></related-links></apiValue><apiValue id="fl.video:VideoState:STOPPED"><apiName>STOPPED</apiName><shortdesc>
		 视频播放器处于停止状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stopped</apiData><apiType value="String"/></apiValueDef><apiDesc>
		 视频播放器处于停止状态。 当加载 FLV 文件并通过调用 <codeph>stop()</codeph> 方法停止播放时，或当播放头到达流的末端时视频播放器进入此状态。 使用 <codeph>FLVPlayback.state</codeph> 属性获得视频播放器的当前状态。
		 
		 <p>这是可响应状态。</p>
		 
         </apiDesc></apiValueDetail><related-links><link href="" invalidHref="fl.video.xml#FLVPlayback/state"><linktext>FLVPlayback.state</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stateResponsive"><linktext>FLVPlayback.stateResponsive</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stop()"><linktext>FLVPlayback.stop()</linktext></link><link href="" invalidHref="fl.video.xml#FLVPlayback/stopped"><linktext>FLVPlayback.stopped</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="fl.video:FPMediaCapabilities"><apiName>FPMediaCapabilities</apiName><shortdesc/><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef></apiClassifierDetail><apiConstructor id="fl.video:FPMediaCapabilities:FPMediaCapabilities"><apiName>FPMediaCapabilities</apiName><shortdesc>
		 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
		 <codeph/>
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="fl.video:FPMediaCapabilities:codecs:get"><apiName>codecs</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:dataStreamAccess:get"><apiName>dataStreamAccess</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:dynamicStreaming:get"><apiName>dynamicStreaming</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:qosSupport:get"><apiName>qosSupport</apiName><shortdesc>
		  
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:rtmfp:get"><apiName>rtmfp</apiName><shortdesc>
		  
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:rtmpe:get"><apiName>rtmpe</apiName><shortdesc>
		  
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:swfVerification:get"><apiName>swfVerification</apiName><shortdesc>
		  
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue><apiValue id="fl.video:FPMediaCapabilities:version:get"><apiName>version</apiName><shortdesc>
		 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
		  
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>