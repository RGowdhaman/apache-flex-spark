<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.skins.spark"><apiName>spark.skins.spark</apiName><apiDetail/><apiClassifier id="spark.skins.spark:ButtonBarSkin"><apiName>ButtonBarSkin</apiName><shortdesc>Spark ButtonBar 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ButtonBar 组件的默认外观类。ButtonBar 组件上的按钮使用 ButtonBarLastButtonSkin、ButtonBarFirstButtonSkin 和 ButtonBarMiddleButtonSkin 类。  
    
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarSkin:ButtonBarSkin"><apiName>ButtonBarSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ButtonBarSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:firstButton"><apiName>firstButton</apiName><shortdesc conref="spark.components.ButtonBar#firstButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/><apiDefaultValue> spark.skins.spark.ButtonBarFirstButtonSkin
            </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.ButtonBar#firstButton"/></apiValueDetail><related-links><link href="spark.skins.spark.xml#ButtonBarFirstButtonSkin"><linktext>spark.skins.spark.ButtonBarFirstButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:ButtonBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:lastButton"><apiName>lastButton</apiName><shortdesc conref="spark.components.ButtonBar#lastButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/><apiDefaultValue> spark.skins.spark.ButtonBarLastButtonSkin
            </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.ButtonBar#lastButton"/></apiValueDetail><related-links><link href="spark.skins.spark.xml#ButtonBarLastButtonSkin"><linktext>spark.skins.spark.ButtonBarLastButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:ButtonBarSkin:middleButton"><apiName>middleButton</apiName><shortdesc conref="spark.components.ButtonBar#middleButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/><apiDefaultValue> spark.skins.spark.ButtonBarMiddleButtonSkin
            </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.ButtonBar#middleButton"/></apiValueDetail><related-links><link href="spark.skins.spark.xml#ButtonBarMiddleButtonSkin"><linktext>spark.skins.spark.ButtonBarMiddleButtonSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TextInputSkin"><apiName>TextInputSkin</apiName><shortdesc>Spark TextInput 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark TextInput 组件的默认外观类。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TextInput"><linktext>spark.components.TextInput</linktext></link></related-links><apiConstructor id="spark.skins.spark:TextInputSkin:TextInputSkin"><apiName>TextInputSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TextInputSkin:background"><apiName>background</apiName><shortdesc>定义 TextInput 组件的背景外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 TextInput 组件的背景外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextInputSkin:promptDisplay"><apiName>promptDisplay</apiName><shortdesc>定义提示文本使用的标签。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>定义提示文本使用的标签。includeInLayout 属性为 false，则提示文本不会影响测量。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonSkin"><apiName>ButtonSkin</apiName><shortdesc>Spark Button 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark Button 组件的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonSkin:ButtonSkin"><apiName>ButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:VScrollBarThumbSkin"><apiName>VScrollBarThumbSkin</apiName><shortdesc>Spark VScrollBar 组件的缩略图的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark VScrollBar 组件的缩略图的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:VScrollBarThumbSkin:VScrollBarThumbSkin"><apiName>VScrollBarThumbSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VScrollBarThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:StackedFormItemSkin"><apiName>StackedFormItemSkin</apiName><shortdesc>Spark FormItem 组件的备用外观类，将标签置于内容之上.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark FormItem 组件的备用外观类，将标签置于内容之上.
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link></related-links><apiConstructor id="spark.skins.spark:StackedFormItemSkin:StackedFormItemSkin"><apiName>StackedFormItemSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:StackedFormItemSkin:background"><apiName>background</apiName><shortdesc>定义 FormItem 的背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 FormItem 的背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:contentCol"><apiName>contentCol</apiName><shortdesc>包含 FormItem 标签和内容的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含 FormItem 标签和内容的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:helpCol"><apiName>helpCol</apiName><shortdesc>包含 FormItem 帮助内容的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含 FormItem 帮助内容的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:helpContentGroup"><apiName>helpContentGroup</apiName><shortdesc conref="spark.components.FormItem#helpContentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#helpContentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormItem</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormItem#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>包含序列标签的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含序列标签的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormItemSkin:sequenceLabelDisplay"><apiName>sequenceLabelDisplay</apiName><shortdesc conref="spark.components.FormItem#sequenceLabelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#sequenceLabelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultComplexItemRenderer"><apiName>DefaultComplexItemRenderer</apiName><shortdesc>Spark DefaultComplexItemRenderer 类是在 Group 容器中显示 Flex 组件的项呈示器类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>Spark DefaultComplexItemRenderer 类是在 Group 容器中显示 Flex 组件的项呈示器类。每个组件在其自己的 Group 容器中包装。因此，当容器的子容器是可视元素（例如，Flex 组件）时非常有用。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group"><linktext>spark.components.Group</linktext></link></related-links><apiConstructor id="spark.skins.spark:DefaultComplexItemRenderer:DefaultComplexItemRenderer"><apiName>DefaultComplexItemRenderer</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DefaultComplexItemRenderer:contentGroup"><apiName>contentGroup</apiName><shortdesc>用于包装在主机组件中定义的每个 Flex 组件的容器。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>用于包装在主机组件中定义的每个 Flex 组件的容器。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:CheckBoxSkin"><apiName>CheckBoxSkin</apiName><shortdesc>Spark CheckBox 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark CheckBox 组件的默认外观类。  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link></related-links><apiConstructor id="spark.skins.spark:CheckBoxSkin:CheckBoxSkin"><apiName>CheckBoxSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:CheckBoxSkin:check"><apiName>check</apiName><shortdesc>此外观的框中的复选标记。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>此外观的框中的复选标记。若要创建自定义复选标记，请创建自定义外观类。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:CheckBoxSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:CheckBox</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:CheckBoxSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VideoPlayerSkin"><apiName>VideoPlayerSkin</apiName><shortdesc>Spark VideoPlayer 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark VideoPlayer 组件的默认外观类。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VideoPlayer"><linktext>spark.components.VideoPlayer</linktext></link></related-links><apiConstructor id="spark.skins.spark:VideoPlayerSkin:VideoPlayerSkin"><apiName>VideoPlayerSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VideoPlayerSkin:clippedGroup"><apiName>clippedGroup</apiName><shortdesc>视频和播放器控件在超过组件大小时将被剪切，但不会剪切上方的投影，并会将其调整为组件大小。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>视频和播放器控件在超过组件大小时将被剪切，但不会剪切上方的投影，并会将其调整为组件大小。我们还需要设置 verticalScrollPosition，以便在剪切时并不先剪切底部，而是先剪切顶部。因此，在开始剪切时，我们仍能看见播放器控件。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:currentTimeDisplay"><apiName>currentTimeDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#currentTimeDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#currentTimeDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:durationDisplay"><apiName>durationDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#durationDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#durationDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:fullScreenButton"><apiName>fullScreenButton</apiName><shortdesc conref="spark.components.VideoPlayer#fullScreenButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#fullScreenButton"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VideoPlayer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:playPauseButton"><apiName>playPauseButton</apiName><shortdesc conref="spark.components.VideoPlayer#playPauseButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:ToggleButton</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#playPauseButton"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:playerControls"><apiName>playerControls</apiName><shortdesc conref="spark.components.VideoPlayer#playerControls"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#playerControls"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:scrubBar"><apiName>scrubBar</apiName><shortdesc conref="spark.components.VideoPlayer#scrubBar"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.mediaClasses:ScrubBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#scrubBar"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:videoDisplay"><apiName>videoDisplay</apiName><shortdesc conref="spark.components.VideoPlayer#videoDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VideoDisplay</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#videoDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VideoPlayerSkin:volumeBar"><apiName>volumeBar</apiName><shortdesc conref="spark.components.VideoPlayer#volumeBar"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.mediaClasses:VolumeBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.VideoPlayer#volumeBar"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TitleWindowCloseButtonSkin"><apiName>TitleWindowCloseButtonSkin</apiName><shortdesc>Spark TitleWindow 组件的关闭按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark TitleWindow 组件的关闭按钮的默认外观类。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#TitleWindowSkin"><linktext>spark.skins.spark.TitleWindowSkin</linktext></link><link href="spark.components.xml#TitleWindow"><linktext>spark.components.TitleWindow</linktext></link></related-links><apiConstructor id="spark.skins.spark:TitleWindowCloseButtonSkin:TitleWindowCloseButtonSkin"><apiName>TitleWindowCloseButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:cbshad"><apiName>cbshad</apiName><shortdesc>定义内侧阴影。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义内侧阴影。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:dropShadow"><apiName>dropShadow</apiName><shortdesc>定义关闭按钮的投影。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:RectangularDropShadow</apiValueClassifier></apiValueDef><apiDesc>定义关闭按钮的投影。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowCloseButtonSkin:xSymbol"><apiName>xSymbol</apiName><shortdesc>定义关闭按钮中 x 的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>定义关闭按钮中 x 的外观。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ComboBoxSkin"><apiName>ComboBoxSkin</apiName><shortdesc>Spark ComboBox 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ComboBox 组件的默认外观类。ComboBox 组件的锚点按钮的外观由 ComboBoxButtonSkin 类定义。文本输入的外观是由 ComboBoxTextInputSkin 类定义的。
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ComboBox"><linktext>spark.components.ComboBox</linktext></link><link href="spark.skins.spark.xml#ComboBoxButtonSkin"><linktext>spark.skins.spark.ComboBoxButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:ComboBoxSkin:ComboBoxSkin"><apiName>ComboBoxSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ComboBoxSkin:background"><apiName>background</apiName><shortdesc>定义下拉列表的背景填充的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义下拉列表的背景填充的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:dropDown"><apiName>dropDown</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#dropDown">这包含边框、背景颜色、滑动条和滤镜。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#dropDown">这包含边框、背景颜色、滑动条和滤镜。 
            </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:ComboBox</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:openButton"><apiName>openButton</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#openButton">默认外观为 ComboBoxButtonSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#openButton">默认外观为 ComboBoxButtonSkin。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ComboBoxButtonSkin"><linktext>spark.skins.spark.ComboBoxButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:popUp"><apiName>popUp</apiName><shortdesc>打开下拉列表的 PopUpAnchor 控件。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:PopUpAnchor</apiValueClassifier></apiValueDef><apiDesc>打开下拉列表的 PopUpAnchor 控件。 
        
        <p><codeph/><codeph/></p></apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxSkin:textInput"><apiName>textInput</apiName><shortdesc conref="spark.components.ComboBox#textInput"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.ComboBox#textInput"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ComboBoxTextInputSkin"><apiName>ComboBoxTextInputSkin</apiName><shortdesc>Spark ComboBox 组件的 textInput 的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ComboBox 组件的 textInput 的默认外观类。  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ComboBox"><linktext>spark.components.ComboBox</linktext></link></related-links><apiConstructor id="spark.skins.spark:ComboBoxTextInputSkin:ComboBoxTextInputSkin"><apiName>ComboBoxTextInputSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:background"><apiName>background</apiName><shortdesc>定义 TextInput 组件的背景外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 TextInput 组件的背景外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:bgFill"><apiName>bgFill</apiName><shortdesc>定义背景填充颜色。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>定义背景填充颜色。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:promptDisplay"><apiName>promptDisplay</apiName><shortdesc>定义提示文本使用的标签。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>定义提示文本使用的标签。includeInLayout 属性为 false，则提示文本不会影响测量。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxTextInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonBarMiddleButtonSkin"><apiName>ButtonBarMiddleButtonSkin</apiName><shortdesc>Spark ButtonBar 组件中的中间按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ButtonBar 组件中的中间按钮的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarMiddleButtonSkin:ButtonBarMiddleButtonSkin"><apiName>ButtonBarMiddleButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:VScrollBarTrackSkin"><apiName>VScrollBarTrackSkin</apiName><shortdesc>Spark VScrollBar 组件的滑块轨道的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark VScrollBar 组件的滑块轨道的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:VScrollBarTrackSkin:VScrollBarTrackSkin"><apiName>VScrollBarTrackSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VScrollBarTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TitleWindowSkin"><apiName>TitleWindowSkin</apiName><shortdesc>Spark TitleWindow 容器的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark TitleWindow 容器的默认外观类。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#TitleWindowCloseButtonSkin"><linktext>spark.skins.spark.TitleWindowCloseButtonSkin</linktext></link><link href="spark.components.xml#TitleWindow"><linktext>spark.components.TitleWindow</linktext></link></related-links><apiConstructor id="spark.skins.spark:TitleWindowSkin:TitleWindowSkin"><apiName>TitleWindowSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TitleWindowSkin:backgroundFill"><apiName>backgroundFill</apiName><shortdesc>定义 TitleWindowSkin 类的背景填充。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>定义 TitleWindowSkin 类的背景填充。默认颜色为 0xFFFFFF。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:background"><apiName>background</apiName><shortdesc>定义 TitleWindowSkin 类的背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 TitleWindowSkin 类的背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:borderStroke"><apiName>borderStroke</apiName><shortdesc>定义 TitleWindowSkin 类的边框笔触。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColorStroke"/></apiValueDef><apiDesc>定义 TitleWindowSkin 类的边框笔触。默认值为 1。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:closeButton"><apiName>closeButton</apiName><shortdesc conref="spark.components.TitleWindow#closeButton"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.TitleWindow#closeButton"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:contents"><apiName>contents</apiName><shortdesc>包含标题栏内容和控件栏的垂直堆栈。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>包含标题栏内容和控件栏的垂直堆栈。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:controlBarGroup"><apiName>controlBarGroup</apiName><shortdesc conref="spark.components.Panel#controlBarGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#controlBarGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TitleWindow</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:moveArea"><apiName>moveArea</apiName><shortdesc conref="spark.components.TitleWindow#moveArea"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.TitleWindow#moveArea"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TitleWindowSkin:titleDisplay"><apiName>titleDisplay</apiName><shortdesc conref="spark.components.Panel#titleDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#titleDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:FormItemSkin"><apiName>FormItemSkin</apiName><shortdesc>Spark FormItem 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark FormItem 组件的默认外观类。  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormItem"><linktext>spark.components.FormItem</linktext></link></related-links><apiConstructor id="spark.skins.spark:FormItemSkin:FormItemSkin"><apiName>FormItemSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:FormItemSkin:background"><apiName>background</apiName><shortdesc>定义 FormItem 的背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 FormItem 的背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:contentCol"><apiName>contentCol</apiName><shortdesc>包含 FormItem 内容的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含 FormItem 内容的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:errorTextDisplay"><apiName>errorTextDisplay</apiName><shortdesc conref="spark.components.FormItem#errorTextDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#errorTextDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:helpCol"><apiName>helpCol</apiName><shortdesc>包含 FormItem 帮助内容的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含 FormItem 帮助内容的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:helpContentGroup"><apiName>helpContentGroup</apiName><shortdesc conref="spark.components.FormItem#helpContentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#helpContentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormItem</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:labelCol"><apiName>labelCol</apiName><shortdesc>包含 FormItem 标签的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含 FormItem 标签的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormItem#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>包含序列标签的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含序列标签的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormItemSkin:sequenceLabelDisplay"><apiName>sequenceLabelDisplay</apiName><shortdesc conref="spark.components.FormItem#sequenceLabelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormItem#sequenceLabelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ImageSkin"><apiName>ImageSkin</apiName><shortdesc>Spark Image 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark Image 组件的默认外观类。  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Image"><linktext>spark.components.Image</linktext></link></related-links><apiConstructor id="spark.skins.spark:ImageSkin:ImageSkin"><apiName>ImageSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ImageSkin:background"><apiName>background</apiName><shortdesc>定义图像背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义图像背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:bgFill"><apiName>bgFill</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:brokenImageIcon"><apiName>brokenImageIcon</apiName><shortdesc>加载的图像无效时代替图像显示的图标。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:BitmapImage</apiValueClassifier></apiValueDef><apiDesc>加载的图像无效时代替图像显示的图标。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Image</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:imageDisplay"><apiName>imageDisplay</apiName><shortdesc>主要图像显示外观部件。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:BitmapImage</apiValueClassifier></apiValueDef><apiDesc>主要图像显示外观部件。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ImageSkin:progressIndicator"><apiName>progressIndicator</apiName><shortdesc>进度指示符外观部件。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:Range</apiValueClassifier></apiValueDef><apiDesc>进度指示符外观部件。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ListDropIndicator"><apiName>ListDropIndicator</apiName><shortdesc>
  如果 List 没有在其外观中定义 dropIndicator 部件，则为 List 组件的拖放指示符的默认外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.skins:ProgrammaticSkin</apiBaseClassifier></apiClassifierDef><apiDesc>
  如果 List 没有在其外观中定义 <codeph>dropIndicator</codeph> 部件，则为 List 组件的拖放指示符的默认外观。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List"><linktext>spark.components.List</linktext></link></related-links><apiConstructor id="spark.skins.spark:ListDropIndicator:ListDropIndicator"><apiName>ListDropIndicator</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:ErrorSkin"><apiName>ErrorSkin</apiName><shortdesc>
  ErrorSkin 类定义 Spark 组件的错误外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.skins.spark:HighlightBitmapCaptureSkin</apiBaseClassifier></apiClassifierDef><apiDesc>
  ErrorSkin 类定义 Spark 组件的错误外观。Flex 显示发生验证错误时的错误外观。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.validators.Validator.xml"><linktext>mx.validators.Validator</linktext></link></related-links><apiConstructor id="spark.skins.spark:ErrorSkin:ErrorSkin"><apiName>ErrorSkin</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:ErrorSkin:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     
          </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     
          </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.skins.spark:DataGridSkin"><apiName>DataGridSkin</apiName><shortdesc>Spark DataGrid 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark DataGrid 组件的默认外观类。  
<p>该外观定义除 rowBackground 之外的所有可选 DataGrid 外观部件（默认情况下，不会显示每行背景可见元素）。它将网格的 itemRenderer 属性的默认值定义为 spark.skins.spark.DefaultGridItemRenderer，且将 columnHeaderGroup 的 headerRenderer 属性的默认值定义为 <codeph>spark.skins.spark.DefaultGridHeaderRenderer</codeph>。</p>
<p>以下 DataGrid 外观部件的值由声明定义，且可以由该类的子类覆盖：<codeph>alternatingRowColors</codeph>、<codeph>caretIndicator</codeph>、<codeph>columnSeparator</codeph>、<codeph>editorIndicator</codeph>、<codeph>headerColumnSeparator</codeph>、<codeph>hoverIndicator</codeph>、<codeph>rowSeparator</codeph>、<codeph>selectionIndicator</codeph>。所有这些声明定义 DataGrid 外观部件，但用于 columnHeaderGroup 的 <codeph>columnSeparator</codeph> 和 <codeph>headerRenderer</codeph> 属性值的 <codeph>headerColumnSeparator</codeph> 和 <codeph>headerRenderer</codeph> 除外。</p>
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link></related-links><apiConstructor id="spark.skins.spark:DataGridSkin:DataGridSkin"><apiName>DataGridSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DataGridSkin:bgFill"><apiName>bgFill</apiName><shortdesc>定义背景的颜色。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>定义背景的颜色。默认颜色为 0xFFFFFF。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DataGridSkin:headerColumnSeparator"><apiName>headerColumnSeparator</apiName><shortdesc>为 columnHeaderGroup 定义 columnSeparator 属性的值。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>为 columnHeaderGroup 定义 columnSeparator 属性的值。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DataGridSkin:headerRenderer"><apiName>headerRenderer</apiName><shortdesc>为 columnHeaderGroup 定义 headerRenderer 属性的值。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>为 columnHeaderGroup 定义 headerRenderer 属性的值。默认值为 spark.skins.spark.DefaultGridHeaderRenderer。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DataGridSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGrid</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ToggleButtonSkin"><apiName>ToggleButtonSkin</apiName><shortdesc>Spark ToggleButton 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ToggleButton 组件的默认外观类。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ToggleButtonSkin:ToggleButtonSkin"><apiName>ToggleButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:VScrollBarSkin"><apiName>VScrollBarSkin</apiName><shortdesc>Spark VScrollBar 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark VScrollBar 组件的默认外观类。缩略图外观和滑块轨道外观是分别由 VScrollBarThumbSkin 和 VScrollBarTrackSkin 类定义的。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:VScrollBarSkin:VScrollBarSkin"><apiName>VScrollBarSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VScrollBarSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">默认外观类为 ScrollBarUpButtonSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">默认外观类为 ScrollBarUpButtonSkin。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarUpButtonSkin"><linktext>spark.skins.spark.ScrollBarUpButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VScrollBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">默认外观类为 ScrollBarDownButtonSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">默认外观类为 ScrollBarDownButtonSkin。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarDownButtonSkin"><linktext>spark.skins.spark.ScrollBarDownButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">默认外观类为 VScrollBarThumbSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">默认外观类为 VScrollBarThumbSkin。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VScrollBarThumbSkin"><linktext>spark.skins.spark.VScrollBarThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VScrollBarSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">默认外观类为 VScrollBarTrackSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">默认外观类为 VScrollBarTrackSkin。  
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VScrollBarTrackSkin"><linktext>spark.skins.spark.VScrollBarTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperTextInputSkin"><apiName>NumericStepperTextInputSkin</apiName><shortdesc>Spark NumericStepper 组件的文本输入字段的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark NumericStepper 组件的文本输入字段的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperTextInputSkin:NumericStepperTextInputSkin"><apiName>NumericStepperTextInputSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperTextInputSkin:background"><apiName>background</apiName><shortdesc>定义 NumericStepper 组件的背景外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 NumericStepper 组件的背景外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperTextInputSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperTextInputSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:StackedFormSkin"><apiName>StackedFormSkin</apiName><shortdesc>Spark Form 容器的备用外观类</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark Form 容器的备用外观类该外观使用 FormLayout 作为其布局对象定义 Form 容器的 contentGroup。FormLayout 是一种 VerticalLayout，具有用于对齐 FormItem 的列的其它逻辑。该外观也定义 errorTextDisplay 以显示 Form 的 errorText。
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link></related-links><apiConstructor id="spark.skins.spark:StackedFormSkin:StackedFormSkin"><apiName>StackedFormSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:StackedFormSkin:background"><apiName>background</apiName><shortdesc>定义 Form 类的背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 Form 类的背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormSkin:errorTextDisplay"><apiName>errorTextDisplay</apiName><shortdesc>显示 Form 的错误文本。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>显示 Form 的错误文本。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Form</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VSliderThumbSkin"><apiName>VSliderThumbSkin</apiName><shortdesc>Spark VSlider 组件的缩略图的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark VSlider 组件的缩略图的默认外观类。  
        
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:VSliderThumbSkin:VSliderThumbSkin"><apiName>VSliderThumbSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VSliderThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultGridItemRenderer"><apiName>DefaultGridItemRenderer</apiName><shortdesc>
  DefaultGridItemRenderer 类定义显示单个文本标签的简单而有效的项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="property" name="locale"/><Exclude kind="property" name="direction"/><Exclude kind="style" name="layoutDirection"/><Exclude kind="property" name="layoutDirection"/><Exclude kind="style" name="typographicCase"/><Exclude kind="style" name="trackingRight"/><Exclude kind="style" name="trackingLeft"/><Exclude kind="style" name="textJustify"/><Exclude kind="style" name="textAlpha"/><Exclude kind="style" name="textAlignLast"/><Exclude kind="style" name="renderingMode"/><Exclude kind="style" name="lineThrough"/><Exclude kind="style" name="lineHeight"/><Exclude kind="style" name="ligatureLevel"/><Exclude kind="style" name="leading"/><Exclude kind="style" name="justificationStyle"/><Exclude kind="style" name="justificationRule"/><Exclude kind="style" name="fontLookup"/><Exclude kind="style" name="dominantBaseline"/><Exclude kind="style" name="digitWidth"/><Exclude kind="style" name="digitCase"/><Exclude kind="style" name="cffHinting"/><Exclude kind="style" name="baselineShift"/><Exclude kind="style" name="alignmentBaseline"/><Exclude kind="style" name="verticalAlign"/><Exclude kind="style" name="paddingTop"/><Exclude kind="style" name="paddingBottom"/><styles><style format="Length" inherit="yes" name="textIndent" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description conref="flashx.textLayout.formats.ITextLayoutFormat#textIndent">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description>
  右侧边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingRight。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="Number">
<description>
  左侧边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingLeft。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.skins.spark:DefaultGridItemRenderer" playerVersion="Flash10" type="String">
<description>
  控制容器内的文字换行。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IGridItemRenderer</apiBaseInterface><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier>mx.core:UIFTETextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  DefaultGridItemRenderer 类定义显示单个文本标签的简单而有效的项呈示器。该类是 DataGrid <codeph>itemRenderer</codeph> 属性的默认值。此类扩展 UIFTETextField 并使用文本字段在文本标签中显示单元格数据。UIFTETextField 控件基于 FTE，即 FlashTextEngine（支持使用与其它 Spark 控件相同的方式进行的高质量国际版式和字体嵌入）。由于 UIFTETextField 控件实现 TextField API，因此支持一部分 Spark 文本样式。请参阅文档中有关此类的信息以获得受支持样式的列表。
 
  <p>您可以通过使用 <codeph>lineBreak</codeph> 样式来控制标签文本换行。例如，设置 <codeph>lineBreak="explicit"</codeph> 和 <codeph>variableRowHeight="false"</codeph> 后，创建固定高度的单元格（相应单元格标签不换行）。如果您未显式设置 <codeph>wordWrap</codeph> 属性，则 <codeph>wordWrap</codeph> 会设置为网格的 <codeph>variableRowHeight</codeph> 属性值。</p>
 
  <p>multiline 属性是由 DataGrid 的项编辑器使用来解释输入换行符。如果 <codeph>mutliline=false</codeph>，则输入换行符后会结束编辑会话（与制表符或转义符作用一样）。如果 <codeph>multiline=true</codeph>，那么换行符会插入至文本中。如果未显式设置 multiline 属性，则 <codeph>lineBreak="explicit"</codeph> 和 <codeph>text</codeph> 包含换行符时会自动设置为 true。</p>
 
  <p>DefaultGridItemRenderer 从其父代继承 <codeph>layoutDirection</codeph> 属性。不应直接对其进行设置。</p>
  
  <p>DefaultGridItemRenderer 类不可设置子类或复制。创建基于 GridItemRenderer 类的自定义项呈示器。</p>
 
  <p>为获得基于 Microsoft Windows 的应用程序上的最高性能，请使用 UITextFieldGridItemRenderer。该呈示器会写入 ActionScript 并针对 Windows 进行优化。</p>
 
  </apiDesc><example conref="DefaultGridItemRendererExample.mxml"><swfblock conref="examples/DefaultGridItemRendererExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link><link href="spark.skins.spark.xml#UITextFieldGridItemRenderer"><linktext>spark.skins.spark.UITextFieldGridItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.skins.spark:DefaultGridItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当可绑定的 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当可绑定的 <codeph>data</codeph> 属性更改时进行分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.skins.spark:DefaultGridItemRenderer:DefaultGridItemRenderer"><apiName>DefaultGridItemRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:DefaultGridItemRenderer:discard"><apiName>discard</apiName><shortdesc>
      
      在已确定此呈示器将不再可见时，从项呈示器父代的 updateDisplayList() 方法调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>hasBeenRecycled</apiItemName><apiType value="Boolean"/><apiDesc>如果要将此呈示器添加到所有者的内部空闲列表以重用，则为 <codeph>true</codeph>。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      在已确定此呈示器将不再可见时，从项呈示器父代的 <codeph>updateDisplayList()</codeph> 方法调用。如果 <codeph>willBeRecycled</codeph> 参数设置为 <codeph>true</codeph>，则所有者将此呈示器添加到其内部空闲列表以重用。实现可使用此方法清除任何不再需要的呈示器属性。
     
      <p>不可直接调用此方法。它将被 DataGrid 实现调用。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.skins.spark:DefaultGridItemRenderer:prepare"><apiName>prepare</apiName><shortdesc>
      
      在设置了呈示器的所有属性后，从项呈示器父代的 updateDisplayList() 方法调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>willBeRecycled</apiItemName><apiType value="Boolean"/><apiDesc> 如果正在重用此呈示器，则为 <codeph>true</codeph>。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      在设置了呈示器的所有属性后，从项呈示器父代的 <codeph>updateDisplayList()</codeph> 方法调用。如果以前从未使用过此呈示器，则 <codeph>hasBeenRecycled</codeph> 参数为 <codeph>false</codeph>，表示此呈示器不可再生。当呈示器将要可见时，每次因呈示器属性更改而重新显示呈示器时，或显式请求重新显示时，调用此方法。 
     
      <p>此方法可以用来配置呈示器的所有可视元素和属性。使用此方法与将 <codeph>data</codeph> 属性绑定到可视元素属性相比，效率会更高。注意：由于 <codeph>prepare()</codeph> 方法经常被调用，因此请确保已对其进行高效编码。</p>
     
      <p>在调用 <codeph>discard()</codeph> 方法之前，可能会多次调用 <codeph>prepare()</codeph> 方法。</p>
     
      <p>不可直接调用此方法。它将被 DataGrid 实现调用。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.skins.spark:DefaultGridItemRenderer:columnIndex:get"><apiName>columnIndex</apiName><shortdesc>
      
      此项呈示器的单元格的列索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      此项呈示器的单元格的列索引。这是与 <codeph>column.columnIndex</codeph> 相同的值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:column:get"><apiName>column</apiName><shortdesc>
      
      表示与此项呈示器相关联的列的 GridColumn 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:GridColumn</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      表示与此项呈示器相关联的列的 GridColumn 对象。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      针对网格控件整个行的数据提供程序项的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      针对网格控件整个行的数据提供程序项的值。项呈示器通常将可视元素属性绑定至该对象的属性。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:down:get"><apiName>down</apiName><shortdesc>
      在调用 prepare() 之前，网格控件的 updateDisplayList() 方法设置此属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="downChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>在调用 <codeph>prepare()</codeph> 之前，网格控件的 <codeph>updateDisplayList()</codeph> 方法设置此属性。   </p>
     
      
      在网格单元格中发生以下两个输入动作之一时，该属性设置为 <codeph>true</codeph>：按鼠标按键或按触摸屏。当释放鼠标按键、用户的手指离开触摸屏或将鼠标/触摸拖离网格单元格时，<codeph>down</codeph> 属性重置为 <codeph>false</codeph>。   
     
      <p>与 List 项呈示器不同，Grid 项呈示器不专门负责显示按下指示符。Grid 本身为所选行或单元格呈示按下指示符。项呈示器还可以更改其 visual 属性以强调正在按此项呈示器。</p>   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      如果正在拖动项呈示器（通常作为拖放操作的一部分），则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="draggingChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      如果正在拖动项呈示器（通常作为拖放操作的一部分），则包含 <codeph>true</codeph>。目前，Spark DataGrid 控件不支持拖放操作。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:grid:get"><apiName>grid</apiName><shortdesc>
      与此项呈示器相关联的网格控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Grid</apiValueClassifier></apiValueDef><apiDesc>
      与此项呈示器相关联的网格控件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:hovered:get"><apiName>hovered</apiName><shortdesc>
      鼠标悬停在项呈示器上时设置为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoveredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      鼠标悬停在项呈示器上时设置为 <codeph>true</codeph>。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      在调用 preprare() 之前，网格控件将此属性设置为列的 itemToLabel() 方法的值。要在项呈示器中显示的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>在调用 <codeph>preprare()</codeph> 之前，网格控件将此属性设置为列的 <codeph>itemToLabel()</codeph> 方法的值。</p>
     
      
      要在项呈示器中显示的 String。  
     
      <p>如果 <codeph>labelDisplay</codeph> 元素已指定，GridItemRenderer 类会自动将该属性的值复制到该元素的 <codeph>text</codeph> 属性。Grid 将 <codeph>label</codeph> 设置为由列的 <codeph>itemToLabel()</codeph> 方法返回的值。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:rowIndex:get"><apiName>rowIndex</apiName><shortdesc>
      在调用 prepare() 之前，网格控件的 updateDisplayList() 方法设置此属性。正在呈示的单元格的从零开始的行索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>在调用 <codeph>prepare()</codeph> 之前，网格控件的 <codeph>updateDisplayList()</codeph> 方法设置此属性。</p>
     
      
      正在呈示的单元格的从零开始的行索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      在调用 prepare() 之前，网格控件的 updateDisplayList() 方法设置此属性。如果项呈示器的单元格属于当前选定内容，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectedChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>在调用 <codeph>prepare()</codeph> 之前，网格控件的 <codeph>updateDisplayList()</codeph> 方法设置此属性。</p>
     
      
      如果项呈示器的单元格属于当前选定内容，则包含 <codeph>true</codeph>。
     
      <p> 与 List 项呈示器不同，Grid 项呈示器不专门负责显示内容以指明它们是选定内容的一部分。Grid 本身为选定行或单元格自动显示 selectionIndicator 外观部件。项呈示器还可以更改其 visual 属性以强调它属于选定内容。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      在调用 preprare() 之前，网格控件的 updateDisplayList() 方法设置此属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showsCaretChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>在调用 <codeph>preprare()</codeph> 之前，网格控件的 <codeph>updateDisplayList()</codeph> 方法设置此属性。   </p>
     
      
      如果插入标记指明项呈示器的单元格，则包含 <codeph>true</codeph>。
     
      <p> 与 List 项呈示器不同，Grid 项呈示器不专门负责显示内容以指明它们的单元格或行含有插入标记。Grid 本身为插入标记行或单元格自动显示 caretIndicator 外观部件。项呈示器还可以更改其 visual 属性以强调它含有插入标记。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarRightButtonSkin"><apiName>ScrollBarRightButtonSkin</apiName><shortdesc>Spark ScrollBar 组件的向右按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ScrollBar 组件的向右按钮的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarRightButtonSkin:ScrollBarRightButtonSkin"><apiName>ScrollBarRightButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarRightButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>定义 ScrollBar 组件中的向右箭头的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>定义 ScrollBar 组件中的向右箭头的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarRightButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VSliderSkin"><apiName>VSliderSkin</apiName><shortdesc>Spark VSlider 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark VSlider 组件的默认外观类。缩略图外观和滑块轨道外观分别由 VSliderThumbSkin 和 VSliderTrackSkin 类定义。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:VSliderSkin:VSliderSkin"><apiName>VSliderSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VSliderSkin:dataTip"><apiName>dataTip</apiName><shortdesc>在 mx.controls.Slider 控件中使用的工具提示。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>在 mx.controls.Slider 控件中使用的工具提示。要自定义 DataTip 的外观，请创建自定义 VSliderSkin 类。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VSliderSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:VSlider</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:VSliderSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">默认外观类为 VSliderThumbSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">默认外观类为 VSliderThumbSkin。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VSliderThumbSkin"><linktext>spark.skins.spark.VSliderThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:VSliderSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">默认外观类为 VSliderTrackSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">默认外观类为 VSliderTrackSkin。
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#VSliderTrackSkin"><linktext>spark.skins.spark.VSliderTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:VSliderTrackSkin"><apiName>VSliderTrackSkin</apiName><shortdesc>Spark VSlider 组件的滑块轨道的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark VSlider 组件的滑块轨道的默认外观类。  
        
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:VSliderTrackSkin:VSliderTrackSkin"><apiName>VSliderTrackSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:VSliderTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DropDownListSkin"><apiName>DropDownListSkin</apiName><shortdesc>Spark DropDownList 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark DropDownList 组件的默认外观类。DropDownList 组件的锚点按钮的外观由 DropDownListButtonSkin 类定义。  
      
      <p><codeph/><codeph/></p>      
        
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link><link href="spark.skins.spark.xml#DropDownListButtonSkin"><linktext>spark.skins.spark.DropDownListButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:DropDownListSkin:DropDownListSkin"><apiName>DropDownListSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DropDownListSkin:background"><apiName>background</apiName><shortdesc>定义下拉列表的背景填充的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义下拉列表的背景填充的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:bgFill"><apiName>bgFill</apiName><shortdesc>下拉列表的背景填充的颜色。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>下拉列表的背景填充的颜色。默认颜色为 0xFFFFFF。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:dropDown"><apiName>dropDown</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#dropDown">这包含边框、背景颜色、滑动条和滤镜。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#dropDown">这包含边框、背景颜色、滑动条和滤镜。
              </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DropDownList</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.DropDownList#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.DropDownList#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:openButton"><apiName>openButton</apiName><shortdesc conref="spark.components.supportClasses.DropDownListBase#openButton">默认外观为 DropDownListButtonSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownListBase#openButton">默认外观为 DropDownListButtonSkin。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#DropDownListButtonSkin"><linktext>spark.skins.spark.DropDownListButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:DropDownListSkin:popUp"><apiName>popUp</apiName><shortdesc>打开下拉列表的 PopUpAnchor 控件。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:PopUpAnchor</apiValueClassifier></apiValueDef><apiDesc>打开下拉列表的 PopUpAnchor 控件。 
        
        <p><codeph/><codeph/></p></apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:FormSkin"><apiName>FormSkin</apiName><shortdesc>Spark Form 容器的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark Form 容器的默认外观类。该外观使用 FormLayout 作为其布局对象定义 Form 容器的 contentGroup。FormLayout 是一种 VerticalLayout，具有用于对齐 FormItem 的列的其它逻辑。
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Form"><linktext>spark.components.Form</linktext></link><link href="spark.layouts.xml#FormLayout"><linktext>spark.layouts.FormLayout</linktext></link></related-links><apiConstructor id="spark.skins.spark:FormSkin:FormSkin"><apiName>FormSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:FormSkin:background"><apiName>background</apiName><shortdesc>定义 Form 类的背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 Form 类的背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Form</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultGridHeaderRenderer"><apiName>DefaultGridHeaderRenderer</apiName><shortdesc>DefaultGridHeaderRenderer 类针对 Spark DataGrid 控件的列定义默认标题呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.gridClasses:GridItemRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>DefaultGridHeaderRenderer 类针对 Spark DataGrid 控件的列定义默认标题呈示器。
<p>在 MXML 中定义的子类可以重定义 <codeph>labelDisplay</codeph> 属性和 <codeph>sortIndicator</codeph> 属性的值。</p>
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.xml#GridColumnHeaderGroup"><linktext>spark.components.GridColumnHeaderGroup</linktext></link><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link></related-links><apiConstructor id="spark.skins.spark:DefaultGridHeaderRenderer:DefaultGridHeaderRenderer"><apiName>DefaultGridHeaderRenderer</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:defaultSortIndicator"><apiName>defaultSortIndicator</apiName><shortdesc>sortIndicator 属性的默认值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc><codeph>sortIndicator</codeph> 属性的默认值。它必须是 IVisualElement 的 IFactory。        
        
        <p>该值在 <codeph>fx:Declaration</codeph> 块中进行指定且可以由带有 MXML 子类的 <codeph>id="defaultSortIndicator"</codeph> 的声明覆盖。</p>
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:labelDisplayGroup"><apiName>labelDisplayGroup</apiName><shortdesc>定义 labelDisplay 可视元素的大小和位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>定义 labelDisplay 可视元素的大小和位置。 
        
        <p>通过呈示器的 <codeph>prepare()</codeph> 方法，<codeph>labelDisplay</codeph> 会添加至该 Group 中。由 labelDisplay 指定的任意大小/位置约束定义与 labelDisplayGroup 相关联的布局。</p>
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:sortIndicatorGroup"><apiName>sortIndicatorGroup</apiName><shortdesc>定义 sortIndicator 可视元素的大小和位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>定义 sortIndicator 可视元素的大小和位置。 
        
        <p>通过呈示器的 <codeph>prepare()</codeph> 方法，<codeph>sortIndicator</codeph> 会添加至该 Group 中。由 sortIndicator 指定的任意大小/位置约束定义与 sortIndicatorGroup 相关联的布局。sortIndicator 可见时，该 Group 仅包含在布局中。</p>  
        
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:maxDisplayedLines:get"><apiName>maxDisplayedLines</apiName><shortdesc conref="spark.components.supportClasses.TextBase#maxDisplayedLines">
              该属性的值用于初始化该呈示器的 labelDisplay 元素的 maxDisplayedLines 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="maxDisplayedLinesChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1
             
              </apiDefaultValue></apiValueDef><apiDesc conref="spark.components.supportClasses.TextBase#maxDisplayedLines">
              该属性的值用于初始化该呈示器的 <codeph>labelDisplay</codeph> 元素的 <codeph>maxDisplayedLines</codeph> 属性。
             
              </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultGridHeaderRenderer:sortIndicator:get"><apiName>sortIndicator</apiName><shortdesc>
              对列进行排序时显示的可视元素。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="sortIndicatorChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/><apiDefaultValue>null
             
              </apiDefaultValue></apiValueDef><apiDesc>
              对列进行排序时显示的可视元素。
             
              <p>通过该呈示器的 <codeph>prepare()</codeph> 方法，sortIndicator 可视元素会添加至 <codeph>sortIndicatorGroup</codeph>。由 sortIndicator 指定的任意大小/位置约束定义与 sortIndicatorGroup 相关联的位置。</p>
             
              </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperIncrementButtonSkin"><apiName>NumericStepperIncrementButtonSkin</apiName><shortdesc>Spark NumericStepper 组件的向上按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark NumericStepper 组件的向上按钮的默认外观类。  
    
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperIncrementButtonSkin:NumericStepperIncrementButtonSkin"><apiName>NumericStepperIncrementButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperIncrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>定义向上箭头的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>定义向上箭头的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperIncrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TabBarButtonSkin"><apiName>TabBarButtonSkin</apiName><shortdesc>Spark TabBar 按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark TabBar 按钮的默认外观类。  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TabBar"><linktext>spark.components.TabBar</linktext></link><link href="spark.skins.spark.xml#TabBarSkin"><linktext>spark.skins.spark.TabBarSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:TabBarButtonSkin:TabBarButtonSkin"><apiName>TabBarButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:TextAreaSkin"><apiName>TextAreaSkin</apiName><shortdesc>Spark TextArea 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark TextArea 组件的默认外观类。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TextArea"><linktext>spark.components.TextArea</linktext></link></related-links><apiConstructor id="spark.skins.spark:TextAreaSkin:TextAreaSkin"><apiName>TextAreaSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TextAreaSkin:background"><apiName>background</apiName><shortdesc>定义 TextArea 组件的背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 TextArea 组件的背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextArea</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:promptDisplay"><apiName>promptDisplay</apiName><shortdesc>定义提示文本使用的标签。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc>定义提示文本使用的标签。includeInLayout 属性为 false，则提示文本不会影响测量。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:scroller"><apiName>scroller</apiName><shortdesc>定义用于滚动 TextArea 控件的滚动条。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Scroller</apiValueClassifier></apiValueDef><apiDesc>定义用于滚动 TextArea 控件的滚动条。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TextAreaSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RichEditableText</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.SkinnableTextBase#textDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperDecrementButtonSkin"><apiName>NumericStepperDecrementButtonSkin</apiName><shortdesc>Spark NumericStepper 组件的向下按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark NumericStepper 组件的向下按钮的默认外观类。  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperDecrementButtonSkin:NumericStepperDecrementButtonSkin"><apiName>NumericStepperDecrementButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperDecrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>定义向下箭头的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>定义向下箭头的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperDecrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ImageLoadingSkin"><apiName>ImageLoadingSkin</apiName><shortdesc>Spark Image 外观进度栏预加载器的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark Image 外观进度栏预加载器的默认外观类。  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Image"><linktext>spark.components.Image</linktext></link></related-links><apiConstructor id="spark.skins.spark:ImageLoadingSkin:ImageLoadingSkin"><apiName>ImageLoadingSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ImageLoadingSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:Range</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HSliderTrackSkin"><apiName>HSliderTrackSkin</apiName><shortdesc>Spark HSlider 组件的滑块轨道的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark HSlider 组件的滑块轨道的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:HSliderTrackSkin:HSliderTrackSkin"><apiName>HSliderTrackSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HSliderTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HighlightBitmapCaptureSkin"><apiName>HighlightBitmapCaptureSkin</apiName><shortdesc>
      执行目标组件的位图捕获并向位图应用滤镜的外观的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
      执行目标组件的位图捕获并向位图应用滤镜的外观的基类。这是 FocusSkin 和 ErrorSkin 的基类。
      
      </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ErrorSkin"><linktext>spark.skins.spark.ErrorSkin</linktext></link><link href="spark.skins.spark.xml#FocusSkin"><linktext>spark.skins.spark.FocusSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:HighlightBitmapCaptureSkin:HighlightBitmapCaptureSkin"><apiName>HighlightBitmapCaptureSkin</apiName><shortdesc>
         构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
         构造函数。
         </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:processBitmap"><apiName>processBitmap</apiName><shortdesc>
          向捕获的位图应用任何后期处理。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
          向捕获的位图应用任何后期处理。
         </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
          </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
          </apiDesc></apiOperationDetail><apiInheritDoc/></apiOperation><apiValue id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:bitmap"><apiName>bitmap</apiName><shortdesc>
          目标组件的位图捕获。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.display:Bitmap"/></apiValueDef><apiDesc>
          目标组件的位图捕获。 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HighlightBitmapCaptureSkin:protected:borderWeight:get"><apiName>borderWeight</apiName><shortdesc>
          要放置在位图周围的填充像素数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
          要放置在位图周围的填充像素数。
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HighlightBitmapCaptureSkin:target:get"><apiName>target</apiName><shortdesc>
          要作为目标的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:SkinnableComponent</apiValueClassifier></apiValueDef><apiDesc>
          要作为目标的对象。
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarLeftButtonSkin"><apiName>ScrollBarLeftButtonSkin</apiName><shortdesc>Spark ScrollBar 组件的向左按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ScrollBar 组件的向左按钮的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarLeftButtonSkin:ScrollBarLeftButtonSkin"><apiName>ScrollBarLeftButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarLeftButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>定义 ScrollBar 组件中的向左箭头的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>定义 ScrollBar 组件中的向左箭头的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarLeftButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:StackedFormHeadingSkin"><apiName>StackedFormHeadingSkin</apiName><shortdesc>Spark FormHeading 组件的备用外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark FormHeading 组件的备用外观类。在 FormItem 使用 StackedFormItemSkin 时，使用此外观。
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link></related-links><apiConstructor id="spark.skins.spark:StackedFormHeadingSkin:StackedFormHeadingSkin"><apiName>StackedFormHeadingSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:StackedFormHeadingSkin:background"><apiName>background</apiName><shortdesc>定义 Form 类的背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 Form 类的背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:contentCol"><apiName>contentCol</apiName><shortdesc>包含 FormItem 标签和内容的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含 FormItem 标签和内容的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:helpCol"><apiName>helpCol</apiName><shortdesc>包含 FormItem 帮助内容的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含 FormItem 帮助内容的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormHeading</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormHeading#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormHeading#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:StackedFormHeadingSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>包含序列标签的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含序列标签的列。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultItemRenderer"><apiName>DefaultItemRenderer</apiName><shortdesc>
  DefaultItemRenderer 类定义 List 控件的默认项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:rollOverColor">
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.1" theme="mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:downColor">
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description conref="spark.components.supportClasses.GroupBase#style:alternatingItemColors">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  组件已启用但没有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  禁用组件时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  组件已启用且有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.5" type="Object">
<description>
  指定两端对齐要用的字间距。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.wordSpacing。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  将文本导入到 TextFlow 中时压缩或保留空白。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  确定要旋转此文本的度数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textRotation。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  文本第一行偏离容器左侧的距离。
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textIndent。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textIndent；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  指定与段落关联的制表位。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.tabStops。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  段落开始边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  段落之前要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  段落之后要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  段落结束边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  它控制列表中项目的外观。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStyleType。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  它控制列表项目标记相对于列表项目的位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStylePosition。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  指定当列表相应侧的内边距值为 <codeph>auto</codeph> 时，列表开始边缘的自动缩进。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  指定行距模型，它是行距基准和行距方向的组合。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.leadingModel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  指定容器中第一行的基线位置。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  控制文本在浮点周围的环绕方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.clearFloats。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  控制在将连续文本断开为多行时允许行断开的位置。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  指定线位置的垂直或水平行进。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.skins.spark.xml#DefaultItemRenderer/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.skins.spark:DefaultItemRenderer" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  DefaultItemRenderer 类定义 List 控件的默认项呈示器。默认项呈示器仅仅绘制与列表中的每一项相关联的文本。
 
  <p>通过创建自定义的项呈示器，您可以覆盖默认项呈示器。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List"><linktext>spark.components.List</linktext></link><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link><link href="spark.components.xml#IItemRenderer"><linktext>spark.components.IItemRenderer</linktext></link><link href="spark.components.supportClasses.xml#ItemRenderer"><linktext>spark.components.supportClasses.ItemRenderer</linktext></link></related-links><adobeApiEvent id="spark.skins.spark:DefaultItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.skins.spark:DefaultItemRenderer:DefaultItemRenderer"><apiName>DefaultItemRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DefaultItemRenderer:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      可选项呈示器标签组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:TextBase</apiValueClassifier></apiValueDef><apiDesc>
      可选项呈示器标签组件。此组件用于确定项呈示器的主机组件中 <codeph>baselinePosition</codeph> 属性的值。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      由 IDataRenderer 接口定义的 data 属性实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      由 IDataRenderer 接口定义的 <codeph>data</codeph> 属性实现。设置此属性后，它将存储值并使组件失效以触发组件重新布局。
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      如果正在拖动项呈示器，则包含 true。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      如果正在拖动项呈示器，则包含 <codeph>true</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      项呈示器的主机组件的数据提供程序中的项目索引。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     </apiDefaultValue></apiValueDef><apiDesc>
      
      项呈示器的主机组件的数据提供程序中的项目索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      
      要在项呈示器中显示的 String。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""    
     </apiDefaultValue></apiValueDef><apiDesc>
      
      要在项呈示器中显示的 String。 
     
      <p>项呈示器的主机组件可以使用 <codeph>itemToLabel()</codeph> 方法将数据项目转换为 String 以便项呈示器可以将其显示。 </p>
     
      <p>对于诸如 List 和 ButtonBar 等控件，可以使用 <codeph>labelField</codeph> 或 <codeph>labelFunction</codeph> 属性指定包含 String 的数据项目的字段。否则，主机组件使用 <codeph>toString()</codeph> 方法将数据项目转换为 String。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      
      如果项呈示器可以将其自身显示为已选中，则包含 true。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      
      如果项呈示器可以将其自身显示为已选中，则包含 <codeph>true</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DefaultItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      如果项呈示器可以将其自身显示为已获取焦点，则包含 true。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
     </apiDefaultValue></apiValueDef><apiDesc>
      
      如果项呈示器可以将其自身显示为已获取焦点，则包含 <codeph>true</codeph>。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HScrollBarTrackSkin"><apiName>HScrollBarTrackSkin</apiName><shortdesc>Spark HScrollBar 组件上的滑块轨道的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark HScrollBar 组件上的滑块轨道的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:HScrollBarTrackSkin:HScrollBarTrackSkin"><apiName>HScrollBarTrackSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HScrollBarTrackSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ComboBoxButtonSkin"><apiName>ComboBoxButtonSkin</apiName><shortdesc>Spark ComboBox 组件上的锚点按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ComboBox 组件上的锚点按钮的默认外观类。  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ComboBox"><linktext>spark.components.ComboBox</linktext></link><link href="spark.skins.spark.xml#ComboBoxSkin"><linktext>spark.skins.spark.ComboBoxSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:ComboBoxButtonSkin:ComboBoxButtonSkin"><apiName>ComboBoxButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ComboBoxButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>在锚点按钮中显示的箭头图形。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>在锚点按钮中显示的箭头图形。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ComboBoxButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:FormHeadingSkin"><apiName>FormHeadingSkin</apiName><shortdesc>Spark FormHeading 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark FormHeading 组件的默认外观类。  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#FormHeading"><linktext>spark.components.FormHeading</linktext></link></related-links><apiConstructor id="spark.skins.spark:FormHeadingSkin:FormHeadingSkin"><apiName>FormHeadingSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:FormHeadingSkin:background"><apiName>background</apiName><shortdesc>定义 Form 类的背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 Form 类的背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:contentCol"><apiName>contentCol</apiName><shortdesc>包含表单项内容的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含表单项内容的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:helpCol"><apiName>helpCol</apiName><shortdesc>包含表单项帮助内容的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含表单项帮助内容的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:FormHeading</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
        </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:labelCol"><apiName>labelCol</apiName><shortdesc>包含表单项标签的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含表单项标签的列。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.FormHeading#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.FormHeading#labelDisplay"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:FormHeadingSkin:sequenceCol"><apiName>sequenceCol</apiName><shortdesc>包含序列标签的列。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.containers.utilityClasses:ConstraintColumn"/></apiValueDef><apiDesc>包含序列标签的列。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarDownButtonSkin"><apiName>ScrollBarDownButtonSkin</apiName><shortdesc>Spark ScrollBar 组件的向下按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ScrollBar 组件的向下按钮的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarDownButtonSkin:ScrollBarDownButtonSkin"><apiName>ScrollBarDownButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarDownButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>定义 ScrollBar 组件中的向下箭头的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>定义 ScrollBar 组件中的向下箭头的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarDownButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollerSkin"><apiName>ScrollerSkin</apiName><shortdesc>Spark Scroller 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark Scroller 组件的默认外观类。 
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Scroller"><linktext>spark.components.Scroller</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollerSkin:ScrollerSkin"><apiName>ScrollerSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollerSkin:horizontalScrollBarFactory"><apiName>horizontalScrollBarFactory</apiName><shortdesc>水平 ScrollBar，在因数据太多而不能在显示区域中以水平方向完全显示时，可用来控制所显示的数据部分。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>水平 ScrollBar，在因数据太多而不能在显示区域中以水平方向完全显示时，可用来控制所显示的数据部分。Scroller 确定水平 ScrollBar 是否可见。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Scroller</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollerSkin:verticalScrollBarFactory"><apiName>verticalScrollBarFactory</apiName><shortdesc>垂直 ScrollBar，在因数据太多而不能在显示区域中以垂直方向完全显示时，可用来控制所显示的数据部分。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>垂直 ScrollBar，在因数据太多而不能在显示区域中以垂直方向完全显示时，可用来控制所显示的数据部分。Scroller 确定垂直 ScrollBar 是否可见。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SpinnerIncrementButtonSkin"><apiName>SpinnerIncrementButtonSkin</apiName><shortdesc>Spark Spinner 组件的向上按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark Spinner 组件的向上按钮的默认外观类。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.skins.spark:SpinnerIncrementButtonSkin:SpinnerIncrementButtonSkin"><apiName>SpinnerIncrementButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SpinnerIncrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>定义向上箭头的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>定义向上箭头的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SpinnerIncrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SkinnableDataContainerSkin"><apiName>SkinnableDataContainerSkin</apiName><shortdesc>Spark SkinnableDataContainer 容器的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark SkinnableDataContainer 容器的默认外观类。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableDataContainer"><linktext>spark.components.SkinnableDataContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:SkinnableDataContainerSkin:SkinnableDataContainerSkin"><apiName>SkinnableDataContainerSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SkinnableDataContainerSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnableDataContainerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:SkinnableDataContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HScrollBarSkin"><apiName>HScrollBarSkin</apiName><shortdesc>Spark HScrollBar 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark HScrollBar 组件的默认外观类。缩略图外观和滑块轨道外观分别由 HScrollBarThumbSkin 和 HScrollBarTrackSkin 类定义。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:HScrollBarSkin:HScrollBarSkin"><apiName>HScrollBarSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HScrollBarSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">默认外观类为 ScrollBarLeftButtonSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#decrementButton">默认外观类为 ScrollBarLeftButtonSkin。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarLeftButtonSkin"><linktext>spark.skins.spark.ScrollBarLeftButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:HScrollBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">默认外观类为 ScrollBarRightButtonSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ScrollBarBase#incrementButton">默认外观类为 ScrollBarRightButtonSkin。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#ScrollBarRightButtonSkin"><linktext>spark.skins.spark.ScrollBarRightButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">默认外观类为 HScrollBarThumbSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">默认外观类为 HScrollBarThumbSkin。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HScrollBarThumbSkin"><linktext>spark.skins.spark.HScrollBarThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HScrollBarSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">默认外观类为 HScrollBarTrackSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">默认外观类为 HScrollBarTrackSkin。    
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HScrollBarTrackSkin"><linktext>spark.skins.spark.HScrollBarTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SpinnerSkin"><apiName>SpinnerSkin</apiName><shortdesc>Spark Spinner 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark Spinner 组件的默认外观类。Spinner 组件上的向下按钮和向上按钮的外观分别由 SpinnerDecrementButtonSkin 和 SpinnerIncrementButtonSkin 类定义。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link><link href="spark.skins.spark.xml#SpinnerDecrementButtonSkin"><linktext>spark.skins.spark.SpinnerDecrementButtonSkin</linktext></link><link href="spark.skins.spark.xml#SpinnerIncrementButtonSkin"><linktext>spark.skins.spark.SpinnerIncrementButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:SpinnerSkin:SpinnerSkin"><apiName>SpinnerSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SpinnerSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.Spinner#decrementButton">默认外观类为 SpinnerDecrementButtonSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#decrementButton">默认外观类为 SpinnerDecrementButtonSkin。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#SpinnerDecrementButtonSkin"><linktext>spark.skins.spark.SpinnerDecrementButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:SpinnerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Spinner</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SpinnerSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.Spinner#incrementButton">默认外观类为 SpinnerIncrementButtonSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#incrementButton">默认外观类为 SpinnerIncrementButtonSkin。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#SpinnerIncrementButtonSkin"><linktext>spark.skins.spark.SpinnerIncrementButtonSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:NumericStepperSkin"><apiName>NumericStepperSkin</apiName><shortdesc>Spark NumericStepper 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark NumericStepper 组件的默认外观类。NumericStepper 组件上的文本输入字段的外观由 NumericStepperTextInputSkin 类定义。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#NumericStepper"><linktext>spark.components.NumericStepper</linktext></link><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:NumericStepperSkin:NumericStepperSkin"><apiName>NumericStepperSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:NumericStepperSkin:decrementButton"><apiName>decrementButton</apiName><shortdesc conref="spark.components.Spinner#decrementButton">默认类为 NumericStepperDecrementButtonSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#decrementButton">默认类为 NumericStepperDecrementButtonSkin。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#NumericStepperDecrementButtonSkin"><linktext>spark.skins.spark.NumericStepperDecrementButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:NumericStepperSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:NumericStepper</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:NumericStepperSkin:incrementButton"><apiName>incrementButton</apiName><shortdesc conref="spark.components.Spinner#incrementButton">默认类为 NumericStepperIncrementButtonSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Spinner#incrementButton">默认类为 NumericStepperIncrementButtonSkin。
           </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#NumericStepperIncrementButtonSkin"><linktext>spark.skins.spark.NumericStepperIncrementButtonSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:NumericStepperSkin:textDisplay"><apiName>textDisplay</apiName><shortdesc conref="spark.components.NumericStepper#textDisplay">默认类为 NumericStepperTextInputSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TextInput</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.NumericStepper#textDisplay">默认类为 NumericStepperTextInputSkin。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#NumericStepperTextInputSkin"><linktext>spark.skins.spark.NumericStepperTextInputSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HScrollBarThumbSkin"><apiName>HScrollBarThumbSkin</apiName><shortdesc>Spark HScrollBar 组件的缩略图的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark HScrollBar 组件的缩略图的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:HScrollBarThumbSkin:HScrollBarThumbSkin"><apiName>HScrollBarThumbSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HScrollBarThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:RadioButtonSkin"><apiName>RadioButtonSkin</apiName><shortdesc>Spark RadioButton 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark RadioButton 组件的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link><link href="spark.components.xml#RadioButtonGroup"><linktext>spark.components.RadioButtonGroup</linktext></link></related-links><apiConstructor id="spark.skins.spark:RadioButtonSkin:RadioButtonSkin"><apiName>RadioButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:RadioButtonSkin:dot"><apiName>dot</apiName><shortdesc>定义 RadioButton 的点的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>定义 RadioButton 的点的外观。若要自定义点的外观，请创建自定义 RadioButtonSkin 类。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:RadioButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:RadioButton</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:RadioButtonSkin:labelDisplay"><apiName>labelDisplay</apiName><shortdesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.ButtonBase#labelDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ApplicationSkin"><apiName>ApplicationSkin</apiName><shortdesc>Spark Application 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark Application 组件的默认外观类。 
        
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Application"><linktext>spark.components.Application</linktext></link></related-links><apiConstructor id="spark.skins.spark:ApplicationSkin:ApplicationSkin"><apiName>ApplicationSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ApplicationSkin:backgroundRect"><apiName>backgroundRect</apiName><shortdesc>使用构成应用程序的背景的实色填充的矩形。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>使用构成应用程序的背景的实色填充的矩形。可以将填充的颜色设置为 Application 的 backgroundColor 属性。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ApplicationSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ApplicationSkin:controlBarGroup"><apiName>controlBarGroup</apiName><shortdesc conref="spark.components.Application#controlBarGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Application#controlBarGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ApplicationSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc> 
         引用此外观所应用到的组件的强类型属性。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Application</apiValueClassifier></apiValueDef><apiDesc> 
         引用此外观所应用到的组件的强类型属性。
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:BorderContainerSkin"><apiName>BorderContainerSkin</apiName><shortdesc>
  Spark BorderContainer 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spark BorderContainer 组件的默认外观类。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#BorderContainer"><linktext>spark.components.BorderContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:BorderContainerSkin:BorderContainerSkin"><apiName>BorderContainerSkin</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:BorderContainerSkin:contentGroup:get"><apiName>contentGroup</apiName><shortdesc>
      SkinnableContainer 的必需外观部分 
     </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>
      SkinnableContainer 的必需外观部分 
     </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:BorderContainerSkin:hostComponent:get"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:BorderContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HSliderSkin"><apiName>HSliderSkin</apiName><shortdesc>Spark HSlider 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark HSlider 组件的默认外观类。缩略图外观和滑块轨道外观分别由 HSliderThumbSkin 和 HSliderTrackSkin 类定义。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:HSliderSkin:HSliderSkin"><apiName>HSliderSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HSliderSkin:dataTip"><apiName>dataTip</apiName><shortdesc>在 mx.controls.Slider 控件中使用的工具提示。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc>在 mx.controls.Slider 控件中使用的工具提示。要自定义 DataTip 的外观，请创建自定义 HSliderSkin 类。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HSliderSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:HSlider</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:HSliderSkin:thumb"><apiName>thumb</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#thumb">默认外观类为 HSliderThumbSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#thumb">默认外观类为 HSliderThumbSkin。
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HSliderThumbSkin"><linktext>spark.skins.spark.HSliderThumbSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:HSliderSkin:track"><apiName>track</apiName><shortdesc conref="spark.components.supportClasses.TrackBase#track">默认外观类为 HSliderTrackSkin。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.supportClasses.TrackBase#track">默认外观类为 HSliderTrackSkin。 
            </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.xml#HSliderTrackSkin"><linktext>spark.skins.spark.HSliderTrackSkin</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SpinnerDecrementButtonSkin"><apiName>SpinnerDecrementButtonSkin</apiName><shortdesc>Spark Spinner 组件的向下按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark Spinner 组件的向下按钮的默认外观类。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.skins.spark:SpinnerDecrementButtonSkin:SpinnerDecrementButtonSkin"><apiName>SpinnerDecrementButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SpinnerDecrementButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>定义向下箭头的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>定义向下箭头的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SpinnerDecrementButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SkinnableContainerSkin"><apiName>SkinnableContainerSkin</apiName><shortdesc>Spark SkinnableContainer 容器的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark SkinnableContainer 容器的默认外观类。  
     </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnableContainer"><linktext>spark.components.SkinnableContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:SkinnableContainerSkin:SkinnableContainerSkin"><apiName>SkinnableContainerSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SkinnableContainerSkin:background"><apiName>background</apiName><shortdesc>定义 SkinnableContainer 类的背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 SkinnableContainer 类的背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnableContainerSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnableContainerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:SkinnableContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ScrollBarUpButtonSkin"><apiName>ScrollBarUpButtonSkin</apiName><shortdesc>Spark ScrollBar 组件的向上按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ScrollBar 组件的向上按钮的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#ScrollBarBase"><linktext>spark.components.supportClasses.ScrollBarBase</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link></related-links><apiConstructor id="spark.skins.spark:ScrollBarUpButtonSkin:ScrollBarUpButtonSkin"><apiName>ScrollBarUpButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ScrollBarUpButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>定义 ScrollBar 组件中的向上箭头的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>定义 ScrollBar 组件中的向上箭头的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ScrollBarUpButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:PanelSkin"><apiName>PanelSkin</apiName><shortdesc>Spark Panel 容器的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark Panel 容器的默认外观类。  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Panel"><linktext>spark.components.Panel</linktext></link></related-links><apiConstructor id="spark.skins.spark:PanelSkin:PanelSkin"><apiName>PanelSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:PanelSkin:background"><apiName>background</apiName><shortdesc>定义 PanelSkin 类的背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 PanelSkin 类的背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:contents"><apiName>contents</apiName><shortdesc>包含标题栏内容和控件栏的垂直堆栈。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>包含标题栏内容和控件栏的垂直堆栈。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:controlBarGroup"><apiName>controlBarGroup</apiName><shortdesc conref="spark.components.Panel#controlBarGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#controlBarGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Panel</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:PanelSkin:titleDisplay"><apiName>titleDisplay</apiName><shortdesc conref="spark.components.Panel#titleDisplay"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Label</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.Panel#titleDisplay"/></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:DefaultButtonSkin"><apiName>DefaultButtonSkin</apiName><shortdesc>Spark DefaultButton 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark DefaultButton 组件的默认外观类。DefaultButton 组件是在诸如 Alert 的面板中使用的。它由容器上的 defaultButton 属性定义。  
</apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.controls.Alert.xml"><linktext>mx.controls.Alert</linktext></link></related-links><apiConstructor id="spark.skins.spark:DefaultButtonSkin:DefaultButtonSkin"><apiName>DefaultButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:FocusSkin"><apiName>FocusSkin</apiName><shortdesc>
  定义组件具有焦点时 Spark 组件周围的“发光”效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.skins.spark:HighlightBitmapCaptureSkin</apiBaseClassifier></apiClassifierDef><apiDesc>
  定义组件具有焦点时 Spark 组件周围的“发光”效果。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.skins.spark:FocusSkin:FocusSkin"><apiName>FocusSkin</apiName><shortdesc>
     构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     构造函数。
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:FocusSkin:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
     
          </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc>
     
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.skins.spark:FocusSkin:protected:borderWeight:get"><apiName>borderWeight</apiName><shortdesc>
      
          要放置在位图周围的填充像素数。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
          要放置在位图周围的填充像素数。
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonBarFirstButtonSkin"><apiName>ButtonBarFirstButtonSkin</apiName><shortdesc>Spark ButtonBar 组件中第一个按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ButtonBar 组件中第一个按钮的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarFirstButtonSkin:ButtonBarFirstButtonSkin"><apiName>ButtonBarFirstButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.skins.spark:DropDownListButtonSkin"><apiName>DropDownListButtonSkin</apiName><shortdesc>Spark DropDownList 组件上的锚点按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark DropDownList 组件上的锚点按钮的默认外观类。  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:DropDownListButtonSkin:DropDownListButtonSkin"><apiName>DropDownListButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:DropDownListButtonSkin:arrow"><apiName>arrow</apiName><shortdesc>在锚点按钮中显示的箭头图形。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Path</apiValueClassifier></apiValueDef><apiDesc>在锚点按钮中显示的箭头图形。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:DropDownListButtonSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:UITextFieldGridItemRenderer"><apiName>UITextFieldGridItemRenderer</apiName><shortdesc>
  UITextFieldGridItemRenderer 类定义显示单个文本标签的简单而有效的项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><Exclude kind="style" name="layoutDirection"/><Exclude kind="property" name="layoutDirection"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components.gridClasses:IGridItemRenderer</apiBaseInterface><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier>mx.core:UITextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  UITextFieldGridItemRenderer 类定义显示单个文本标签的简单而有效的项。对于显示带有大量可视单元格的网格控件的应用程序，该呈示器在 Microsoft Windows 中提供最佳性能。它基于 TextField，而不是 Flash 文本引擎 (FTE)，所以它缺少对某些 Spark 文本功能的支持，且不支持 FTE 特定文本样式。
 
  <p>您可以通过使用 <codeph>wordWrap</codeph> 属性来控制标签文本换行。例如，设置 <codeph>wordWrap="false"</codeph> 和 <codeph>variableRowHeight="false"</codeph> 后，会创建固定高度的单元格（相应单元格标签不换行）。如果您未显式设置 <codeph>wordWrap</codeph> 属性，则 <codeph>wordWrap</codeph> 会设置为网格的 <codeph>variableRowHeight</codeph> 属性值。</p>
 
  <p>UITextFieldGridItemRenderer 从其父代继承 <codeph>layoutDirection</codeph> 属性的值。它不应在 UITextFieldGridItemRenderer 上直接进行设置。</p> 
 
  <p>UITextFieldGridItemRenderer 不可设置子类或复制。创建基于 GridItemRenderer 类的自定义项呈示器。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DataGrid"><linktext>spark.components.DataGrid</linktext></link><link href="spark.components.gridClasses.xml#GridItemRenderer"><linktext>spark.components.gridClasses.GridItemRenderer</linktext></link><link href="spark.skins.spark.xml#DefaultGridItemRenderer"><linktext>spark.skins.spark.DefaultGridItemRenderer</linktext></link><link href="mx.core.xml#FTETextField"><linktext>mx.core.FTETextField</linktext></link></related-links><adobeApiEvent id="spark.skins.spark:UITextFieldGridItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当可绑定的 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当可绑定的 <codeph>data</codeph> 属性更改时进行分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.skins.spark:UITextFieldGridItemRenderer:UITextFieldGridItemRenderer"><apiName>UITextFieldGridItemRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.skins.spark:UITextFieldGridItemRenderer:discard"><apiName>discard</apiName><shortdesc>
      
      在已确定此呈示器将不再可见时，从项呈示器父代的 updateDisplayList() 方法调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>hasBeenRecycled</apiItemName><apiType value="Boolean"/><apiDesc>如果要将此呈示器添加到所有者的内部空闲列表以重用，则为 <codeph>true</codeph>。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      在已确定此呈示器将不再可见时，从项呈示器父代的 <codeph>updateDisplayList()</codeph> 方法调用。如果 <codeph>willBeRecycled</codeph> 参数设置为 <codeph>true</codeph>，则所有者将此呈示器添加到其内部空闲列表以重用。实现可使用此方法清除任何不再需要的呈示器属性。
     
      <p>不可直接调用此方法。它将被 DataGrid 实现调用。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.skins.spark:UITextFieldGridItemRenderer:prepare"><apiName>prepare</apiName><shortdesc>
      
      在设置了呈示器的所有属性后，从项呈示器父代的 updateDisplayList() 方法调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>willBeRecycled</apiItemName><apiType value="Boolean"/><apiDesc> 如果正在重用此呈示器，则为 <codeph>true</codeph>。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      在设置了呈示器的所有属性后，从项呈示器父代的 <codeph>updateDisplayList()</codeph> 方法调用。如果以前从未使用过此呈示器，则 <codeph>hasBeenRecycled</codeph> 参数为 <codeph>false</codeph>，表示此呈示器不可再生。当呈示器将要可见时，每次因呈示器属性更改而重新显示呈示器时，或显式请求重新显示时，调用此方法。 
     
      <p>此方法可以用来配置呈示器的所有可视元素和属性。使用此方法与将 <codeph>data</codeph> 属性绑定到可视元素属性相比，效率会更高。注意：由于 <codeph>prepare()</codeph> 方法经常被调用，因此请确保已对其进行高效编码。</p>
     
      <p>在调用 <codeph>discard()</codeph> 方法之前，可能会多次调用 <codeph>prepare()</codeph> 方法。</p>
     
      <p>不可直接调用此方法。它将被 DataGrid 实现调用。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:columnIndex:get"><apiName>columnIndex</apiName><shortdesc>
      
      此项呈示器的单元格的列索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      此项呈示器的单元格的列索引。这是与 <codeph>column.columnIndex</codeph> 相同的值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:column:get"><apiName>column</apiName><shortdesc>
      
      表示与此项呈示器相关联的列的 GridColumn 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="columnChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.gridClasses:GridColumn</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      表示与此项呈示器相关联的列的 GridColumn 对象。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      针对网格控件整个行的数据提供程序项的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="dataChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      针对网格控件整个行的数据提供程序项的值。项呈示器通常将可视元素属性绑定至该对象的属性。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:down:get"><apiName>down</apiName><shortdesc>
      在调用 prepare() 之前，网格控件的 updateDisplayList() 方法设置此属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="downChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>在调用 <codeph>prepare()</codeph> 之前，网格控件的 <codeph>updateDisplayList()</codeph> 方法设置此属性。   </p>
     
      
      在网格单元格中发生以下两个输入动作之一时，该属性设置为 <codeph>true</codeph>：按鼠标按键或按触摸屏。当释放鼠标按键、用户的手指离开触摸屏或将鼠标/触摸拖离网格单元格时，<codeph>down</codeph> 属性重置为 <codeph>false</codeph>。   
     
      <p>与 List 项呈示器不同，Grid 项呈示器不专门负责显示按下指示符。Grid 本身为所选行或单元格呈示按下指示符。项呈示器还可以更改其 visual 属性以强调正在按此项呈示器。</p>   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      如果正在拖动项呈示器（通常作为拖放操作的一部分），则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="draggingChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      如果正在拖动项呈示器（通常作为拖放操作的一部分），则包含 <codeph>true</codeph>。目前，Spark DataGrid 控件不支持拖放操作。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:grid:get"><apiName>grid</apiName><shortdesc>
      与此项呈示器相关联的网格控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components:Grid</apiValueClassifier></apiValueDef><apiDesc>
      与此项呈示器相关联的网格控件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:hovered:get"><apiName>hovered</apiName><shortdesc>
      鼠标悬停在项呈示器上时设置为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="hoveredChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      鼠标悬停在项呈示器上时设置为 <codeph>true</codeph>。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      在调用 preprare() 之前，网格控件将此属性设置为列的 itemToLabel() 方法的值。要在项呈示器中显示的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""  
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>在调用 <codeph>preprare()</codeph> 之前，网格控件将此属性设置为列的 <codeph>itemToLabel()</codeph> 方法的值。</p>
     
      
      要在项呈示器中显示的 String。  
     
      <p>如果 <codeph>labelDisplay</codeph> 元素已指定，GridItemRenderer 类会自动将该属性的值复制到该元素的 <codeph>text</codeph> 属性。Grid 将 <codeph>label</codeph> 设置为由列的 <codeph>itemToLabel()</codeph> 方法返回的值。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:rowIndex:get"><apiName>rowIndex</apiName><shortdesc>
      在调用 prepare() 之前，网格控件的 updateDisplayList() 方法设置此属性。正在呈示的单元格的从零开始的行索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="rowIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>在调用 <codeph>prepare()</codeph> 之前，网格控件的 <codeph>updateDisplayList()</codeph> 方法设置此属性。</p>
     
      
      正在呈示的单元格的从零开始的行索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      在调用 prepare() 之前，网格控件的 updateDisplayList() 方法设置此属性。如果项呈示器的单元格属于当前选定内容，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectedChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>在调用 <codeph>prepare()</codeph> 之前，网格控件的 <codeph>updateDisplayList()</codeph> 方法设置此属性。</p>
     
      
      如果项呈示器的单元格属于当前选定内容，则包含 <codeph>true</codeph>。
     
      <p> 与 List 项呈示器不同，Grid 项呈示器不专门负责显示内容以指明它们是选定内容的一部分。Grid 本身为选定行或单元格自动显示 selectionIndicator 外观部件。项呈示器还可以更改其 visual 属性以强调它属于选定内容。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:UITextFieldGridItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      在调用 preprare() 之前，网格控件的 updateDisplayList() 方法设置此属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="showsCaretChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      <p>在调用 <codeph>preprare()</codeph> 之前，网格控件的 <codeph>updateDisplayList()</codeph> 方法设置此属性。   </p>
     
      
      如果插入标记指明项呈示器的单元格，则包含 <codeph>true</codeph>。
     
      <p> 与 List 项呈示器不同，Grid 项呈示器不专门负责显示内容以指明它们的单元格或行含有插入标记。Grid 本身为插入标记行或单元格自动显示 caretIndicator 外观部件。项呈示器还可以更改其 visual 属性以强调它含有插入标记。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:HSliderThumbSkin"><apiName>HSliderThumbSkin</apiName><shortdesc>Spark HSlider 组件的缩略图的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark HSlider 组件的缩略图的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link></related-links><apiConstructor id="spark.skins.spark:HSliderThumbSkin:HSliderThumbSkin"><apiName>HSliderThumbSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:HSliderThumbSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Button</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ListSkin"><apiName>ListSkin</apiName><shortdesc>Spark List 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark List 组件的默认外观类。  
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#List"><linktext>spark.components.List</linktext></link></related-links><apiConstructor id="spark.skins.spark:ListSkin:ListSkin"><apiName>ListSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:ListSkin:background"><apiName>background</apiName><shortdesc>定义基于列表的组件的背景外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义基于列表的组件的背景外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:bgFill"><apiName>bgFill</apiName><shortdesc>定义背景的颜色。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.graphics:SolidColor"/></apiValueDef><apiDesc>定义背景的颜色。默认颜色为 0xFFFFFF。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:dropIndicator"><apiName>dropIndicator</apiName><shortdesc conref="spark.components.List#dropIndicator">定义 List 的拖放指示符的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiType value="mx.core:ClassFactory"/></apiValueDef><apiDesc conref="spark.components.List#dropIndicator">定义 List 的拖放指示符的外观。要自定义拖放指示符外观，请创建自定义 ListSkin 类。List 的布局负责 dropIndicator 的大小和位置。通常将 <codeph>dropIndicator</codeph> 的大小设置为项之间间隙的大小。通常仅在沿着主轴（间隙轴）的方向考虑 minimum 和 maximum 设置。例如，VerticalLayout 忽略 <codeph>minWidth</codeph> 和 <codeph>maxWidth</codeph> 设置，但考虑 <codeph>minHeight</codeph> 和 <codeph>maxHeight</codeph>。 
        
              </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:List</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:ListSkin:scroller"><apiName>scroller</apiName><shortdesc>要将滚动条添加到列表中的 Scroller 组件。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Scroller</apiValueClassifier></apiValueDef><apiDesc>要将滚动条添加到列表中的 Scroller 组件。</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:SkinnablePopUpContainerSkin"><apiName>SkinnablePopUpContainerSkin</apiName><shortdesc>Spark SkinnablePopUpContainer 容器的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark SkinnablePopUpContainer 容器的默认外观类。  
    </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#SkinnablePopUpContainer"><linktext>spark.components.SkinnablePopUpContainer</linktext></link></related-links><apiConstructor id="spark.skins.spark:SkinnablePopUpContainerSkin:SkinnablePopUpContainerSkin"><apiName>SkinnablePopUpContainerSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:background"><apiName>background</apiName><shortdesc>定义 SkinnablePopUpContainer 类的背景的外观。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.primitives:Rect</apiValueClassifier></apiValueDef><apiDesc>定义 SkinnablePopUpContainer 类的背景的外观。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:chrome"><apiName>chrome</apiName><shortdesc>定义该外观使用的背景和内容组。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc>定义该外观使用的背景和内容组。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc conref="spark.components.SkinnableContainer#contentGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:Group</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableContainer#contentGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SkinnablePopUpContainerSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:SkinnablePopUpContainer</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:TabBarSkin"><apiName>TabBarSkin</apiName><shortdesc>Spark TabBar 组件的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:Skin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark TabBar 组件的默认外观类。由 TabBarSkin 创建的 ButtonBarButtons 使用 TabBarButtonSkin 类。  
</apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#TabBar"><linktext>spark.components.TabBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link><link href="spark.skins.spark.xml#TabBarButtonSkin"><linktext>spark.skins.spark.TabBarButtonSkin</linktext></link></related-links><apiConstructor id="spark.skins.spark:TabBarSkin:TabBarSkin"><apiName>TabBarSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:TabBarSkin:dataGroup"><apiName>dataGroup</apiName><shortdesc conref="spark.components.SkinnableDataContainer#dataGroup"/><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:DataGroup</apiValueClassifier></apiValueDef><apiDesc conref="spark.components.SkinnableDataContainer#dataGroup"/></apiValueDetail></apiValue><apiValue id="spark.skins.spark:TabBarSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="Bindable"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components:TabBar</apiValueClassifier></apiValueDef><apiDesc conref="spark.skins.spark.ApplicationSkin#hostComponent"> 
         </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:ButtonBarLastButtonSkin"><apiName>ButtonBarLastButtonSkin</apiName><shortdesc>Spark ButtonBar 组件中最后一个按钮的默认外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkButtonSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark ButtonBar 组件中最后一个按钮的默认外观类。  
       </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ButtonBar"><linktext>spark.components.ButtonBar</linktext></link><link href="spark.components.xml#ButtonBarButton"><linktext>spark.components.ButtonBarButton</linktext></link></related-links><apiConstructor id="spark.skins.spark:ButtonBarLastButtonSkin:ButtonBarLastButtonSkin"><apiName>ButtonBarLastButtonSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor></apiClassifier></apiPackage>