<?xml version="1.0" encoding="UTF-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<apiPackage id="spark.components.supportClasses"><apiName>spark.components.supportClasses</apiName><apiDetail/><apiClassifier id="spark.components.supportClasses:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
  可设置外观的容器组件的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableContainerBase" playerVersion="Flash10">
<description>
  正常状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  可设置外观的容器组件的基类。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:SkinnableContainerBase:SkinnableContainerBase"><apiName>SkinnableContainerBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableContainerBase:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      
      返回要应用到外观的状态的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>指定要应用到外观的状态的名称的字符串。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      
      返回要应用到外观的状态的名称。例如，一个 Button 组件可能会返回 String“up”、“down”、“over”或“disabled”以指定该状态。
     
      <p>SkinnableComponent 的子类必须覆盖此方法才可返回值。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableContainerBase:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      指定为容器的默认按钮的 Button 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFlexDisplayObject"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定为容器的默认按钮的 Button 控件。当容器中的控件具有焦点时，按 Enter 键与单击此 Button 控件的效果相同。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Range"><apiName>Range</apiName><shortdesc>
  Range 类包含一个值和一个该值所允许的范围，它们由 minimum 和 maximum 属性定义。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:Range&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:Range
    <strong>Properties</strong>
    maximum="100"
    minimum="0"
    snapInterval="1"
    stepSize="1"
    value="0"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Range 类包含一个值和一个该值所允许的范围，它们由 <codeph>minimum</codeph> 和 <codeph>maximum</codeph> 属性定义。会始终将 <codeph>value</codeph> 属性约束为处于当前 <codeph>minimum</codeph> 和 <codeph>maximum</codeph> 之间，且始终将 <codeph>minimum</codeph> 和 <codeph>maximum</codeph> 约束为按照正确的数字顺序，从而使 <codeph>(minimum &lt;= value &lt;= maximum)</codeph> 为 <codeph>true</codeph>。如果 <codeph>snapInterval</codeph> 属性的值不为 0，则也会将 <codeph>value</codeph> 属性约束为 <codeph>snapInterval</codeph> 的倍数。
 
  <p>Range 是需要 range 功能的各种控件（包括 TrackBase 和 Spinner）的基类。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#TrackBase"><linktext>spark.components.supportClasses.TrackBase</linktext></link><link href="spark.components.xml#Spinner"><linktext>spark.components.Spinner</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Range:Range"><apiName>Range</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Range:changeValueByStep"><apiName>changeValueByStep</apiName><shortdesc>
      按 stepSize 增大或减小 value。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>若为 true，则向 <codeph>value</codeph> 增加 <codeph>stepSize</codeph>，否则减去它。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      按 <codeph>stepSize</codeph> 增大或减小 <codeph>value</codeph>。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:nearestValidValue"><apiName>nearestValidValue</apiName><shortdesc>
      返回 minimum 与最接近 value 的 interval 的整数倍数之和，除非 value 更接近最大值限制，在该情况下，返回 maximum。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>最接近输入的有效值。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>输入值。
      </apiDesc></apiParam><apiParam><apiItemName>interval</apiItemName><apiType value="Number"/><apiDesc>snapInterval 的值，或 snapInterval 的整数倍数。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回 minimum 与最接近 <codeph>value</codeph> 的 <codeph>interval</codeph> 的整数倍数之和，除非 <codeph>value</codeph> 更接近最大值限制，在该情况下，返回 maximum。
     
      <p>如果 <codeph>interval</codeph> 等于 0，则会将该值剪裁到最小值和最大值限制。</p>
     
      <p>范围的有效值由 <codeph>minimum</codeph> 属性与 <codeph>interval</codeph> 的倍数之和定义，还被定义为小于或等于 <codeph>maximum</codeph> 属性。maximum 不需要是 <codeph>snapInterval</codeph> 的倍数。</p>
     
      <p>例如，如果 <codeph>minimum</codeph> 等于 1，<codeph>maximum</codeph> 等于 6，且 <codeph>snapInterval</codeph> 等于 3，则 Range 的有效值有 1、2、5、6。类似地，如果 <codeph>minimum</codeph> 等于 2，<codeph>maximum</codeph> 等于 9，且 <codeph>snapInterval</codeph> 等于 1.5，则 Range 的有效值有 2、3.5、5、6.5、8 和 9。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Range:protected:setValue"><apiName>setValue</apiName><shortdesc>
      在 value 属性改变时为该属性设置后备存储，并分派 valueCommit 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc><codeph>value</codeph> 属性的新值。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在 <codeph>value</codeph> 属性改变时为该属性设置后备存储，并分派 <codeph>valueCommit</codeph> 事件。  
     
      <p>对 <codeph>value</codeph> 属性的所有更新都会导致调用此方法。</p>
     
      <p>此方法假定调用者已经使用了 <codeph>nearestValidValue()</codeph> 方法来约束 value 参数</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:Range:maximum:get"><apiName>maximum</apiName><shortdesc>
      最大有效 value。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>100
      </apiDefaultValue></apiValueDef><apiDesc>
      最大有效 <codeph>value</codeph>。
     
      <p><codeph>commitProperties()</codeph> 使用 <codeph>nearestValidValue()</codeph> 方法将对 value 属性的更改约束为小于或等于最大值。</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:minimum:get"><apiName>minimum</apiName><shortdesc>
      最小有效 value。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      最小有效 <codeph>value</codeph>。
     
      <p><codeph>commitProperties()</codeph> 使用 <codeph>nearestValidValue()</codeph> 方法将对 value 属性的更改约束为大于或等于最小值。</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:snapInterval:get"><apiName>snapInterval</apiName><shortdesc>
      snapInterval 属性控制 value 属性的有效值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      </apiDefaultValue></apiValueDef><apiDesc>
      snapInterval 属性控制 <codeph>value</codeph> 属性的有效值。如果为非零，则有效值为 <codeph>minimum</codeph> 与此属性的整数倍数之和，且小于或等于 <codeph>maximum</codeph>。
     
      <p>例如，如果 <codeph>minimum</codeph> 为 10，<codeph>maximum</codeph> 为 20，而此属性为 3，则可能的有效值为 10、13、16、19 和 20。</p>
      
      <p>如果此属性的值为零，则仅会将有效值约束到介于 minimum 和 maximum 之间（包括两者）。</p>
     
      <p>此属性还约束 <codeph>stepSize</codeph> 属性（如果设置）的有效值。如果未显式设置此属性，但设置了 <codeph>stepSize</codeph>，则 <codeph>snapInterval</codeph> 将默认为 <codeph>stepSize</codeph>。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:Range:stepSize:get"><apiName>stepSize</apiName><shortdesc>
      调用 changeValueByStep() 方法时 value 属性更改的数量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      调用 <codeph>changeValueByStep()</codeph> 方法时 <codeph>value</codeph> 属性更改的数量。除非 <codeph>snapInterval</codeph> 为 0，否则它必须是 <codeph>snapInterval</codeph> 的倍数。如果 <codeph>stepSize</codeph> 不是倍数，则会将它近似到大于或等于 <codeph>snapInterval</codeph> 的最近的倍数。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:Range:value:get"><apiName>value</apiName><shortdesc>
      此范围的当前值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      此范围的当前值。
      
      <p><codeph>commitProperties()</codeph> 使用 <codeph>nearestValidValue()</codeph> 方法将对 value 属性的更改约束为大于或等于 <codeph>minimum</codeph> 属性，小于或等于 <codeph>maximum</codeph> 属性，以及 <codeph>snapInterval</codeph> 的倍数。</p> 
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#Range/setValue"><linktext>setValue</linktext></link><link href="spark.components.supportClasses.xml#Range/nearestValidValue"><linktext>nearestValidValue</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
  ToggleButtonBase 组件是支持 selected 属性的 Spark 按钮组件的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  选中时按钮的已禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="downAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  选中时按钮的按下状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="overAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  选中时按钮的经过状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="upAndSelected" owner="spark.components.supportClasses:ToggleButtonBase" playerVersion="Flash10">
<description>
  选中时按钮的弹起状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><DefaultProperty name="label"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ToggleButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ToggleButtonBase
    <strong>Properties</strong>
    selected="false"
 
    <strong>events</strong>
    change="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ButtonBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToggleButtonBase 组件是支持 <codeph>selected</codeph> 属性的 Spark 按钮组件的基类。ToggleButton、CheckBox 和 RadioButton 是 ToggleButtonBase 的子类。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ToggleButtonBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  ToggleButtonBase 控件的 selected 属性发生变化时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ToggleButtonBase 控件的 <codeph>selected</codeph> 属性发生变化时分派。仅当用户使用鼠标与控件交互时，才分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ToggleButtonBase:ToggleButtonBase"><apiName>ToggleButtonBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ToggleButtonBase:selected:get"><apiName>selected</apiName><shortdesc>
      按钮处于按下状态时包含 true，而按钮处于弹起状态时包含 false。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      按钮处于按下状态时包含 <codeph>true</codeph>，而按钮处于弹起状态时包含 <codeph>false</codeph>。
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:OverlayDepth"><apiName>OverlayDepth</apiName><shortdesc>
  OverlayDepth 类定义 Flex 使用的各叠加元素的默认深度值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  OverlayDepth 类定义 Flex 使用的各叠加元素的默认深度值。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext>spark.components.Group.overlay</linktext></link><link href="spark.components.xml#DataGroup/overlay"><linktext>spark.components.DataGroup.overlay</linktext></link></related-links><apiValue id="spark.components.supportClasses:OverlayDepth:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
      所有 Flex 叠加元素之下的默认深度值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      所有 Flex 叠加元素之下的默认深度值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:DROP_INDICATOR"><apiName>DROP_INDICATOR</apiName><shortdesc>
	  拖放指示符的叠加深度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  拖放指示符的叠加深度。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:FOCUS_PANE"><apiName>FOCUS_PANE</apiName><shortdesc>
	  焦点窗格的叠加深度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  焦点窗格的叠加深度。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:MASK"><apiName>MASK</apiName><shortdesc>
      遮罩的叠加深度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      遮罩的叠加深度。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:OverlayDepth:TOP"><apiName>TOP</apiName><shortdesc>
	  所有 Flex 叠加元素之上的默认深度值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  所有 Flex 叠加元素之上的默认深度值。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
  ItemRenderer 类是 Spark 项呈示器的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ItemRenderer&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ItemRenderer
    <strong>Properties</strong>
    autoDrawBackground="true"
    selected="false"
    showsCaret="false"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.components:IItemRenderer</apiBaseInterface><apiBaseClassifier>spark.components:DataRenderer</apiBaseClassifier></apiClassifierDef><apiDesc>
  ItemRenderer 类是 Spark 项呈示器的基类。
 
  <p>项呈示器支持可选视图状态。您通常在 MXML 项呈示器中使用视图状态，来基于与项的用户交互控制数据项的外观。ItemRenderer 类支持所有视图状态，因此您可以使用这些项呈示器处理基于列表的类。</p>
 
  <p>Flex 定义在您的项呈示器中支持的以下视图状态： </p>
  <ul>
    <li>normal - 数据项没有用户交互。</li>
    <li>hovered - 鼠标在数据项上。</li>
    <li>selected - 已选中数据项。</li>
    <li>dragging - 正在拖动数据项。</li>
    <li>normalAndShowCaret - 数据项处于 normal 状态，且它在项列表中具有焦点。 </li>
    <li>hoveredAndShowCaret - 数据项处于 hovered 状态，且它在项列表中具有焦点。</li>
    <li>selectedAndShowCaret - 数据项处于 normal 状态，且它在项列表中具有焦点。</li>
  </ul>
 
  <p>当用户以更改项呈示器的视图状态的方式与控件交互时，Flex 首先确定呈示器是否定义该视图状态。如果项呈示器支持视图状态，Flex 将设置项呈示器以使用该视图状态。如果项呈示器不支持视图状态，则 Flex 不执行任何操作。</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ItemRenderer:ItemRenderer"><apiName>ItemRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:getCurrentRendererState"><apiName>getCurrentRendererState</apiName><shortdesc>
      返回要应用到呈示器的状态的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>指定要应用到呈示器的状态的名称的字符串。 
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      返回要应用到呈示器的状态的名称。例如，一个非常基本的 List 项呈示器会返回字符串“normal”、“hovered”或“selected”以指定呈示器的状态。在处理 touch 交互（或在选择被忽略的情况下的 mouse 交互）时，“down”和“downAndSelected”也是很重要的状态。
     
      <p>如果所需的行为与默认行为不同，则 ItemRenderer 的子类必须覆盖此方法以返回值。</p>
     
      <p>在 Flex 4.0 中，三种主要状态为“normal”、“hovered”和“selected”。在 Flex 4.5 中，添加了“down”和“downAndSelected”。</p>
     
      <p>支持的完整状态集如下所示（按照优先级的顺序）： 
        <ul>
          <li>dragging</li>
          <li>downAndSelected</li>
          <li>selectedAndShowsCaret</li>
          <li>hoveredAndShowsCaret</li>
          <li>normalAndShowsCaret</li>
          <li>down</li>
          <li>selected</li>
          <li>hovered</li>
          <li>normal</li>
        </ul>
      </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ItemRenderer:protected:invalidateRendererState"><apiName>invalidateRendererState</apiName><shortdesc>
      将呈示器的状态标记为无效，以在稍后的屏幕更新过程中设置新状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      将呈示器的状态标记为无效，以在稍后的屏幕更新过程中设置新状态。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ItemRenderer:labelDisplay"><apiName>labelDisplay</apiName><shortdesc>
      可选项呈示器标签组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.supportClasses:TextBase</apiValueClassifier></apiValueDef><apiDesc>
      可选项呈示器标签组件。此组件用于确定项呈示器的主机组件中 <codeph>baselinePosition</codeph> 属性的值。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:autoDrawBackground:get"><apiName>autoDrawBackground</apiName><shortdesc>
      指定项呈示器是否在用户交互时绘制数据项的背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定项呈示器是否在用户交互时绘制数据项的背景。交互操作包括将鼠标移到项上、选择项和移动项的尖号。
     
      <p>如果为 <codeph>true</codeph>，项呈示器的背景将自动绘制，并取决于设置的样式（<codeph>contentBackgroundColor</codeph>、<codeph>alternatingItemColor</codeph>、<codeph>rollOverColor</codeph>、<codeph>downColor</codeph>、<codeph>selectionColor</codeph>）以及项呈示器所处于的状态。</p>
     
      <p>如果为 <codeph>false</codeph>，项呈示器不绘制任何背景。您自定义的项呈示器负责为所有用户交互显示背景色。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:down:get"><apiName>down</apiName><shortdesc>
      用户在项呈示器上按下时设置为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用户在项呈示器上按下时设置为 <codeph>true</codeph>。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:dragging:get"><apiName>dragging</apiName><shortdesc>
      
      如果正在拖动项呈示器，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      如果正在拖动项呈示器，则包含 <codeph>true</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      用户将鼠标悬浮在项呈示器上时设置为 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用户将鼠标悬浮在项呈示器上时设置为 <codeph>true</codeph>。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:itemIndex:get"><apiName>itemIndex</apiName><shortdesc>
      
      项呈示器的主机组件的数据提供程序中的项目索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="itemIndexChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      项呈示器的主机组件的数据提供程序中的项目索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:label:get"><apiName>label</apiName><shortdesc>
      
      要在项呈示器中显示的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="labelChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""    
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      要在项呈示器中显示的 String。 
     
      <p>项呈示器的主机组件可以使用 <codeph>itemToLabel()</codeph> 方法将数据项目转换为 String 以便项呈示器可以将其显示。 </p>
     
      <p>对于诸如 List 和 ButtonBar 等控件，可以使用 <codeph>labelField</codeph> 或 <codeph>labelFunction</codeph> 属性指定包含 String 的数据项目的字段。否则，主机组件使用 <codeph>toString()</codeph> 方法将数据项目转换为 String。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:selected:get"><apiName>selected</apiName><shortdesc>
      
      如果项呈示器可以将其自身显示为已选中，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      如果项呈示器可以将其自身显示为已选中，则包含 <codeph>true</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ItemRenderer:showsCaret:get"><apiName>showsCaret</apiName><shortdesc>
      
      如果项呈示器可以将其自身显示为已获取焦点，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false  
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      如果项呈示器可以将其自身显示为已获取焦点，则包含 <codeph>true</codeph>。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:GroupBase"><apiName>GroupBase</apiName><shortdesc>
  GroupBase 类为显示可视元素的组件定义基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style format="Time" inherit="yes" name="touchDelay" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" type="Number">
<description>
  处于 touch 交互模式时，从发生用户交互到以可见的 down 状态显示组件，需要等待的毫秒数。
 
  <p>出现此延迟的原因在于，在用户启动滚动动作时，不要像触摸屏幕那样发生组件闪烁。通过合理的延迟，可以确保用户在按下组件后能收到反馈，且反馈不会太快以至于在滚动动作操作进行时显示反馈。</p>
  
  <p>如果应用了手机主题，则此样式的默认值为：100ms（对于 Scroller 内部组件）和 0ms（对于 Scroller 外部组件）。</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  组件的任何元件的颜色。示例包括 CheckBox 的复选标记或滚动按钮的箭头.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  鼠标位于组件上时加亮的颜色。
 
  <p>该样式只能应用在鼠标 <codeph>interactionMode</codeph> 中。</p>
 
  </description>
<default>0xCEDBEF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  组件为焦点时焦点外框的颜色。
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="downColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="uint">
<description>
  按下项呈示器时其背景的颜色
 
  <p>如果 <codeph>downColor</codeph> 设置为 <codeph>undefined</codeph>，将不使用 <codeph>downColor</codeph>。</p>
 
  <p>Spark 主题的默认值为 <codeph>undefined</codeph>。Mobile 主题的默认值为 <codeph>0xE0E0E0</codeph>。</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  禁用容器时的 Alpha 值。
   </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  此组件内容背景的颜色。
 
  <p>对于 List，更改 <codeph>contentBackgroundColor</codeph> 会更改 List 的内容背景色，但是，如果项呈示器为不透明，则用户可能看不到任何差别。项呈示器的颜色受 <codeph>alternatingItemColors</codeph> 影响。在 Spark 主题中，默认情况下，项呈示器是透明的 (<codeph>alternatingItemColors = undefined</codeph>)；但是在 Mobile 主题中，项呈示器默认为不透明 (<codeph>alternatingItemColors = 0xFFFFFF</codeph>)。</p>
  
  <p>Spark 主题的默认值为 <codeph>0xFFFFFF</codeph>。Mobile 主题的默认值为 <codeph>0xF0F0F0</codeph>。</p> 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  组件内容背景的 Alpha。
   </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  组件的主要颜色。 
   
  </description>
<default>0xCCCCCC
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="Array">
<description>
  列表中项目使用的背景色。此值是由一种或多种颜色组成的数组。列表项目的背景将交替使用此数组中的各种颜色。 
 
  <p>Spark 主题的默认值为 <codeph>undefined</codeph>。Mobile 主题的默认值为 <codeph>0xFFFFFF</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description>
  组件外观使用的强调文字颜色。默认按钮外观使用此颜色对背景进行着色。使用此颜色加亮滑块轨道。 
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  组件已启用但没有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  禁用组件时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  组件已启用且有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.5" type="Object">
<description>
  指定两端对齐要用的字间距。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.wordSpacing。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  将文本导入到 TextFlow 中时压缩或保留空白。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  确定要旋转此文本的度数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textRotation。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  文本第一行偏离容器左侧的距离。
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textIndent。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textIndent；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  指定与段落关联的制表位。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.tabStops。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  段落开始边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  段落之前要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  段落之后要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  段落结束边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  它控制列表中项目的外观。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStyleType。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  它控制列表项目标记相对于列表项目的位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStylePosition。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  指定当列表相应侧的内边距值为 <codeph>auto</codeph> 时，列表开始边缘的自动缩进。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  指定行距模型，它是行距基准和行距方向的组合。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.leadingModel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  指定容器中第一行的基线位置。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  控制文本在浮点周围的环绕方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.clearFloats。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  控制在将连续文本断开为多行时允许行断开的位置。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  指定线位置的垂直或水平行进。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#GroupBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:GroupBase" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:GroupBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:GroupBase
    <strong>Properties</strong>
    autoLayout="true"
    clipAndEnableScrolling="false"
    horizontalScrollPosition="null"
    luminosityClip="false"
    luminosityInvert="false"
    layout="BasicLayout"
    mask=""
    maskType="clip"
    mouseEnabledWhereTransparent="true"
    resizeMode="noScale"
    verticalScrollPosition="no default"
  
    <strong>Styles</strong>
    accentColor="0x0099FF"
    alignmentBaseline="useDominantBaseline"
    alternatingItemColors="undefined"
    baselineShift="0"
    blockProgression="tb"
    breakOpportunity="auto"
    cffHinting="horizontalStem"
    chromeColor="0xCCCCCC"
    color="0x000000"
    contentBackgroundAlpha="1.0"
    contentBackgroundColor="0xFFFFFF"
    clearFloats="none"
    digitCase="default"
    digitWidth="default"
    direction="ltr"
    disabledAlpha="0.5"
    dominantBaseline="auto"
    firstBaselineOffset="auto"
    focusColor="0x70B2EE"
    focusedTextSelectionColor="A8C6EE"
    fontFamily="Arial"
    fontLookup="device"
    fontSize="12"
    fontStyle="normal"
    fontWeight="normal"
    inactiveTextSelectionColor="E8E8E8"
    justificationRule="auto"
    justificationStyle="auto"
    kerning="auto"
    leadingModel="auto"
    ligatureLevel="common"
    lineHeight="120%"
    lineThrough="false"
    listAutoPadding="40"
    listStylePosition="outside"
    listStyleType="disc"
    locale="en"
    paragraphEndIndent="0"
    paragraphSpaceAfter="0"
    paragraphSpaceBefore="0"
    paragraphStartIndent="0"
    renderingMode="cff"
    rollOverColor="0xCEDBEF"
    symbolColor="0x000000"
    tabStops="null"
    textAlign="start"
    textAlignLast="start"
    textAlpha="1"
    textDecoration="none"
    textIndent="0"
    textJustify="interWord"
    textRotation="auto"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="default"
    unfocusedTextSelectionColor="0xE8E8E8"
    whiteSpaceCollapse="collapse"
    wordSpacing="100%,50%,150%"
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IViewport</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  GroupBase 类为显示可视元素的组件定义基类。group 组件不控制它所包含的可视项目的布局，而该布局是由单独的 layout 组件进行处理的。
   </apiDesc></apiClassifierDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:GroupBase:GroupBase"><apiName>GroupBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:GroupBase:containsElement"><apiName>containsElement</apiName><shortdesc>
      确定指定的 IVisualElement 是否为容器实例的子代或该实例本身。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果元素是容器的子代，则为 true
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/><apiDesc>要测试的子对象
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定指定的 IVisualElement 是否为容器实例的子代或该实例本身。将进行深度搜索，即，如果此元素是该容器的子代、孙代、曾孙代等，它将返回 true。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc conref="mx.core.UIComponent:createChildren()">
      如果尚未设置布局对象，则 createChildren() 会为该容器指定默认布局对象 BasicLayout。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent:createChildren()">
      <p>如果尚未设置布局对象，则 createChildren() 会为该容器指定默认布局对象 BasicLayout。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementAt"><apiName>getElementAt</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getElementIndex"><apiName>getElementIndex</apiName><shortdesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiType value="mx.core:IVisualElement"/></apiParam></apiOperationDef><apiDesc conref="mx.core.IVisualElementContainer#getElementIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getHorizontalScrollPositionDelta"><apiName>getHorizontalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>对水平滚动位置的更改。
     
      </apiDesc></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>采用以下值： 
      <ul>
      <li> 
      <codeph>END</codeph> 返回滚动 delta，它将使 scrollRect 与内容区域右对齐。
      </li>
      
      <li> 
      <codeph>HOME</codeph> 返回滚动 delta，它将使 scrollRect 与内容区域左对齐。
      </li>
     
      <li> 
      <codeph>LEFT</codeph> 返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的左边或在其左边左侧的第一个元素左对齐。
      </li>
     
      <li>
      <codeph>PAGE_LEFT</codeph> 返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的左边或在其左边左侧的第一个元素右对齐。
      </li>
     
      <li> 
      <codeph>PAGE_RIGHT</codeph> 返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的右边或在其右边右侧的第一个元素左对齐。
      </li>
     
      <li> 
      <codeph>RIGHT</codeph> 返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的右边或在其右边右侧的第一个元素右对齐。
      </li>
           </ul>
     
      <p>该实现调用 <codeph>getElementBoundsLeftOfScrollRect()</codeph> 和 <codeph>getElementBoundsRightOfScrollRect()</codeph> 来确定元素的界限。Layout 类通常覆盖这些方法而不是 <codeph>getHorizontalScrollPositionDelta()</codeph> 方法。</p>
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getHorizontalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVerticalScrollPositionDelta"><apiName>getVerticalScrollPositionDelta</apiName><shortdesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>对垂直滚动位置的更改。
     
      </apiDesc></apiReturn><apiParam><apiItemName>navigationUnit</apiItemName><apiType value="uint"/><apiDesc>采用以下值： 
      <ul>
      <li> 
      <codeph>DOWN</codeph> 返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的底边或在其底边之下的第一个元素底对齐。
      </li>
     
      <li> 
      <codeph>END</codeph> 返回滚动 delta，它将使 scrollRect 与内容区域底对齐。
      </li>
      
      <li> 
      <codeph>HOME</codeph> 返回滚动 delta，它将使 scrollRect 与内容区域顶对齐。
      </li>
     
      <li> 
      <codeph>PAGE_DOWN</codeph> 返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的底边或在其底边之下的第一个元素顶对齐。
      </li>
     
      <codeph>PAGE_UP</codeph>
      <li>
      返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的顶边或在其顶边之上的第一个元素底对齐。
      </li>
           <li> 
      <codeph>UP</codeph> 返回滚动 delta，它将使 scrollRect 与跨越 scrollRect 的顶边或在其顶边之上的第一个元素顶对齐。
      </li>
           </ul>
     
      <p>该实现调用 <codeph>getElementBoundsAboveScrollRect()</codeph> 和 <codeph>getElementBoundsBelowScrollRect()</codeph> 来确定元素的界限。Layout 类通常覆盖这些方法而不是 <codeph>getVerticalScrollPositionDelta()</codeph> 方法。 </p>
           </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.layouts.supportClasses.LayoutBase#getVerticalScrollPositionDelta()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:getVirtualElementAt"><apiName>getVirtualElementAt</apiName><shortdesc>
      支持 useVirtualLayout 标志的布局将在 updateDisplayList() 时使用此方法获取“处于视图中”的布局元素，即，</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>位于指定索引位置的已验证的元素。
     
      </apiDesc><apiType value="mx.core:IVisualElement"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要检索的元素的索引。
      </apiDesc></apiParam><apiParam><apiItemName>eltWidth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>如果已指定，则为新创建的或循环使用的元素的初始宽度。
      </apiDesc></apiParam><apiParam><apiItemName>eltHeight</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>如果已指定，则为新创建的或循环使用的元素的初始高度。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      支持 <codeph>useVirtualLayout</codeph> 标志的布局将在 updateDisplayList() 时使用此方法来获取“处于视图中”的布局元素（即，重叠 Group 的 scrollRect 的元素）。
     
      <p>如果要返回的元素尚不是可见子项（即，如果已创建或循环使用它，且指定了 eltWidth 或 eltHeight），则会在验证元素之前使用 setLayoutBoundsSize() 设置元素的初始大小。这对于将布局对齐到 Group 的宽度或高度时会重排的组件（如文本）很重要。</p>
      
      <p>返回的布局元素已经过验证。</p>
     
      <p>此方法将根据需要延迟创建或“循环使用”并验证布局元素。</p>
     
      <p>此方法不能直接进行调用，支持虚拟化的布局将对其进行调用。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:GroupBase:setContentSize"><apiName>setContentSize</apiName><shortdesc>
      设置 contentWidth 和 contentHeight 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc><codeph>contentWidth</codeph> 的新值。
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc><codeph>contentHeight</codeph> 的新值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置 <codeph>contentWidth</codeph> 和 <codeph>contentHeight</codeph> 属性。此方法适用于 layout 类开发者，开发者应该从 <codeph>updateDisplayList()</codeph> 方法对其进行调用。
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:GroupBase:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      如果为 true，则在更改子项的位置或大小时完成度量和布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则在更改子项的位置或大小时完成度量和布局。如果为 <codeph>false</codeph>，则仅当在容器中添加或删除子项时才能执行度量和布局。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components.supportClasses:GroupBase:clipAndEnableScrolling:get"><apiName>clipAndEnableScrolling</apiName><shortdesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="spark.core.IViewport#clipAndEnableScrolling">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentHeight:get"><apiName>contentHeight</apiName><shortdesc conref="spark.core.IViewport#contentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:contentWidth:get"><apiName>contentWidth</apiName><shortdesc conref="spark.core.IViewport#contentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#contentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:layout:get"><apiName>layout</apiName><shortdesc>
      此容器的 layout 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.layouts.supportClasses:LayoutBase</apiValueClassifier><apiDefaultValue>spark.layouts.BasicLayout
           </apiDefaultValue></apiValueDef><apiDesc>
      此容器的 layout 对象。此对象负责容器中可视元素的测量和布局。
     
      </apiDesc></apiValueDetail><related-links><link href="spark.layouts.supportClasses.xml#LayoutBase"><linktext>spark.layouts.supportClasses.LayoutBase</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityClip:get"><apiName>luminosityClip</apiName><shortdesc>
      控制发光度遮罩是否剪辑设置了遮罩的内容的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      </apiDefaultValue></apiValueDef><apiDesc>
      控制发光度遮罩是否剪辑设置了遮罩的内容的属性。只有图形元素应用了类型为 MaskType.LUMINOSITY 的遮罩，此属性才会起作用。  
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#GroupBase/maskType"><linktext>maskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:luminosityInvert:get"><apiName>luminosityInvert</apiName><shortdesc>
      控制计算由发光度遮罩设置遮罩的图形元素的 RGB 颜色值的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      控制计算由发光度遮罩设置遮罩的图形元素的 RGB 颜色值的属性。如果为 true，则遮罩中的相应区域将反转并乘以源内容中像素的 RGB 颜色值。如果为 false，则直接使用源内容中像素的 RGB 颜色值。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:maskType:get"><apiName>maskType</apiName><shortdesc>
      遮罩类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="propertyChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>MaskType.CLIP 
           </apiDefaultValue></apiValueDef><apiDesc>
      <p>遮罩类型。可能的值为 <codeph>MaskType.CLIP</codeph>、<codeph>MaskType.ALPHA</codeph> 或 <codeph>MaskType.LUMINOSITY</codeph>。</p> 
           <p><b>剪辑遮罩</b></p>
     
      <p>遮罩处于剪辑模式下时，会将剪辑遮罩减少至 1 位。这意味着遮罩将不会影响源内容中像素的不透明度；它要么保留值不进行修改（如果遮罩中的相应像素具有非零 Alpha 值），要么使其完全透明（如果遮罩像素值为零 Alpha 值）。</p>
     
      <p><b>Alpha 遮罩</b></p>
     
      <p>在 Alpha 模式下，会将源内容中的每个像素的不透明度与遮罩的相应区域的不透明度相乘。即，对于由不透明度为 0.5 的区域遮罩的、源内容中不透明度为 1 的像素，其结果不透明度将为 0.5。对于由不透明度为 0.5 的区域遮罩的、不透明度为 0.8 的源像素，其结果不透明度为 0.4。</p>
     
      <p><b>发光度遮罩</b></p>
     
      <p>发光度遮罩有时称为“柔化遮罩”，除以下方面外其作用极其类似于 Alpha 遮罩：源内容中像素的不透明度和 RGB 颜色值与遮罩中相应区域的不透明度和 RGB 颜色值相乘。</p>
     
      <p>发光度遮罩不是 Flash 的特有功能，但在诸如 Adobe Illustrator 和 Adobe Photoshop 等 Adobe Creative Suite 工具中通用。为了实现 Flash 呈示内容中发光度遮罩的视觉效果，指定发光度遮罩的图形元素实际上会实例化模仿发光度遮罩在 Adobe Creative Suite 工具中呈示时其可视外观的着色器滤镜。</p>
     
      <p>由发光度遮罩设置遮罩的对象可以设置用于控制遮罩 RGB 颜色值和剪辑的属性。请参阅 luminosityInvert 和 luminosityClip 属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.core.xml#MaskType"><linktext>spark.core.MaskType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mask:get"><apiName>mask</apiName><shortdesc>
      设置遮罩。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      设置遮罩。将遮罩添加到显示列表中。遮罩不得位于显示列表或元素数组中。  
           </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/mask"><linktext>flash.display.DisplayObject.mask</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:mouseEnabledWhereTransparent:get"><apiName>mouseEnabledWhereTransparent</apiName><shortdesc>
      为 true 时，此属性确保 Group 的整个边界响应鼠标事件（如 click、roll over 等）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      为 <codeph>true</codeph> 时，此属性确保 Group 的整个边界响应鼠标事件（如 click、roll over 等）。此属性仅在将 mouse、touch 或 flash player gesture 事件添加到此实例时生效。此外，假设对 addEventListener()/removeEventListener() 的调用是必需的。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:numElements:get"><apiName>numElements</apiName><shortdesc conref="mx.core.IVisualElementContainer#numElements">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.IVisualElementContainer#numElements">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:overlay:get"><apiName>overlay</apiName><shortdesc>
      此 Group 的叠加平面。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>spark.components.supportClasses:DisplayLayer</apiValueClassifier></apiValueDef><apiDesc>
      此 Group 的叠加平面。叠加平面上的所有对象都在 Group 元素的顶部呈示。
           <p><b>注意：</b>请不要保留此对象，因为此 Group 会根据需要破坏和创建该对象。</p>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:GroupBase:resizeMode:get"><apiName>resizeMode</apiName><shortdesc>
      此容器的 ResizeMode。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      此容器的 ResizeMode。如果将调整大小模式设置为 <codeph>ResizeMode.NO_SCALE</codeph>，则将使用新的宽度和高度布置子代来完成调整大小。如果将调整大小模式设置为 <codeph>ResizeMode.SCALE</codeph>，则所有子代将保持未缩放的宽度和高度，且将进行缩放以更改大小。
     
     <p>默认值为对应于“noScale”的 <codeph>ResizeMode.NO_SCALE</codeph>。</p>
     
     </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#ResizeMode"><linktext>spark.components.ResizeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:GroupBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="spark.core.IViewport#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="spark.core.IViewport#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
  SkinnableComponent 类定义可设置外观的组件的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="method" name="getChildIndex"/><Exclude kind="method" name="getChildAt"/><Exclude kind="property" name="numChildren"/><Exclude kind="method" name="swapChildrenAt"/><Exclude kind="method" name="swapChildren"/><Exclude kind="method" name="setChildIndex"/><Exclude kind="method" name="removeChildAt"/><Exclude kind="method" name="removeChild"/><Exclude kind="method" name="addChildAt"/><Exclude kind="method" name="addChild"/><Exclude kind="style" name="themeColor"/><styles><style name="skinClass" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  用于此组件的 skin 类的名称。该 skin 必须是扩展 UIComponent 的类。 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style name="errorSkin" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" type="Class">
<description>
  发生验证错误时，用于此组件的外观类的名称。 
  
  </description>
<default>spark.skins.spark.ErrorSkin
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="spark.components.supportClasses:SkinnableComponent" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:chromeColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  SkinnableComponent 类定义可设置外观的组件的基类。SkinnableComponent 类所使用的外观通常是 Skin 类的子类。
 
  <p>通过设置 component 类的 <codeph>skinClass</codeph> 样式属性，将 skin 类与 component 类相关联。可以在 CSS 中设置 <codeph>skinClass</codeph> 属性，如以下示例所示：</p>
 
  <pre>MyComponent
  {
    skinClass: ClassReference("my.skins.MyComponentSkin")
  }</pre>
 
  <p>以下示例在 MXML 中设置 <codeph>skinClass</codeph> 属性：</p>
 
  <pre>
  &lt;MyComponent skinClass="my.skins.MyComponentSkin"/></pre>
 
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#Skin"><linktext>spark.components.supportClasses.Skin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SkinnableComponent:SkinnableComponent"><apiName>SkinnableComponent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:attachSkin"><apiName>attachSkin</apiName><shortdesc>
      为该组件创建外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      为该组件创建外观。您无需直接调用此方法。Flex 在调用 <codeph>createChildren()</codeph> 或 <codeph>UIComponent.commitProperties()</codeph> 方法时自动调用此方法。通常，SkinnableComponent 的子类不覆盖此方法。
     
      <p>此方法实例化组件的外观，将外观添加为组件的子项，并解析外观的所有部件关联</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:clearSkinParts"><apiName>clearSkinParts</apiName><shortdesc>
      清除对外观部件的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      清除对外观部件的引用。您无需直接调用此方法。Flex 在调用 <codeph>detachSkin()</codeph> 方法时自动调用此方法。
     
      <p>通常，SkinnableComponent 的子类不覆盖此方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:createDynamicPartInstance"><apiName>createDynamicPartInstance</apiName><shortdesc>
      创建动态外观部件的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>部件的实例，或者 null（如果它无法创建部件）。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>部件的名称。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建动态外观部件的实例。动态外观部件应该始终由此方法进行实例化，而不是通过对 factory 调用 <codeph>newInstance()</codeph> 方法直接进行实例化。此方法创建部件，但不会将其添加到显示列表。组件必须调用 <codeph>Group.addElement()</codeph> 方法或相应方法才可将外观部件添加到显示列表中。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:detachSkin"><apiName>detachSkin</apiName><shortdesc>
      破坏和删除此组件的外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      破坏和删除此组件的外观。您无需直接调用此方法。在运行时修改某个外观时，Flex 自动调用此方法。此方法删除该外观并清除所有部件关联。
     
      <p>通常，SkinnableComponent 的子类不覆盖此方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:findSkinParts"><apiName>findSkinParts</apiName><shortdesc>
      在 skin 类中找到外观部件并将它们指定给组件的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在 skin 类中找到外观部件并将它们指定给组件的属性。您无需直接调用此方法。Flex 在调用 <codeph>attachSkin()</codeph> 方法时自动调用此方法。通常，SkinnableComponent 的子类不覆盖此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getCurrentSkinState"><apiName>getCurrentSkinState</apiName><shortdesc>
      返回要应用到外观的状态的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>指定要应用到外观的状态的名称的字符串。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      返回要应用到外观的状态的名称。例如，一个 Button 组件可能会返回 String“up”、“down”、“over”或“disabled”以指定该状态。
     
      <p>SkinnableComponent 的子类必须覆盖此方法才可返回值。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:getDynamicPartAt"><apiName>getDynamicPartAt</apiName><shortdesc>
      返回动态部件的特定实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>部件的实例，或者 null（如果部件不存在）。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>动态部件的名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>动态部件的索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回动态部件的特定实例。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:invalidateSkinState"><apiName>invalidateSkinState</apiName><shortdesc>
      标记组件，以在稍后的屏幕更新过程中设置外观的新状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      标记组件，以在稍后的屏幕更新过程中设置外观的新状态。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:numDynamicParts"><apiName>numDynamicParts</apiName><shortdesc>
      返回动态部件的实例数目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>动态部件的实例数目。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>动态部件的名称。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回动态部件的实例数目。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partAdded"><apiName>partAdded</apiName><shortdesc>
      添加外观部件时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>部件的名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>部件实例。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      添加外观部件时调用。您无需直接调用此方法。对于静态部件，Flex 会在调用 <codeph>attachSkin()</codeph> 方法时自动调用此方法。对于动态部件，Flex 会在调用 <codeph>createDynamicPartInstance()</codeph> 方法时自动调用此方法。 
     
      <p>覆盖此函数以将行为附加到该部件。如果希望覆盖从某个基类继承的外观部件上的行为，请不要调用 <codeph>super.partAdded()</codeph> 方法。否则，应始终调用 <codeph>super.partAdded()</codeph> 方法。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:partRemoved"><apiName>partRemoved</apiName><shortdesc>
      正删除外观部件的实例时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>部件的名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>部件实例。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      正删除外观部件的实例时调用。您无需直接调用此方法。对于静态部件，Flex 会在调用 <codeph>detachSkin()</codeph> 方法时自动调用此方法。对于动态部件，Flex 会在调用 <codeph>removeDynamicPartInstance()</codeph> 方法时自动调用此方法。 
     
      <p>覆盖此函数以从该部件删除行为。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableComponent:protected:removeDynamicPartInstance"><apiName>removeDynamicPartInstance</apiName><shortdesc>
      删除动态部件的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>partName</apiItemName><apiType value="String"/><apiDesc>部件的名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>instance</apiItemName><apiType value="Object"/><apiDesc>部件实例。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      删除动态部件的实例。必须在删除动态部件之前调用此方法。此方法不会将部件从显示列表中删除。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SkinnableComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail><apiInheritDoc/></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      匹配 CSS 伪选择器时要使用的状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      匹配 CSS 伪选择器时要使用的状态。此覆盖会返回当前外观状态而不是组件状态。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:skin:get"><apiName>skin</apiName><shortdesc>
      此组件实例的 skin 类的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="skinChanged"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.core:UIComponent"/></apiValueDef><apiDesc>
      此组件实例的 skin 类的实例。这是 Flex 调用 <codeph>attachSkin()</codeph> 方法时自动设置的只读属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableComponent:suggestedFocusSkinExclusions:get"><apiName>suggestedFocusSkinExclusions</apiName><shortdesc>
      列出捕获的位图中不包括的用于显示焦点的外观部件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      列出捕获的位图中不包括的用于显示焦点的外观部件。仅当将外观的 <codeph>focusSkinExclusions</codeph> 属性设置为 <codeph>null</codeph> 时，才能使用此列表。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TextBase"><apiName>TextBase</apiName><shortdesc>
  诸如 Label 和 RichText 等 Spark 文本控件（使用默认格式的 CSS 样式显示文本）的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style format="Color" inherit="no" name="backgroundColor" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="uint">
<description>
  此组件的整个边界矩形的背景色。如果此样式为 <codeph>undefined</codeph>，则不绘制任何背景。否则，此 RGB 颜色是使用由 <codeph>backgroundAlpha</codeph> 样式确定的 Alpha 级别绘制的。
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="spark.components.supportClasses:TextBase" playerVersion="Flash10" type="Number">
<description>
  由 <codeph>backgroundColor</codeph> 样式定义的颜色的 Alpha 级别。有效值范围是 0.0 到 1.0。
 
  </description>
<default>1.0
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.core:IDisplayText</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  诸如 Label 和 RichText 等 Spark 文本控件（使用默认格式的 CSS 样式显示文本）的基类。
 
  <p>除了添加 <codeph>text</codeph> 属性之外，此类还添加 <codeph>maxDisplayedLines</codeph> 和 <codeph>isTruncated</codeph> 属性以支持截断。</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:TextBase:TextBase"><apiName>TextBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:TextBase:isTruncated:get"><apiName>isTruncated</apiName><shortdesc>
	  报告是否已截断文本的只读属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  报告是否已截断文本的只读属性。
	 
	  <p>截断文本意味着使用截断指示符（如 "..."）替换超额文本。截断指示符与区域设置相关；它是由 "core" 资源包中的 "truncationIndicator" 资源指定的。</p>
	 
      <p>如果 <codeph>maxDisplayedLines</codeph> 为 0，则不会发生截断。相反，如果文本不在组件的界限内，则将只是剪辑文本。</p>
     
      <p>如果 <codeph>maxDisplayedLines</codeph> 为正整数，则会根据需要截断文本以将行数减少至此整数。</p>
     
      <p>如果 <codeph>maxDisplayedLines</codeph> 为 -1，则会截断该文本以显示将完全放在组件的高度内的行。</p>
     
      <p>仅当 <codeph>lineBreak</codeph> 样式为 <codeph>"toFit"</codeph> 时，才执行截断；如果 <codeph>lineBreak</codeph> 为 <codeph>"explicit"</codeph>，则会忽略此属性的值。</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:maxDisplayedLines:get"><apiName>maxDisplayedLines</apiName><shortdesc>
      确定是否截断文本以及在何处截断文本的整数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      确定是否截断文本以及在何处截断文本的整数。
	 
	  <p>截断文本意味着使用截断指示符（如 "..."）替换超额文本。截断指示符与区域设置相关；它是由 "core" 资源包中的 "truncationIndicator" 资源指定的。</p>
     
      <p>如果值为 0，则不会发生截断。相反，如果文本不在组件的界限内，则将只是剪辑文本。</p>
     
      <p>如果值为正整数，则会根据需要截断文本以将行数减少至此整数。</p>
     
      <p>如果值为 -1，则会截断该文本以显示将完全放在组件的高度内的行。</p>
     
      <p>仅当 <codeph>lineBreak</codeph> 样式为 <codeph>"toFit"</codeph> 时，才执行截断；如果 <codeph>lineBreak</codeph> 为 <codeph>"explicit"</codeph>，则会忽略此属性的值。</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:showTruncationTip:get"><apiName>showTruncationTip</apiName><shortdesc>
	  一个控制在截断文本时组件是否应显示工具提示的属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
	  一个控制在截断文本时组件是否应显示工具提示的属性。
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:TextBase:text:get"><apiName>text</apiName><shortdesc>
      此文本组件所显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此文本组件所显示的文本。
	 
      <p>此文本的格式是由 CSS 样式控制的。支持的样式取决于子类。</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ScrollBarBase"><apiName>ScrollBarBase</apiName><shortdesc>
  ScrollBarBase 类可帮助在因数据太多而不能在显示区域完全显示时定位显示的数据部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusBlendMode"/><styles><style inherit="no" name="smoothScrolling" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
 此样式确定分页和步进时滚动条是否将平滑地设置动画。如果为 false，则分页和步进操作将直接跳到已分页/步进的位置。如果为 true，则滚动条及它正在滚动的任何内容将设置动画到该位置。
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Number">
<description>
  用户在轨道上按住鼠标时，page 事件之间相隔的毫秒数。
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Number">
<description>
  在第一个 page 事件之后直到后续的 page 事件发生之间相隔的毫秒数。
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  如果为 true（默认值），则在使用鼠标拖动滚动条滑块时立即更新滚动条的值。如果为 false，则仅在释放鼠标按钮时更新滚动条的值。
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="autoThumbVisibility" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  如果为 true（默认值），则无论何时更新滑块的大小，都将重置滑块的可见性。<codeph>updateSkinDisplayList()</codeph> 在 <codeph>HScrollBar</codeph> 和 <codeph>VScrollBar</codeph> 中的替换项使小于轨道的滑块可见，除非此样式为 false。将此样式设置为 false 可以直接控制滑块的可见性。  
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="fixedThumbSize" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" type="Boolean">
<description>
  如果为 true，则沿着滚动条的滑块的大小将为其首选大小。
  
  </description>
<default>false
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" theme="spark" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:symbolColor">
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="inactive" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10">
<description>
  不活动状态。这是没有内容要滚动的状态，这意味着 <codeph>maximum</codeph> &lt;= <codeph>minimum</codeph>。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="decrementButton" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      定义某个按钮的可选外观部件，该按钮在按下时会向上步进滚动条。这等同于对 <codeph>value</codeph> 属性减小步长。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines a button 
      that, when pressed, steps the scrollbar up.</shortdesc></SkinPart><SkinPart name="incrementButton" owner="spark.components.supportClasses:ScrollBarBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      定义某个按钮的可选外观部件，该按钮在按下时会向下步进滚动条。这等同于对 <codeph>value</codeph> 属性增大步长。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      An optional skin part that defines a button 
      that, when pressed, steps the scrollbar down.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:ScrollBarBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:ScrollBarBase
    <strong>Properties</strong>
    pageSize="20"
    snapInterval="1"
    viewport="null"
     <strong>Styles</strong>
    autoThumbVisibility="true"
    fixedThumbSize="false"
    repeatDelay="500"
    repeatInterval="35"
    smoothScrolling="true"
    symbolColor="0x000000"
  /&gt;
  </pre> 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ScrollBarBase 类可帮助在因数据太多而不能在显示区域完全显示时定位显示的数据部分。ScrollBarBase 类显示一对滚动条和一个视域。视域是实现 IViewport 的 UIComponent，如 Group。
  
  <p>此控件扩展 TrackBase 类，且是 HScrollBar 和 VScrollBar 控件的基类。</p> 
 
  <p>滚动条由一个轨道、一个可变大小滚动滑块和两个可选箭头按钮组成。ScrollBarBase 类使用四个参数计算其显示状态：</p>
   <ul>
    <li><codeph>minimum</codeph>：最小范围值。</li>
    <li><codeph>maximum</codeph>：最大范围值。</li>
    <li><codeph>value</codeph>：当前位置，必须介于最小范围值和最大范围值之间。</li>
    <li>视域大小：表示范围内一次可显示的项目数。该项目数必须小于或等于此范围，其中此范围指介于最小范围值和最大范围值之间的一组值。</li>
  </ul>
    </apiDesc></apiClassifierDetail><related-links><link href="spark.core.xml#IViewport"><linktext>spark.core.IViewport</linktext></link><link href="spark.skins.spark.xml#ScrollerSkin"><linktext>spark.skins.spark.ScrollerSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarDownButtonSkin"><linktext>spark.skins.spark.ScrollBarDownButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarLeftButtonSkin"><linktext>spark.skins.spark.ScrollBarLeftButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarRightButtonSkin"><linktext>spark.skins.spark.ScrollBarRightButtonSkin</linktext></link><link href="spark.skins.spark.xml#ScrollBarUpButtonSkin"><linktext>spark.skins.spark.ScrollBarUpButtonSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ScrollBarBase:ScrollBarBase"><apiName>ScrollBarBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:animatePaging"><apiName>animatePaging</apiName><shortdesc>
     设置操作的动画以移动到 newValue。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>正在分页到的最后值。
     </apiDesc></apiParam><apiParam><apiItemName>pageSize</apiItemName><apiType value="Number"/><apiDesc>请求的水平或垂直移动的数量。此值用于使用 <codeph>repeatInterval</codeph> 样式计算移动到新值所花费的总时间。<codeph>pageSize</codeph> 通常通过将 Scroller 包含到查看位于逻辑内容边界处的内容所需的值，以动态方式进行设置。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     设置操作的动画以移动到 <codeph>newValue</codeph>。<codeph>pageSize</codeph> 参数用于计算达到该值所花费的时间，这样设置分页操作的动画所花费的时间大致与非动画版本相同；这两个操作都应在大约相同的时间在相同的位置结束。
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:animateStepping"><apiName>animateStepping</apiName><shortdesc>
     设置操作的动画以步进到 newValue。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newValue</apiItemName><apiType value="Number"/><apiDesc>正在步进到的最后值。
     </apiDesc></apiParam><apiParam><apiItemName>stepSize</apiItemName><apiType value="Number"/><apiDesc>请求的步进的数量。此值用于使用 <codeph>repeatInterval</codeph> 样式计算步进到新值所花费的总时间。<codeph>stepSize</codeph> 通常通过将 Scroller 包含到查看位于逻辑内容边界处的内容所需的值，以动态方式进行设置。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     设置操作的动画以步进到 <codeph>newValue</codeph>。<codeph>stepSize</codeph> 参数用于计算达到该值所花费的时间，这样设置步进操作的动画所花费的时间大致与非动画版本相同；这两个操作都应在大约相同的时间在相同的位置结束。
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:button_buttonDownHandler"><apiName>button_buttonDownHandler</apiName><shortdesc>
      处理滚动条的增量或减量按钮上的单击。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>事件对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理滚动条的增量或减量按钮上的单击。这应该导致生成一个步进操作，按下时会重复该操作。在重复操作开始之前的延迟和重复事件之间的延迟由基础 Button 对象的 <codeph>repeatDelay</codeph> 和 <codeph>repeatInterval</codeph> 样式确定。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:protected:button_buttonUpHandler"><apiName>button_buttonUpHandler</apiName><shortdesc>
      处理滚动条的增量或减量按钮的释放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>事件对象。
           </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理滚动条的增量或减量按钮的释放。这会结束由按钮上的原始 buttonDown 事件启动的步进操作。
           </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:ScrollBarBase:changeValueByPage"><apiName>changeValueByPage</apiName><shortdesc>
      从 value 增加或减去 pageSize。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>increase</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>分页操作是增加 (<codeph>true</codeph>) 还是减少 (<codeph>false</codeph>) <codeph>value</codeph>。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从 <codeph>value</codeph> 增加或减去 <codeph>pageSize</codeph>。每次增加后，新的 <codeph>value</codeph> 是大于当前 <codeph>value</codeph> 的 <codeph>pageSize</codeph> 的最接近倍数。每次减去后，新的 <codeph>value</codeph> 是小于当前 value 的 <codeph>pageSize</codeph> 的最接近倍数。<codeph>value</codeph> 的最小值是 <codeph>pageSize</codeph>。 
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ScrollBarBase:pageSize:get"><apiName>pageSize</apiName><shortdesc>
      调用 changeValueByPage() 方法时 value 属性值中的更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>20
      
      </apiDefaultValue></apiValueDef><apiDesc>
      调用 <codeph>changeValueByPage()</codeph> 方法时 <codeph>value</codeph> 属性值中的更改。
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      释放鼠标按钮时滚动条将具有的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      释放鼠标按钮时滚动条将具有的值。 
     
      <p>如果 <codeph>liveDragging</codeph> 样式为 false，则仅在释放鼠标按钮时设置滚动条的值。正在拖动滑块时，不会更新该值。</p>
     
      <p>即使 <codeph>liveDragging</codeph> 为 false，也会在滚动条滑块移动时更新此属性。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:viewport:get"><apiName>viewport</apiName><shortdesc>
      由此滚动条控制的视域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.core:IViewport</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      由此滚动条控制的视域。如果指定视域，则对其实际大小、内容大小和滚动位置的更改会导致运行相对应的 ScrollBarBase 方法：
      <ul>
      <li><codeph>viewportResizeHandler()</codeph></li>
      <li><codeph>contentWidthChangeHandler()</codeph></li>
      <li><codeph>contentHeightChangeHandler()</codeph></li>
      <li><codeph>viewportVerticalScrollPositionChangeHandler()</codeph></li>
      <li><codeph>viewportHorizontalScrollPositionChangeHandler()</codeph></li>
      </ul>
     
      <p>VScrollBar 和 HScrollBar 类覆盖这些方法以保持其 <codeph>pageSize</codeph>、<codeph>maximum</codeph> 和 <codeph>value</codeph> 属性与该视域同步。同样，它们覆盖其 <codeph>changeValueByPage()</codeph> 和 <codeph>changeValueByStep()</codeph> 方法以使用视域的 <codeph>scrollPositionDelta</codeph> 方法来计算分页和步进偏移量。</p>
        
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#VScrollBar"><linktext>spark.components.VScrollBar</linktext></link><link href="spark.components.xml#HScrollBar"><linktext>spark.components.HScrollBar</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ScrollBarBase:snapInterval:set"><apiName>snapInterval</apiName><shortdesc>
      
      snapInterval 属性控制 value 属性的有效值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      
      snapInterval 属性控制 <codeph>value</codeph> 属性的有效值。如果为非零，则有效值为 <codeph>minimum</codeph> 与此属性的整数倍数之和，且小于或等于 <codeph>maximum</codeph>。
     
      <p>例如，如果 <codeph>minimum</codeph> 为 10，<codeph>maximum</codeph> 为 20，而此属性为 3，则可能的有效值为 10、13、16、19 和 20。</p>
      
      <p>如果此属性的值为零，则仅会将有效值约束到介于 minimum 和 maximum 之间（包括两者）。</p>
     
      <p>此属性还约束 <codeph>stepSize</codeph> 属性（如果设置）的有效值。如果未显式设置此属性，但设置了 <codeph>stepSize</codeph>，则 <codeph>snapInterval</codeph> 将默认为 <codeph>stepSize</codeph>。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
  ButtonBase 类是所有 Spark 按钮组件的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="label"/><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  按钮的禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="down" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  按钮的按下状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="over" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  按钮的经过状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="up" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10">
<description>
  按钮的弹起状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style format="Time" inherit="yes" name="touchDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" type="Number">
<description>
  处于 touch 交互模式时，从发生用户交互到以可见的 down 状态显示组件，需要等待的毫秒数。
 
  <p>出现此延迟的原因在于，在用户启动滚动动作时，不要像触摸屏幕那样发生组件闪烁。通过合理的延迟，可以确保用户在按下组件后能收到反馈，且反馈不会太快以至于在滚动动作操作进行时显示反馈。</p>
  
  <p>如果应用了手机主题，则此样式的默认值为：100ms（对于 Scroller 内部组件）和 0ms（对于 Scroller 外部组件）。</p>
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  用户在按钮上按住鼠标时，<codeph>buttonDown</codeph> 事件之间相隔的毫秒数。
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  在第一个 <codeph>buttonDown</codeph> 事件之后，以及相隔每个 <codeph>repeatInterval</codeph> 重复一次 <codeph>buttonDown</codeph> 事件之前，需要等待的毫秒数。
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="String">
<description>
  与标签相关的图标的方向。有效的 MXML 值是 <codeph>right</codeph>、<codeph>left</codeph>、<codeph>bottom</codeph> 和 <codeph>top</codeph>。
 
  <p>在 ActionScript 中，您可以使用下列常量来设置此属性：<codeph>IconPlacement.RIGHT</codeph>、<codeph>IconPlacement.LEFT</codeph>、<codeph>IconPlacement.BOTTOM</codeph> 和 <codeph>IconPlacement.TOP</codeph>。</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="icon" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  用作默认图标的类或实例。可以呈示基于各种图形源的图标，其中包括：  
  <ul>
   <li>Bitmap 或 BitmapData 实例。</li>
   <li>表示 DisplayObject 子类的类。BitmapFill 会将该类实例化并为其创建位图呈示。</li>
   <li>DisplayObject 的实例。BitmapFill 将其复制到 Bitmap 中以供填充使用。</li>
   <li>外部图像文件的名称。 </li>
  </ul>
 
  </description>
<default>null 
 
  </default>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.primitives.BitmapImage.source.xml"><linktext>spark.primitives.BitmapImage.source</linktext></link></related-links></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  此组件的焦点外框的 Alpha。
 
  </description>
<default>0.5
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的角的半径。
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#ButtonBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="iconDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10.1" required="false" var_type="spark.primitives:BitmapImage">
<description>
      定义按钮的可选图标的外观部件。 
      
      </description>

<playerversion>AIR 2.0
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4.5
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines an optional icon for the button.</shortdesc></SkinPart><SkinPart name="labelDisplay" owner="spark.components.supportClasses:ButtonBase" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      定义按钮的标签的外观部件。 
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the label of the button.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBase
    <strong>Properties</strong>
    autoRepeat="false"
    content="null"
    label=""
    stickyHighlighting="false"
  
    <strong>Events</strong>
    buttonDown="<i>No default</i>"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    cornerRadius="4"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusAlpha="0.5"
    focusColor="0x70B2EE"
    fontFamily="Arial"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    locale="en"
    renderingMode="CFF"
    repeatDelay="500"
    repeatInterval="35"
    textAlign="START"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
    wordSpacing="100%"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBase 类是所有 Spark 按钮组件的基类。Button 和 ToggleButtonBase 类是 ButtonBase 的子类。ToggleButton。CheckBox 和 RadioButton 类是 ToggleButtonBase 的子类。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Button"><linktext>spark.components.Button</linktext></link><link href="spark.components.supportClasses.xml#ToggleButtonBase"><linktext>spark.components.supportClasses.ToggleButtonBase</linktext></link><link href="spark.components.xml#ToggleButton"><linktext>spark.components.ToggleButton</linktext></link><link href="spark.components.xml#CheckBox"><linktext>spark.components.CheckBox</linktext></link><link href="spark.components.xml#RadioButton"><linktext>spark.components.RadioButton</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:ButtonBase_mx.events.FlexEvent.BUTTON_DOWN_buttonDown"><apiName>buttonDown</apiName><shortdesc>
  当用户按下 ButtonBase 控件时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BUTTON_DOWN</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户按下 ButtonBase 控件时分派。如果 <codeph>autoRepeat</codeph> 属性为 <codeph>true</codeph>，则只要按钮处于按下状态，就将重复分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ButtonBase:ButtonBase"><apiName>ButtonBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ButtonBase:protected:buttonReleased"><apiName>buttonReleased</apiName><shortdesc>
      当在用户单击按钮之后处理 MouseEvent.MOUSE_UP 事件时，将调用此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      当在用户单击按钮之后处理 <codeph>MouseEvent.MOUSE_UP</codeph> 事件时，将调用此方法。仅当以按钮为目标，并且 <codeph>mouseCaptured</codeph> 为 <codeph>true</codeph> 时，才会调用此方法。该方法允许子类恰好在单击按钮时更新按钮属性，以免按钮处于鼠标弹起和单击事件之间的过渡状态。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      在子类中覆盖此方法以处理 click 事件，而不是添加单独的处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>与事件关联的 Event 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在子类中覆盖此方法以处理 <codeph>click</codeph> 事件，而不是添加单独的处理函数。禁用按钮后不会调用此方法。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ButtonBase:protected:mouseEventHandler"><apiName>mouseEventHandler</apiName><shortdesc>
      此方法处理鼠标事件，在适当的时候调用 clickHandler 方法，并更新 hovered 和 mouseCaptured 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>与事件关联的 Event 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      此方法处理鼠标事件，在适当的时候调用 <codeph>clickHandler</codeph> 方法，并更新 <codeph>hovered</codeph> 和 <codeph>mouseCaptured</codeph> 属性。
     
      <p>调用此方法以处理 <codeph>MouseEvent.ROLL_OVER</codeph>、<codeph>MouseEvent.ROLL_OUT</codeph>、<codeph>MouseEvent.MOUSE_DOWN</codeph>、<codeph>MouseEvent.MOUSE_UP</codeph> 和 <codeph>MouseEvent.CLICK</codeph> 事件。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ButtonBase:autoRepeat:get"><apiName>autoRepeat</apiName><shortdesc>
      指定在用户按住鼠标按键时是否重复分派 buttonDown 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指定在用户按住鼠标按键时是否重复分派 <codeph>buttonDown</codeph> 事件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:content:get"><apiName>content</apiName><shortdesc>
      使用 content 属性可以传递任意对象以在按钮的自定义外观中使用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="contentChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      使用 <codeph>content</codeph> 属性可以传递任意对象以在按钮的自定义外观中使用。当外观定义可选部件 <codeph>labelDisplay</codeph> 时，会将 <codeph>content</codeph> 的字符串表示形式向下推至该部件的 <codeph>text</codeph> 属性。默认外观使用此机制将 <codeph>content</codeph> 呈示为按钮标签。  
     
      <p><codeph>label</codeph> 属性是此属性的 <codeph>String</codeph> 类型外观。此属性为可绑定属性，且它与 <codeph>label</codeph> 属性共享“contentChange”事件。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/label"><linktext>label</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:hovered:get"><apiName>hovered</apiName><shortdesc>
      指示鼠标指针是否位于按钮上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      指示鼠标指针是否位于按钮上。用于确定外观状态。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:keyboardPressed:get"><apiName>keyboardPressed</apiName><shortdesc>
      指示按钮处于焦点时是否按下键盘键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      指示按钮处于焦点时是否按下键盘键。用于确定外观状态。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:protected:mouseCaptured:get"><apiName>mouseCaptured</apiName><shortdesc>
      指示第一次分派 MouseEvent.MOUSE_DOWN 时，是否按下鼠标以及鼠标指针是否在按钮上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      指示第一次分派 <codeph>MouseEvent.MOUSE_DOWN</codeph> 时，是否按下鼠标以及鼠标指针是否在按钮上。用于确定外观状态。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:stickyHighlighting:get"><apiName>stickyHighlighting</apiName><shortdesc>
      如果为 false，则按钮会在用户按下它时显示其按下时的外观，但在用户将鼠标拖离它时将改为显示整体外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>false</codeph>，则按钮会在用户按下它时显示其按下时的外观，但在用户将鼠标拖离它时将改为显示整体外观。如果为 <codeph>true</codeph>，则按钮会在用户按下它时显示其按下时的外观，并在用户将鼠标拖离时继续显示此外观。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBase:label:set"><apiName>label</apiName><shortdesc>
      要在 ButtonBase 控件上显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="contentChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue></apiValueDef><apiDesc>
      要在 ButtonBase 控件上显示的文本。
     
      <p>如果标签比 ButtonBase 控件宽，则使用省略号 (...) 截断此标签并终止。当用户将鼠标移到控件上时，将完整标签显示为工具提示。如果您还使用 <codeph>tooltip</codeph> 属性设置了工具提示，则显示工具提示而不是标签文本。</p>
     
      <p>这是默认的 ButtonBase 属性。</p>
     
      <p>此属性是 <codeph>content</codeph> 属性的 <codeph>String</codeph> 类型外观。此属性为可绑定属性，且它与 <codeph>content</codeph> 属性共享分派“contentChange”事件。</p> 
      
      </apiDesc></apiValueDetail><related-links><link href="spark.components.supportClasses.xml#ButtonBase/content"><linktext>content</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:TrackBase"><apiName>TrackBase</apiName><shortdesc>
  TrackBase 类是具有一个轨道和一个或多个滑块按钮的组件的一个基类，如 Slider 和 ScrollBar。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style format="Time" inherit="no" name="slideDuration" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" type="Number">
<description>
  在轨道上单击以移动滑块时，滑动动画持续的时间（以毫秒为单位）。此样式用于 Slider 和 ScrollBar。对于 Slider，在轨道上的任何单击将导致生成使用此样式的一个动画，同时滑块将移到单击的位置。对于 ScrollBar，仅当按住 Shift 键并单击轨道时才使用此样式，这会导致滑块移到单击的位置。未按下 Shift 键时单击 ScrollBar 轨道将导致出现分页行为。按住 Shift 键并单击时，必须也对 ScrollBar 设置 <codeph>smoothScrolling</codeph> 样式才可以实现动画行为。
  
 <p>此持续时间用于涵盖轨道的整个距离的动画；距离较小时，持续时间将按比例缩短。</p>
 
  </description>
<default>300
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><skinStates><SkinState name="disabled" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  禁用状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10">
<description>
  正常状态
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><skinParts><SkinPart name="thumb" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      定义可以沿着轨道拖动以增大或减小 <codeph>value</codeph> 属性的按钮的外观部件。对 <codeph>value</codeph> 属性进行更新将自动更新滑块按钮相对于滑块的位置。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a button
      that can be dragged along the track to increase or
      decrease the value property.</shortdesc></SkinPart><SkinPart name="track" owner="spark.components.supportClasses:TrackBase" playerVersion="Flash10" required="false" var_type="spark.components:Button">
<description>
      定义某个按钮的外观部件，该按钮在按下时会将 <codeph>value</codeph> 属性设置为与轨道上的当前按钮位置相对应的值。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a button
      that, when  pressed, sets the value property
      to the value corresponding with the current button position on the track.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:TrackBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:TrackBase
    <strong>Styles</strong>
    slideDuration="300"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"
    thumbDrag="<i>No default</i>"
    thumbPress="<i>No default</i>"
    thumbRelease="<i>No default</i>"
  /&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:Range</apiBaseClassifier></apiClassifierDef><apiDesc>
  TrackBase 类是具有一个轨道和一个或多个滑块按钮的组件的一个基类，如 Slider 和 ScrollBar。它声明两个必需的外观部件：<codeph>thumb</codeph> 和 <codeph>track</codeph>。TrackBase 类还为拖动滑块按钮提供代码，它由 Slider 和 ScrollBar 类共享。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.supportClasses.Slider.xml"><linktext>spark.components.supportClasses.Slider</linktext></link><link href="" invalidHref="spark.components.supportClasses.ScrollBar.xml"><linktext>spark.components.supportClasses.ScrollBar</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_RELEASE_thumbRelease"><apiName>thumbRelease</apiName><shortdesc>
  释放滑块（即用户在 thumbPress 事件后释放鼠标按钮）时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_RELEASE</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  释放滑块（即用户在 <codeph>thumbPress</codeph> 事件后释放鼠标按钮）时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_PRESS_thumbPress"><apiName>thumbPress</apiName><shortdesc>
  按下滑块（即用户在滑块上按下鼠标按钮）时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_PRESS</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  按下滑块（即用户在滑块上按下鼠标按钮）时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_spark.events.TrackBaseEvent.THUMB_DRAG_thumbDrag"><apiName>thumbDrag</apiName><shortdesc>
  按下滑块并使用鼠标移动滑块时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TrackBaseEvent.THUMB_DRAG</apiEventType><adobeApiEventClassifier>spark.events.TrackBaseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  按下滑块并使用鼠标移动滑块时分派。此事件始终发生在 <codeph>thumbPress</codeph> 事件之后。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGE_START_changeStart"><apiName>changeStart</apiName><shortdesc>
  当用户交互开始或动画开始时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGE_START</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户交互开始或动画开始时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_mx.events.FlexEvent.CHANGE_END_changeEnd"><apiName>changeEnd</apiName><shortdesc>
  当用户交互结束或动画结束时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CHANGE_END</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户交互结束或动画结束时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:TrackBase_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  当控件的值由于用户交互操作而发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当控件的值由于用户交互操作而发生更改时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:TrackBase:TrackBase"><apiName>TrackBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:TrackBase:protected:pointToValue"><apiName>pointToValue</apiName><shortdesc>
      将相对于轨道的 x,y 像素位置转换为介于最小值和最大值（包括两者）之间的一个值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>介于最小值和最大值（包括两者）之间的一个值。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>相对于轨道原点的位置的 x 坐标。
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>相对于轨道原点的位置的 y 坐标。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将相对于轨道的 x,y 像素位置转换为介于最小值和最大值（包括两者）之间的一个值。  
     
      <p>TrackBase 子类必须覆盖此方法并执行将它们自己的几何图形考虑在内的转换。例如，一个垂直滑块可能会按如下方式计算值：
      <pre>
      return (y / track.height) (maximum - minimum);
      </pre>
      </p>
     
      <p>默认情况下，此方法返回 <codeph>minimum</codeph>。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:TrackBase:protected:updateSkinDisplayList"><apiName>updateSkinDisplayList</apiName><shortdesc>
      设置外观部件（通常为滑块）的边界，这些外观部件的几何图形不是完全由外观的布局指定的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      设置外观部件（通常为滑块）的边界，这些外观部件的几何图形不是完全由外观的布局指定的。
     
      <p>大多数子类覆盖此方法以基于 <codeph>minimum</codeph>、<codeph>maximum</codeph> 和 <codeph>value</codeph> 属性更新滑块的大小、位置和可见性。 </p>
     
      <p>默认情况下，此方法不执行任何操作。</p> 
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="spark.components.supportClasses:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
      DisplayLayer 类维护按深度排序的 DisplayObject 的有序列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
      DisplayLayer 类维护按深度排序的 DisplayObject 的有序列表。请不要实例化此类，而应使用 <codeph>Group</codeph> 和 <codeph>DataGroup</codeph> 的 <codeph>overlay</codeph> 属性。
     
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#Group/overlay"><linktext>spark.components.Group.overlay</linktext></link><link href="spark.components.xml#DataGroup/overlay"><linktext>spark.components.DataGroup.overlay</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DisplayLayer:DisplayLayer"><apiName>DisplayLayer</apiName><shortdesc>
          构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          构造函数。 
         
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DisplayLayer:addDisplayObject"><apiName>addDisplayObject</apiName><shortdesc>
          将具有指定深度的 DisplayObject 添加到有序列表中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>对象的索引。
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>要添加的对象。
         
          </apiDesc></apiParam><apiParam><apiItemName>depth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>对象的深度。   
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          将具有指定深度的 <codeph>DisplayObject</codeph> 添加到有序列表中。<codeph>displayObject</codeph> 在有序列表中的位置基于其深度。在具有较小或相等 <codeph>depth</codeph> 值的所有对象之后插入此对象。
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectAt"><apiName>getDisplayObjectAt</apiName><shortdesc>
          返回具有指定索引的 DisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>对象。
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>对象的索引。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          返回具有指定索引的 DisplayObject。 
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:getDisplayObjectDepth"><apiName>getDisplayObjectDepth</apiName><shortdesc>
          返回指定 DisplayObject 的深度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>对象的深度。
         
          </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>对象。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          返回指定 DisplayObject 的深度。
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DisplayLayer:removeDisplayObject"><apiName>removeDisplayObject</apiName><shortdesc>
          从排序列表中删除指定的 displayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>已删除的对象。
         
          </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>对象。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          从排序列表中删除指定的 <codeph>displayObject</codeph>。
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DisplayLayer:numDisplayObjects:get"><apiName>numDisplayObjects</apiName><shortdesc>
          DisplayLayer 中的对象数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
          DisplayLayer 中的对象数。 
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SliderBase"><apiName>SliderBase</apiName><shortdesc>
  通过使用 SliderBase 类，用户可以在滑块轨道的端点之间移动滑块来选择值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="style" name="textAlign"/><Exclude kind="style" name="fontWeight"/><Exclude kind="style" name="fontSize"/><Exclude kind="style" name="color"/><styles><style inherit="no" name="liveDragging" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Boolean">
<description>
  如果为 <codeph>true</codeph>，则将在沿着轨道拖动滑块时，而不是在释放滑块按钮时，提交此滑块的值。
  
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#focusColor">
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  此组件的焦点外框的 Alpha。
 
  </description>
<default>0.55
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#SliderBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style></styles><skinParts><SkinPart name="dataTip" owner="spark.components.supportClasses:SliderBase" playerVersion="Flash10" required="false" type="mx.core.IDataRenderer" var_type="mx.core:IFactory">
<description>
      定义显示当前值的已设置格式版本的 dataTip 的外观部件。正在拖动滑块时显示 dataTip。这是动态外观部件且必须为 IFactory 类型。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines a dataTip that displays a formatted version of 
      the current value.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:SliderBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:SliderBase
    <strong>Properties</strong>
    dataTipFormatFunction="20"
    dataTipPrecision="2"
    maximum="10"
    showDataTip="true"
 
    <strong>Styles</strong>
    alignmentBaseline="USE_DOMINANT_BASELINE"
    baselineShift="0.0"
    cffHinting="HORIZONTAL_STEM"
    color="0"
    digitCase="DEFAULT"
    digitWidth="DEFAULT"
    direction="LTR"
    dominantBaseline="AUTO"
    focusAlph="0.55"
    focusColor="0xFFFFFF"
    fontFamily="Arial"
    fontLookup="DEVICE"
    fontSize="12"
    fontStyle="NORMAL"
    fontWeight="NORMAL"
    justificationRule="AUTO"
    justificationStyle="AUTO"
    kerning="AUTO"
    ligatureLevel="COMMON"
    lineHeight="120%"
    lineThrough="false"
    liveDragging="true"
    local="en"
    renderingMode="CFF"
    textAlignLast="START"
    textAlpha="1"
    textDecoration="NONE"
    textJustify="INTER_WORD"
    trackingLeft="0"
    trackingRight="0"
    typographicCase="DEFAULT"
  /&gt;
  </pre> 
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:TrackBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  通过使用 SliderBase 类，用户可以在滑块轨道的端点之间移动滑块来选择值。滑块的当前值由滑块端点（对应于滑块的最小值和最大值）之间滑块的相对位置确定。SliderBase 类是 HSlider 和 VSlider 的基类。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#HSlider"><linktext>spark.components.HSlider</linktext></link><link href="spark.components.xml#VSlider"><linktext>spark.components.VSlider</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:SliderBase:SliderBase"><apiName>SliderBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SliderBase:protected:updateDataTip"><apiName>updateDataTip</apiName><shortdesc>
      用于在数据提示可见时对其定位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>dataTipInstance</apiItemName><apiType value="mx.core:IDataRenderer"/><apiDesc>要更新和定位的 <codeph>dataTip</codeph> 实例
      </apiDesc></apiParam><apiParam><apiItemName>initialPosition</apiItemName><apiType value="flash.geom:Point"/><apiDesc>外观中的 <codeph>dataTip</codeph> 的初始位置
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      用于在数据提示可见时对其定位。子类必须实现此函数。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:SliderBase:dataTipPrecision"><apiName>dataTipPrecision</apiName><shortdesc>
      用于数据提示文本的小数位数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>2</apiData><apiType value="int"/><apiDefaultValue>2
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用于数据提示文本的小数位数。值 0 表示将所有值舍入为整数。如果已定义 <codeph>dataTipFormatFunction</codeph>，则会忽略此值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:showDataTip"><apiName>showDataTip</apiName><shortdesc>
      如果设置为 true，则在用户交互期间将显示包含滑块当前值的数据提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果设置为 <codeph>true</codeph>，则在用户交互期间将显示包含滑块当前值的数据提示。此外，必须在外观中定义 skinPart、<codeph>dataTip</codeph>，才可显示数据提示。 
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:dataTipFormatFunction:get"><apiName>dataTipFormatFunction</apiName><shortdesc>
      格式化数据提示文本的回调函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>undefined   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      格式化数据提示文本的回调函数。此函数使用单个 Number 作为参数并返回格式化的 String。
     
      <p>此函数包含下列签名：</p>
      <pre>
      funcName(value:Number):Object
      </pre>
     
      <p>以下示例采用美元符号作为数据提示文本的前缀，并使用名为“slide”的 SliderBase 控件的 <codeph>dataTipPrecision</codeph> 设置该文本格式： </p>
     
      <pre>
      import mx.formatters.NumberBase;
      function myDataTipFormatter(value:Number):Object { 
          var dataFormatter:NumberBase = new NumberBase(".", ",", ".", ""); 
          return   "$ " + dataFormatter.formatPrecision(String(value), slide.dataTipPrecision); 
      }
      </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:maximum:get"><apiName>maximum</apiName><shortdesc>
      表示 value 的最大可能值的数值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      表示 <codeph>value</codeph> 的最大可能值的数值。如果 <codeph>minimum</codeph> 或 <codeph>value</codeph> 的值大于 <codeph>maximum</codeph>，则将更改它们以反映新的 <codeph>maximum</codeph>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SliderBase:protected:pendingValue:get"><apiName>pendingValue</apiName><shortdesc>
      释放鼠标按键时滑块将具有的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      释放鼠标按键时滑块将具有的值。如果 <codeph>liveDragging</codeph> 样式为 true，则此属性还包含在滑块的动画期间设置的临时值；实际值仅在动画结束时进行设置。
     
      <p>如果 <codeph>liveDragging</codeph> 样式为 false，则仅在释放鼠标按键时设置滑块的值。正在拖动滑块时，不会更新该值。</p>
     
      <p>即使 <codeph>liveDragging</codeph> 为 false，也会在滑块移动时更新此属性。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:Skin"><apiName>Skin</apiName><shortdesc>
  Skin 类为可设置外观的组件所用的所有外观定义基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>spark.skins:IHighlightBitmapCaptureClient</apiBaseInterface><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  Skin 类为可设置外观的组件所用的所有外观定义基类。SkinnableComponent 类定义可设置外观的组件的基类。
 
  <p>通常将 skin 类写入 MXML 中，如以下示例所示：</p>
 
  <pre>  &lt;?xml version="1.0"?>
  &lt;Skin xmlns="http://ns.adobe.com/mxml/2009">
  
  &lt;Metadata>
          &lt;!-- Specify the component that uses this skin class. -->
          [HostComponent("my.component.MyComponent")]
      &lt;/Metadata> 
      
      &lt;states>
          &lt;!-- Specify the states controlled by this skin. -->
      &lt;/states>
          
      &lt;!-- Define skin. -->
  
  &lt;/Skin></pre>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.core.SkinnableComponent.xml"><linktext>mx.core.SkinnableComponent</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:Skin:Skin"><apiName>Skin</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:Skin:beginHighlightBitmapCapture"><apiName>beginHighlightBitmapCapture</apiName><shortdesc>
      在为此外观进行位图捕获之前调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果必须重新绘制组件，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      在为此外观进行位图捕获之前调用。默认实现不包含 <codeph>focusSkinExclusions</codeph> 数组中的项。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:Skin:endHighlightBitmapCapture"><apiName>endHighlightBitmapCapture</apiName><shortdesc>
      在为此外观进行位图捕获之后调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果必须重新绘制组件，则为 <codeph>true</codeph>。否则为 <codeph>false</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      在为此外观进行位图捕获之后调用。默认实现将恢复 <codeph>focusSkinExclusions</codeph> 数组中的项。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:Skin:focusSkinExclusions:get"><apiName>focusSkinExclusions</apiName><shortdesc>
      呈示焦点外框时应排除的项的 ID 列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      呈示焦点外框时应排除的项的 ID 列表。仅应该排除类型为 DisplayObject 或 GraphicElement 的项。将忽略其他类型的项。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownController"><apiName>DropDownController</apiName><shortdesc>
  DropDownController 类为锚点按钮及其相关联的下拉列表处理鼠标、键盘和焦点交互。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  DropDownController 类为锚点按钮及其相关联的下拉列表处理鼠标、键盘和焦点交互。此类由下拉组件（如 DropDownList）用于处理因用户交互而打开和关闭下拉列表的操作。
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#DropDownList"><linktext>spark.components.DropDownList</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:DropDownController:DropDownController"><apiName>DropDownController</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownController:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      关闭下拉列表并分派 DropDownEvent.CLOSE 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc>如果为 <codeph>true</codeph>，请提交选定的数据项目。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      关闭下拉列表并分派 <codeph>DropDownEvent.CLOSE</codeph> 事件。  
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      打开下拉列表并分派 DropdownEvent.OPEN 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      打开下拉列表并分派 <codeph>DropdownEvent.OPEN</codeph> 事件。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processFocusOut"><apiName>processFocusOut</apiName><shortdesc>
      如果下拉列表不再处于焦点，请将其关闭。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc><codeph>FOCUS_OUT</codeph> 事件的事件对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果下拉列表不再处于焦点，请将其关闭。
           </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownController:processKeyDown"><apiName>processKeyDown</apiName><shortdesc>
      处理键盘用户交互。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果已识别并处理 <codeph>keyCode</codeph>，则返回 <codeph>true</codeph>。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>来自 keyboard 事件的事件对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理键盘用户交互。
           </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownController:hitAreaAdditions"><apiName>hitAreaAdditions</apiName><shortdesc>
      要考虑作为下拉列表的点击区域的一部分的显示对象列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Vector$flash.display:DisplayObject"/></apiValueDef><apiDesc>
      要考虑作为下拉列表的点击区域的一部分的显示对象列表。在作为包含项列出的任何组件内进行鼠标单击不会自动关闭下拉列表。
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:closeOnResize:get"><apiName>closeOnResize</apiName><shortdesc>
      如果为 true，则调整系统管理器会关闭下拉列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则调整系统管理器会关闭下拉列表。对于移动应用程序，您可以将此属性设置为 <codeph>false</codeph>，以便在页面方向更改时下拉列表保持打开状态。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:isOpen:get"><apiName>isOpen</apiName><shortdesc>
      如果下拉列表已打开，则包含 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果下拉列表已打开，则包含 <codeph>true</codeph>。   
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:rollOverOpenDelay:get"><apiName>rollOverOpenDelay</apiName><shortdesc>
      指定滑过锚点按钮时打开下拉列表要等待的延迟（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
             
      </apiDefaultValue></apiValueDef><apiDesc>
      指定滑过锚点按钮时打开下拉列表要等待的延迟（以毫秒为单位）。如果设置为 <codeph>NaN</codeph>，则下拉列表会在单击时打开，而不是在滑过时打开。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:openButton:set"><apiName>openButton</apiName><shortdesc>
      对下拉组件的 openButton 外观部件的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:ButtonBase</apiValueClassifier></apiValueDef><apiDesc>
      对下拉组件的 <codeph>openButton</codeph> 外观部件的引用。 
             
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownController:systemManager:set"><apiName>systemManager</apiName><shortdesc>
      对用于鼠标跟踪的 SystemManager 的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.managers:ISystemManager"/></apiValueDef><apiDesc>
      对用于鼠标跟踪的 <codeph>SystemManager</codeph> 的引用。如果未指定，则控制器将使用与 openButton 关联的 systemManager。
             
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
  ButtonBarHorizontalLayout 类是专门为 Spark ButtonBar 外观设计的布局。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.layouts.supportClasses:LayoutBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBarHorizontalLayout 类是专门为 Spark ButtonBar 外观设计的布局。该布局在水平方向上按照从左到右的顺序布置子代。
  
  <p>该布局尝试将所有子代的大小调整为其首选大小。如果有足够的空间，则会将每个子代设置为其首选大小，并加上在子代之间平均分配的任何额外空间。</p>
 
  <p>如果存在的空间不足以将所有子代调整为其首选大小，则将为小于平均宽度的子代分配其首选大小，剩余的元素将平均减小。</p>
 
  <p>将所有子代设置为父代的高度。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#ButtonBarSkin"><linktext>spark.skins.spark.ButtonBarSkin</linktext></link></related-links><apiConstructor id="spark.components.supportClasses:ButtonBarHorizontalLayout:ButtonBarHorizontalLayout"><apiName>ButtonBarHorizontalLayout</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarHorizontalLayout:gap:get"><apiName>gap</apiName><shortdesc>
      布局元素之间的水平空间。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      布局元素之间的水平空间。请注意，仅会在布局元素之间应用该间隙，这样如果只有一个元素，则该间隙不会对布局有任何影响。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
  ListItemDragProxy 类定义从基于 Spark List 的控件拖动时使用的默认拖动代理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:Group</apiBaseClassifier></apiClassifierDef><apiDesc>
  ListItemDragProxy 类定义从基于 Spark List 的控件拖动时使用的默认拖动代理。
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ListItemDragProxy:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="spark.components.supportClasses:InteractionState"><apiName>InteractionState</apiName><shortdesc>
      InteractionStateDetector 类的 state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
      InteractionStateDetector 类的 <codeph>state</codeph> 属性的值。
           </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#InteractionStateDetector"><linktext>spark.components.supportClasses.InteractionStateDetector</linktext></link></related-links><apiValue id="spark.components.supportClasses:InteractionState:DOWN"><apiName>DOWN</apiName><shortdesc>
          组件应处于 down 状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>down</apiData><apiType value="String"/></apiValueDef><apiDesc>
          组件应处于 down 状态。
          
          <p>用户当前正在按着此组件。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:InteractionState:OVER"><apiName>OVER</apiName><shortdesc>
          组件应处于 over 状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>over</apiData><apiType value="String"/></apiValueDef><apiDesc>
          组件应处于 over 状态。
          
          <p>用户当前正在悬停于此组件上。</p>
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:InteractionState:UP"><apiName>UP</apiName><shortdesc>
          组件应处于 up 状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>up</apiData><apiType value="String"/></apiValueDef><apiDesc>
          组件应处于 up 状态。
          
          <p>此组件上未发生交互。</p>
          
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
  ButtonBarBase 类定义 ButtonBar、TabBar 及类似子类的常规行为。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><styles><style enumeration="top,bottom,right,left" inherit="no" name="iconPlacement" owner="spark.components.supportClasses:ButtonBarBase" playerVersion="Flash10" type="String">
<description>
  与标签相关的图标的方向。有效的 MXML 值是 <codeph>right</codeph>、<codeph>left</codeph>、<codeph>bottom</codeph> 和 <codeph>top</codeph>。
 
  <p>在 ActionScript 中，您可以使用下列常量来设置此属性：<codeph>IconPlacement.RIGHT</codeph>、<codeph>IconPlacement.LEFT</codeph>、<codeph>IconPlacement.BOTTOM</codeph> 和 <codeph>IconPlacement.TOP</codeph>。</p>
 
  </description>
<default>IconPlacement.LEFT
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;s:ButtonBarBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds no new tag attributes:</p>
 
  <pre>
  &lt;s:ButtonBarBase/&gt;
  </pre> 
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components.supportClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBarBase 类定义 ButtonBar、TabBar 及类似子类的常规行为。此类不添加任何新的 API，但会优化控件的 ItemRenderer 元素的选择、键盘焦点和键盘导航行为。此基类不直接实例化。
 
  <p>通过设置 <codeph>selectedIndex</codeph> 和 <codeph>caretIndex</codeph> 属性，单击 ItemRenderer 时会将其选中。如果 <codeph>requireSelection</codeph> 为 <codeph>false</codeph>，则再次单击会取消选择。如果数据提供程序是 <codeph>ISelectableList</codeph> 对象，则也会设置其 <codeph>selectedIndex</codeph>。</p> 
 
  <p>调整 <codeph>caretIndex</codeph> 会处理箭头键事件。如果 <codeph>arrowKeysWrapFocus</codeph> 为 <codeph>true</codeph>，则 <codeph>caretIndex</codeph> 将换行。按空格键将选择位于 <codeph>caretIndex</codeph> 的 ItemRenderer。</p>
 
  <p>ButtonBarBase 对象具有焦点且由于键盘动作而到达 <codeph>caretIndex</codeph> 时，位于 <codeph>caretIndex</codeph> 的 ItemRenderer 的 <codeph>showsCaret</codeph> 属性将设置为 <codeph>true</codeph>。如果已将 <codeph>caretIndex</codeph> 设置为响应鼠标单击的一个副作用，则不设置 <codeph>showsCaret</codeph>。</p>
 
  <p><codeph>ButtonBarButton</codeph> ItemRenderer 的 <codeph>allowDeselection</codeph> 属性设置为 <codeph>!requireSelection</codeph>。</p>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="spark.components.supportClasses:ButtonBarBase:ButtonBarBase"><apiName>ButtonBarBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      <p>初始化 Tab 键处理：按 Tab 键选择此组件使其获得焦点，而不是鼠标单击。禁用按 Tab 键选择子代。</p> 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:ButtonBarBase:iconField:get"><apiName>iconField</apiName><shortdesc>
      数据提供程序项目中作为图标显示的字段名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      数据提供程序项目中作为图标显示的字段名称。<codeph>iconFunction</codeph> 属性将覆盖此属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ButtonBarBase:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      用户提供的函数，在每个项目上运行以确定其图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用户提供的函数，在每个项目上运行以确定其图标。<codeph>iconFunction</codeph> 属性覆盖 <codeph>iconField</codeph> 属性。
     
      <p>您可以提供一个 <codeph>iconFunction</codeph>，用于查找合适的字段并返回可显示的图标。 </p>
     
      <p>icon 函数仅使用数据提供程序中的某个项目作为唯一参数，并返回一个有效的 BitmapImage 源。</p>
      <pre>
      myIconFunction(item:Object):Object</pre>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:ListBase"><apiName>ListBase</apiName><shortdesc>
  ListBase 类是支持选择内容的所有组件的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:ListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;s:ListBase
 
    <strong>Properties</strong>
    arrowKeysWrapFocus="false"
    labelField="label"
    labelFunction="null"
    requireSelection="false"
    selectedIndex="-1"
    selectedItem="undefined"
    useVirtualLayout="false"
 
    <strong>Events</strong>
    caretChange="<i>No default</i>"
    change="<i>No default</i>"
    changing="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:SkinnableDataContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  ListBase 类是支持选择内容的所有组件的基类。 
 
  <p><b>注意：</b>基于 Spark List 的控件（Spark ListBase 类及其子类，如 ButtonBar、ComboBox、DropDownList、List 和 TabBar）不支持将 BasicLayout 类作为 <codeph>layout</codeph> 属性的值。不要将 BasicLayout 与基于 Spark List 的控件一起使用。</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CARET_CHANGE_caretChange"><apiName>caretChange</apiName><shortdesc>
  焦点已更改后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CARET_CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  焦点已更改后分派。  
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  所选内容已更改后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  所选内容已更改后分派。当用户与此控件交互时，将分派此事件。
 
  <p>以编程方式更改 <codeph>selectedIndex</codeph> 或 <codeph>selectedItem</codeph> 属性的值时，该控件并不分派 <codeph>change</codeph> 事件，而是分派 <codeph>valueCommit</codeph> 事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.IndexChangeEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  所选内容即将更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.IndexChangeEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.IndexChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  所选内容即将更改时分派。对事件调用 <codeph>preventDefault()</codeph> 方法可避免选择内容发生更改。
  
  <p>当用户与此控件交互时，将分派此事件。以编程方式更改 <codeph>selectedIndex</codeph> 或 <codeph>selectedItem</codeph> 属性的值时，该控件并不分派 <codeph>changing</codeph> 事件，而是分派 <codeph>valueCommit</codeph> 事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.ListEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  当用户将鼠标指针移出控件中的某个项目时分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ListEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>spark.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户将鼠标指针移出控件中的某个项目时分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:ListBase_spark.events.ListEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  当用户将鼠标指针滚至控件中的某个项目时分派此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.ListEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>spark.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户将鼠标指针滚至控件中的某个项目时分派此方法。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:ListBase:ListBase"><apiName>ListBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:ListBase:protected:adjustSelection"><apiName>adjustSelection</apiName><shortdesc>
      调整选定索引以说明正添加到此组件或正从此组件删除的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>新索引。
       
      </apiDesc></apiParam><apiParam><apiItemName>add</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果已将项目添加到组件，则为 <codeph>true</codeph>；如果已删除项目，则为 <codeph>false</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      调整选定索引以说明正添加到此组件或正从此组件删除的项目。此方法调整选定索引值并分派 <codeph>valueCommit</codeph> 事件。它不会分派 <codeph>change</codeph> 事件，因为用户交互不会直接生成 change 事件。而且，它不分派 <codeph>changing</codeph> 事件或允许取消选择内容。因为已选中相同的项目，所以它也不调用 <codeph>itemSelected()</codeph> 方法；已更改的唯一事项是项目的索引。
     
      <p>在下次调用 <codeph>commitProperties()</codeph> 方法时，将分派 <codeph>valueCommit</codeph> 事件。</p>
     
      <p>调整 <codeph>selectedIndex</codeph> 后，将不发送 <codeph>change</codeph> 和 <codeph>changing</codeph> 事件。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemAdded"><apiName>itemAdded</apiName><shortdesc>
      已将项目添加到此组件时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>正在添加的项目的索引。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      已将项目添加到此组件时调用。将相应地调整所选内容和与插入标记相关的属性。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemRemoved"><apiName>itemRemoved</apiName><shortdesc>
      已将项目从此组件删除时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>正在删除的项目的索引。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      已将项目从此组件删除时调用。将相应地调整所选内容和与插入标记相关的属性。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemSelected"><apiName>itemSelected</apiName><shortdesc>
      选中或取消选中项目时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>已选中的项目索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>selected</apiItemName><apiType value="Boolean"/><apiDesc>如果选中项目，则为 <codeph>true</codeph>；如果取消选中项目，则为 <codeph>false</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      选中或取消选中项目时调用。子类必须覆盖此方法才可显示选择内容。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:protected:itemShowingCaret"><apiName>itemShowingCaret</apiName><shortdesc>
      当项目处于其 caret 状态时或不处于该状态时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>已置于 caret 状态的项目索引。 
     
      </apiDesc></apiParam><apiParam><apiItemName>showsCaret</apiItemName><apiType value="Boolean"/><apiDesc>如果项目处于其 caret 状态，则为 <codeph>true</codeph>；如果未处于该状态，则为 <codeph>false</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当项目处于其 caret 状态时或不处于该状态时调用。子类必须覆盖此方法才可显示 caret。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:ListBase:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      如果有一个数据项目，则返回呈示器应该显示的正确文本，同时将 labelField 和 labelFunction 属性考虑在内。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>表示要为呈示器中的数据项目显示的文本的 String。 
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>数据项目 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果有一个数据项目，则返回呈示器应该显示的正确文本，同时将 <codeph>labelField</codeph> 和 <codeph>labelFunction</codeph> 属性考虑在内。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:ListBase:NO_SELECTION"><apiName>NO_SELECTION</apiName><shortdesc>
      表示值“no selection”的静态常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
      表示值“no selection”的静态常量。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:arrowKeysWrapFocus"><apiName>arrowKeysWrapFocus</apiName><shortdesc>
      如果为 true，则使用箭头键在组件内导航时，如果击中某一端则将折回。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则使用箭头键在组件内导航时，如果击中某一端则将折回。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:caretIndex:get"><apiName>caretIndex</apiName><shortdesc>
      当前处于焦点的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="caretChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当前处于焦点的项目。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelField:get"><apiName>labelField</apiName><shortdesc>
      数据提供程序项目中作为标签显示的字段名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label" 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      数据提供程序项目中作为标签显示的字段名称。如果 labelField 设置为空字符串 ("")，则在数据提供程序中不会使用任何字段来表示标签。<codeph>labelFunction</codeph> 属性将覆盖此属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      用户提供的函数，在每个项目上运行以确定其标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用户提供的函数，在每个项目上运行以确定其标签。<codeph>labelFunction</codeph> 属性覆盖 <codeph>labelField</codeph> 属性。
     
      <p>您可以提供一个 <codeph>labelFunction</codeph>，用于查找合适的字段并返回可显示的字符串。<codeph>labelFunction</codeph> 还非常适用于处理格式设置和本地化。 </p>
     
      <p>label 函数仅使用数据提供程序中的某个项目作为唯一参数，并返回一个 String。</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:requireSelection:get"><apiName>requireSelection</apiName><shortdesc>
      如果为 true，则必须始终在控件中选中数据项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则必须始终在控件中选中数据项目。如果该值为 <codeph>true</codeph>，则始终将 <codeph>selectedIndex</codeph> 属性设置为 0 和 (<codeph>dataProvider.length</codeph> - 1) 之间的一个值。
     
     <p>对于大多数子类（除了 TabBar），默认值为 <codeph>false</codeph>。在这种情况下，默认值为 <codeph>true</codeph>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      选中项目的基于 0 的索引；或者如果未选中项目，则为基于 -1 的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      选中项目的基于 0 的索引；或者如果未选中项目，则为基于 -1 的索引。设置 <codeph>selectedIndex</codeph> 属性会取消选择当前选定的项目并选择指定索引位置的数据项目。
     
      <p>该值始终在 -1 和 (<codeph>dataProvider.length</codeph> - 1) 之间。如果从组件删除低于 <codeph>selectedIndex</codeph> 的索引位置的项目，则会相应地向下调整选定的索引。</p>
     
      <p>如果已删除选定项目，则将选定索引设置为：</p>
     
      <ul>
        <li>-1，如果 <codeph>requireSelection</codeph> = <codeph>false</codeph> 或没有剩余的项目。</li>
        <li>0，如果 <codeph>requireSelection</codeph> = <codeph>true</codeph> 且至少有一个项目。</li>
      </ul>
     
      <p>当用户通过与控件交互来更改 <codeph>selectedIndex</codeph> 属性时，此控件将分派 <codeph>change</codeph> 和 <codeph>changing</codeph> 事件。当以编程方式更改 <codeph>selectedIndex</codeph> 属性的值时，此控件将分派 <codeph>valueCommit</codeph> 事件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      当前已选中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="valueCommit"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="any"/><apiDefaultValue>undefined
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当前已选中的项目。设置此属性会取消选中当前选定的项目并选择新指定的项目。
     
      <p>将 <codeph>selectedItem</codeph> 设置为不在此组件中的项目会导致为选择任何内容，且会将 <codeph>selectedItem</codeph> 设置为 <codeph>undefined</codeph>。</p>
     
      <p>如果已删除选定项目，则将选定项目设置为：</p>
     
      <ul>
        <li><codeph>undefined</codeph>，如果 <codeph>requireSelection</codeph> = <codeph>false</codeph> 或没有剩余的项目。</li>
        <li>第一个项目，如果 <codeph>requireSelection</codeph> = <codeph>true</codeph> 且至少有一个项目。</li>
      </ul>
     
      <p>当用户通过与控件交互来更改 <codeph>selectedItem</codeph> 属性时，此控件将分派 <codeph>change</codeph> 和 <codeph>changing</codeph> 事件。当以编程方式更改 <codeph>selectedItem</codeph> 属性的值时，此控件将分派 <codeph>valueCommit</codeph> 事件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:ListBase:useVirtualLayout:get"><apiName>useVirtualLayout</apiName><shortdesc>
      设置与此控件相关联的布局的 useVirtualLayout 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      设置与此控件相关联的布局的 <codeph>useVirtualLayout</codeph> 属性的值。如果该布局随后被替换，且此属性的值为 <codeph>true</codeph>，则会将新布局的 <codeph>useVirtualLayout</codeph> 属性设置为 <codeph>true</codeph>。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:InteractionStateDetector"><apiName>InteractionStateDetector</apiName><shortdesc>
  组件的 helper 类用于帮助确定组件是否应处于 up、over 或 down 状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  组件的 helper 类用于帮助确定组件是否应处于 up、over 或 down 状态。
 
  <p>当状态改变时，如果应播放转换，则为 playTransitions。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="spark.components.supportClasses.xml#InteractionState"><linktext>spark.components.supportClasses.InteractionState</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:InteractionStateDetector_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  状态更改后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  状态更改后分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:InteractionStateDetector:InteractionStateDetector"><apiName>InteractionStateDetector</apiName><shortdesc>
      构造函数
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>component</apiItemName><apiType value="mx.core:UIComponent"/><apiDesc> 用于检测是否处于 up/over/down 状态的 UIComponent。已将事件侦听器连接到此对象。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.components.supportClasses:InteractionStateDetector:state:get"><apiName>state</apiName><shortdesc>
      返回组件的状态；可能的值包括：InteractionState.UP、InteractionState.DOWN、InteractionState.OVER
        
      
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.1"/><apiPlatform description="" name="AIR" version="2.5"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="change"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      返回组件的状态
     
      <p>可能的值包括：
        <ul>
          <li>InteractionState.UP</li>
          <li>InteractionState.DOWN</li>
          <li>InteractionState.OVER</li>
        </ul>
      </p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.components.supportClasses.InteractionState;.xml"><linktext>spark.components.supportClasses.InteractionState;</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
  DropDownListBase 控件包含下拉列表，用户可从中选择单个值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><Exclude kind="property" name="selectedItems"/><Exclude kind="property" name="selectedIndices"/><Exclude kind="property" name="dropEnabled"/><Exclude kind="property" name="dragMoveEnabled"/><Exclude kind="property" name="dragEnabled"/><Exclude kind="property" name="allowMultipleSelection"/><skinStates><SkinState name="open" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10">
<description>
  DropDownListBase 控件的打开状态的外观状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="no" name="dropShadowVisible" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  控制此组件的投影的可见性。
 
  </description>
<default>true
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的角的半径。
 
  </description>
<default>4
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/><skinParts><SkinPart name="dropDown" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" required="false" var_type="flash.display:DisplayObject">
<description>
      定义下拉列表区域的外观部件。DropDownListBase 打开时，在 dropDown 外观部件之外的任何位置单击将关闭该下拉列表。 
     
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the drop-down list area.</shortdesc></SkinPart><SkinPart name="openButton" owner="spark.components.supportClasses:DropDownListBase" playerVersion="Flash10" required="true" var_type="spark.components.supportClasses:ButtonBase">
<description>
      定义锚点按钮的外观部件。  
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      A skin part that defines the anchor button.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[<p>The <code>&lt;s:DropDownListBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following attributes:</p>
 
  <pre>
  &lt;s:DropDownListBase 
    <strong>Styles</strong>
    cornerRadius="4"
    dropShadowVisible="true"
 
    <strong>Events</strong>
    closed="<i>No default</i>"
    open="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>spark.components:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  DropDownListBase 控件包含下拉列表，用户可从中选择单个值。其功能与 HTML 中 SELECT 表单元素的功能非常相似。
 
  <p>DropDownListBase 控件由锚点按钮和下拉列表构成。使用锚点按钮可打开和关闭下拉列表。 
  </p>
 
  <p>打开下拉列表时：</p>
  <ul>
    <li>单击锚点按钮会关闭下拉列表并提交当前选定的数据项目。</li>
    <li>在下拉列表之外单击会关闭下拉列表并提交当前选定的数据项目。</li>
    <li>在某个数据项目上单击会选中该项目并关闭下拉列表。</li>
    <li>如果 <codeph>requireSelection</codeph> 属性为 <codeph>false</codeph>，则按下 Ctrl 键的同时单击某个数据项目会取消选中该项目并关闭下拉列表。</li>
  </ul>
 
  </apiDesc><example conref="DropDownListExample.mxml"><swfblock conref="examples/DropDownListExample.swf"/></example></apiClassifierDetail><related-links><link href="spark.skins.spark.xml#DropDownListSkin"><linktext>spark.skins.spark.DropDownListSkin</linktext></link><link href="spark.components.supportClasses.xml#DropDownController"><linktext>spark.components.supportClasses.DropDownController</linktext></link></related-links><adobeApiEvent id="spark.components.supportClasses:DropDownListBase_spark.events.DropDownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  当用户单击锚点按钮以显示下拉列表时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.OPEN</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户单击锚点按钮以显示下拉列表时分派。用户使用 Control-Down 打开 dropDown 时也会分派它。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:DropDownListBase_spark.events.DropDownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  当因以下任何原因关闭下拉列表时分派：用户选择下拉列表中的某个项目。在下拉列表外部单击。在显示下拉列表时单击锚点按钮。
  
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.DropDownEvent.CLOSE</apiEventType><adobeApiEventClassifier>spark.events.DropDownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当因以下任何原因关闭下拉列表时分派：用户
  <ul>
      <li>选择下拉列表中的某个项目。</li>
      <li>在下拉列表外部单击。</li>
      <li>在显示下拉列表时单击锚点按钮。</li>
  </ul>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:DropDownListBase:DropDownListBase"><apiName>DropDownListBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:DropDownListBase:closeDropDown"><apiName>closeDropDown</apiName><shortdesc>
      关闭下拉列表并分派 DropDownEvent.CLOSE 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>commit</apiItemName><apiType value="Boolean"/><apiDesc>如果为 <codeph>true</codeph>，请提交选定的数据项目。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      关闭下拉列表并分派 <codeph>DropDownEvent.CLOSE</codeph> 事件。 
       
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="spark.components.supportClasses:DropDownListBase:openDropDown"><apiName>openDropDown</apiName><shortdesc>
      打开下拉列表并分派 DropdownEvent.OPEN 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      打开下拉列表并分派 <codeph>DropdownEvent.OPEN</codeph> 事件。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="spark.components.supportClasses:DropDownListBase:protected:dropDownController:get"><apiName>dropDownController</apiName><shortdesc>
      用于处理所有鼠标、键盘和焦点用户交互的 DropDownController 类的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>spark.components.supportClasses:DropDownController</apiValueClassifier></apiValueDef><apiDesc>
      用于处理所有鼠标、键盘和焦点用户交互的 DropDownController 类的实例。在构造函数中创建 DropDownController 实例之后，Flex 调用 <codeph>initializeDropDownController()</codeph> 方法。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:DropDownListBase:isDropDownOpen:get"><apiName>isDropDownOpen</apiName><shortdesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="spark.components.supportClasses.DropDownController#isOpen">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.components.supportClasses:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
  在其外观中包含 IEditableText 的实例以提供文本显示、滚动、选择和编辑等功能的、可设置外观的组件（如 Spark TextInput 和 TextArea）的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion><skinStates><SkinState name="disabledWithPrompt" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2">
<description>
  带有提示的禁用状态。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="normalWithPrompt" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2">
<description>
  带有提示的正常状态。
  
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog></SkinState><SkinState name="disabled" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10">
<description>
  已禁用状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState><SkinState name="normal" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10">
<description>
  正常状态。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></SkinState></skinStates><styles><style inherit="yes" name="showPromptWhenFocused" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.2" theme="mobile" type="Boolean">
<description>
  控制在组件为空并获得焦点时组件的提示文本的可见性。
 
  </description>

<playerversion>AIR 2.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.6
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:focusColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  此组件的焦点外框的 Alpha。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="uint">
<description conref="spark.components.supportClasses.GroupBase#style:contentBackgroundColor">
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Number">
<description>
  组件内容背景的 Alpha。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark, mobile" type="Boolean">
<description>
  控制此组件的边框的可见性。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  此组件的边框的颜色。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  此组件的边框的 Alpha。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="unfocusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  组件已启用但没有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="inactiveTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  禁用组件时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusedTextSelectionColor" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  组件已启用且有焦点时文本的颜色。
  
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="wordSpacing" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.5" type="Object">
<description>
  指定两端对齐要用的字间距。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.wordSpacing。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/wordSpacing"><linktext>flashx.textLayout.formats.ITextLayoutFormat.wordSpacing</linktext></link></related-links></style><style enumeration="collapse,preserve" inherit="yes" name="whiteSpaceCollapse" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  将文本导入到 TextFlow 中时压缩或保留空白。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/whiteSpaceCollapse"><linktext>flashx.textLayout.formats.ITextLayoutFormat.whiteSpaceCollapse</linktext></link></related-links></style><style enumeration="auto,rotate0,rotate90,rotate180,rotate270" inherit="yes" name="textRotation" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  确定要旋转此文本的度数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textRotation。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textRotation"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textRotation</linktext></link></related-links></style><style format="Length" inherit="yes" name="textIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  文本第一行偏离容器左侧的距离。
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textIndent。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textIndent；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textIndent
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textIndent</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textIndent"><linktext>spark.components.supportClasses.StyleableTextField.textIndent</linktext></link></related-links></style><style inherit="yes" name="tabStops" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  指定与段落关联的制表位。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.tabStops。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/tabStops"><linktext>flashx.textLayout.formats.ITextLayoutFormat.tabStops</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphStartIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  段落开始边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphStartIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphStartIndent</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceBefore" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  段落之前要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceBefore"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceBefore</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphSpaceAfter" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  段落之后要留出的空格数。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphSpaceAfter"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphSpaceAfter</linktext></link></related-links></style><style format="length" inherit="yes" name="paragraphEndIndent" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  段落结束边缘要缩进的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paragraphEndIndent"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paragraphEndIndent</linktext></link></related-links></style><style enumeration="upperAlpha,lowerAlpha,upperRoman,lowerRoman,none,disc,circle,square,box,check,diamond,hyphen,arabicIndic,bengali,decimal,decimalLeadingZero,devanagari,gujarati,gurmukhi,kannada,persian,thai,urdu,cjkEarthlyBranch,cjkHeavenlyStem,hangul,hangulConstant,hiragana,hiraganaIroha,katakana,katakanaIroha,lowerGreek,lowerLatin,upperGreek,upperLatin" inherit="yes" name="listStyleType" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  它控制列表中项目的外观。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStyleType。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStyleType"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStyleType</linktext></link></related-links></style><style enumeration="inside,outside" inherit="yes" name="listStylePosition" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  它控制列表项目标记相对于列表项目的位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listStylePosition。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 2.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listStylePosition"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listStylePosition</linktext></link></related-links></style><style format="length" inherit="yes" name="listAutoPadding" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  指定当列表相应侧的内边距值为 <codeph>auto</codeph> 时，列表开始边缘的自动缩进。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/listAutoPadding"><linktext>flashx.textLayout.formats.ITextLayoutFormat.listAutoPadding</linktext></link></related-links></style><style enumeration="auto,romanUp,ideographicTopUp,ideographicCenterUp,ideographicTopDown,ideographicCenterDown,ascentDescentUp,box" inherit="yes" name="leadingModel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  指定行距模型，它是行距基准和行距方向的组合。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.leadingModel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/leadingModel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.leadingModel</linktext></link></related-links></style><style inherit="yes" name="firstBaselineOffset" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  指定容器中第一行的基线位置。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/firstBaselineOffset"><linktext>flashx.textLayout.formats.ITextLayoutFormat.firstBaselineOffset</linktext></link></related-links></style><style enumeration="start,end,left,right,both,none" inherit="yes" name="clearFloats" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  控制文本在浮点周围的环绕方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.clearFloats。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/clearFloats"><linktext>flashx.textLayout.formats.ITextLayoutFormat.clearFloats</linktext></link></related-links></style><style enumeration="auto,all,any,none" inherit="yes" name="breakOpportunity" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  控制在将连续文本断开为多行时允许行断开的位置。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/breakOpportunity"><linktext>flashx.textLayout.formats.ITextLayoutFormat.breakOpportunity</linktext></link></related-links></style><style enumeration="tb,rl" inherit="yes" name="blockProgression" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  指定线位置的垂直或水平行进。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/blockProgression"><linktext>flashx.textLayout.formats.ITextLayoutFormat.blockProgression</linktext></link></related-links></style><style enumeration="default,capsToSmallCaps,uppercase,lowercase,lowercaseToSmallCaps" inherit="yes" name="typographicCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的印刷大小写的类型。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.typographicCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/typographicCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.typographicCase</linktext></link></related-links></style><style inherit="yes" name="trackingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符右侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingRight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingRight</linktext></link></related-links></style><style inherit="yes" name="trackingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  要应用于每个字符左侧的间距量（手动字距调整）。   
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.trackingLeft。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/trackingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.trackingLeft</linktext></link></related-links></style><style enumeration="interWord,distribute" inherit="yes" name="textJustify" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  指定文本两端对齐的选项。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textJustify。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textJustify"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textJustify</linktext></link></related-links></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  确定文本是否加下划线。
   <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textDecoration。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textDecoration；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:textDecoration
   </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textDecoration"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textDecoration</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textDecoration"><linktext>spark.components.supportClasses.StyleableTextField.textDecoration</linktext></link></related-links></style><style inherit="yes" name="textAlpha" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  文本的 Alpha（透明度）值。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlpha。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlpha"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlpha</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlignLast" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  两端对齐文本中段落最后一行与容器的对齐方式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlignLast。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlignLast"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlignLast</linktext></link></related-links></style><style enumeration="start,end,left,right,center,justify" inherit="yes" name="textAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  容器内文本的对齐方式。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.textAlign。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style textAlign；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style textAlign。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:textAlign
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/textAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:textAlign"><linktext>spark.components.supportClasses.StyleableStageText.textAlign</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:textAlign"><linktext>spark.components.supportClasses.StyleableTextField.textAlign</linktext></link></related-links></style><style enumeration="cff,normal" inherit="yes" name="renderingMode" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  仅适用于嵌入字体的用于该文本的呈示模式。  
  
  <p><b>有关 Spark 主题，请参阅flashx.textLayout.formats.ITextLayoutFormat.renderingMode</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/renderingMode"><linktext>flashx.textLayout.formats.ITextLayoutFormat.renderingMode</linktext></link></related-links></style><style inherit="yes" name="locale" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  文本的区域设置。控制大小写转换和形状。使用标准区域设置标识符，如 Unicode Technical Standard #35 中所述。例如，"en"、"en_US" 和 "en-US" 均表示英语，"ja" 表示日语。 
  
  <p>默认值为 undefined。此属性从祖代继承其值；如果未定义祖代，则从全局区域设置<codeph/>样式中继承。在初始化应用程序过程中，如果未定义全局区域设置<codeph/> 样式，则默认值设置为“en”。</p>
 
  <p>在使用 Spark 格式化程序和全球化类时，可以将根应用程序的此样式设置为 <codeph>LocaleID.DEFAULT</codeph> 常量的值。然后，这些类使用客户端操作系统的国际首选参数。</p>
 
  </description>
<default>undefined
  </default>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="http://www.unicode.org/reports/tr35/"><linktext>http://www.unicode.org/reports/tr35/</linktext></link></related-links></style><style inherit="yes" name="lineThrough" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Boolean">
<description> 
  若为 true，则应用删除线（一条穿过文本中间的直线）。  
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineThrough。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineThrough"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineThrough</linktext></link></related-links></style><style inherit="yes" name="lineHeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  文本的行距控制。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.lineHeight。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b>请参阅 <codeph>leading</codeph>。</p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>#style:leading
 
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineHeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineHeight</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:leading"><linktext>leading</linktext></link></related-links></style><style enumeration="common,minimum,uncommon,exotic" inherit="yes" name="ligatureLevel" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  控制可以在该文本中使用字体中定义的哪些连字。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/ligatureLevel"><linktext>flashx.textLayout.formats.ITextLayoutFormat.ligatureLevel</linktext></link></related-links></style><style inherit="yes" name="letterSpacing" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  各字符之间显示的附加像素数。
 
  <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>trackingLeft</codeph> 和 <codeph>trackingRight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField.letterSpacing；如果使用 StyleableStageText，则不支持此项。</b></p>
   </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:trackingLeft
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:letterSpacing"><linktext>spark.components.supportClasses.StyleableTextField.letterSpacing</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:trackingLeft"><linktext>trackingLeft</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:trackingRight"><linktext>trackingRight</linktext></link></related-links></style><style format="Length" inherit="yes" name="leading" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10.1" theme="mobile" type="Number">
<description>
  文本行之间附加的垂直空间。
   <p><b>对于 Spark 主题，它不受支持。</b>请参阅 <codeph>lineHeight</codeph>。</p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableStageText Style fontWeight；如果使用 StyleableStageText，则不支持此项。</b></p>
 
  </description>

<playerversion>AIR 2.0
  </playerversion>

<see>#style:lineHeight
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4.5
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:leading"><linktext>spark.components.supportClasses.StyleableTextField.leading</linktext></link><link href="spark.components.supportClasses.xml#SkinnableTextBase/style:lineHeight"><linktext>lineHeight</linktext></link></related-links></style><style enumeration="auto,on,off" inherit="yes" name="kerning" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p>Spark 组件默认启用字距调整，但 MX 组件默认禁用字距调整。Spark 组件将 <codeph>default</codeph> 视为 <codeph>auto</codeph>，而 MX 组件将 <codeph>default</codeph> 视为 <codeph>false</codeph>。</p>
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.kerning。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/kerning"><linktext>flashx.textLayout.formats.ITextLayoutFormat.kerning</linktext></link></related-links></style><style enumeration="auto,prioritizeLeastAdjustment,pushInKinsoku,pushOutOnly" inherit="yes" name="justificationStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  段落两端对齐所用的样式。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationStyle。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationStyle</linktext></link></related-links></style><style enumeration="auto,space,eastAsian" inherit="yes" name="justificationRule" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  用于将段落文本两端对齐的规则。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.justificationRule。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/justificationRule"><linktext>flashx.textLayout.formats.ITextLayoutFormat.justificationRule</linktext></link></related-links></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用粗体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontWeight。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontWeight；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontWeight。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontWeight
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontWeight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontWeight"><linktext>spark.components.supportClasses.StyleableStageText.fontWeight</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontWeight"><linktext>spark.components.supportClasses.StyleableTextField.fontWeight</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  确定文本是否使用斜体。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontStyle。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontStyle；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontStyle。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontStyle
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontStyle"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontStyle"><linktext>spark.components.supportClasses.StyleableStageText.fontStyle</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontStyle"><linktext>spark.components.supportClasses.StyleableTextField.fontStyle</linktext></link></related-links></style><style format="Length" inherit="yes" name="fontSize" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  文本的高度，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontSize。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontSize；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontSize。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>12</codeph>。Mobile 主题的默认值为 <codeph>24</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontSize
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontSize"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontSize"><linktext>spark.components.supportClasses.StyleableStageText.fontSize</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontSize"><linktext>spark.components.supportClasses.StyleableTextField.fontSize</linktext></link></related-links></style><style enumeration="auto,device,embeddedCFF" inherit="yes" name="fontLookup" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  要使用的字体查找。 
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontLookup。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontLookup"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontLookup</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  要使用的字体的名称或用逗号分隔的字体名称列表。 
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.fontFamily。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style fontFamily；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style fontFamily。</b></p>
 
  <p>Spark 主题的默认值为 <codeph>Arial</codeph>。Mobile 主题的默认值为 <codeph>_sans</codeph>。</p>
   </description>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableStageText#style:fontFamily
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/fontFamily"><linktext>flashx.textLayout.formats.ITextLayoutFormat.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:fontFamily"><linktext>spark.components.supportClasses.StyleableStageText.fontFamily</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:fontFamily"><linktext>spark.components.supportClasses.StyleableTextField.fontFamily</linktext></link></related-links></style><style enumeration="auto,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="dominantBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  指定该元素的哪条基线对齐到 <codeph>alignmentBaseline</codeph> 以确定元素在该行上的垂直位置。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/dominantBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.dominantBaseline</linktext></link></related-links></style><style enumeration="ltr,rtl" inherit="yes" name="direction" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  指定文本的默认双向嵌入级别。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.direction。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/direction"><linktext>flashx.textLayout.formats.ITextLayoutFormat.direction</linktext></link></related-links></style><style enumeration="default,proportional,tabular" inherit="yes" name="digitWidth" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字宽度类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitWidth。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitWidth"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitWidth</linktext></link></related-links></style><style enumeration="default,lining,oldStyle" inherit="yes" name="digitCase" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的数字大小写类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.digitCase。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/digitCase"><linktext>flashx.textLayout.formats.ITextLayoutFormat.digitCase</linktext></link></related-links></style><style format="Color" inherit="yes" name="color" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="uint">
<description>
  文本的颜色。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.color。</b></p>
   <p><b>对于 Mobile 主题，如果使用 StyleableTextField，请参阅 spark.components.supportClasses.StyleableTextField Style color；如果使用 StyleableStageText，则参阅 spark.components.supportClasses.StyleableStageText Style color。</b></p>
   </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.5
  </playerversion>

<see>spark.components.supportClasses.StyleableTextField#style:color
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/color"><linktext>flashx.textLayout.formats.ITextLayoutFormat.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableTextField/style:color"><linktext>spark.components.supportClasses.StyleableTextField.color</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/style:color"><linktext>spark.components.supportClasses.StyleableStageText.color</linktext></link></related-links></style><style enumeration="horizontalStem,none" inherit="yes" name="cffHinting" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  用于此文本的 CFF 提示的类型。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.cffHinting。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/cffHinting"><linktext>flashx.textLayout.formats.ITextLayoutFormat.cffHinting</linktext></link></related-links></style><style inherit="yes" name="baselineShift" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Object">
<description>
  要偏移基线的量。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.baselineShift。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/baselineShift"><linktext>flashx.textLayout.formats.ITextLayoutFormat.baselineShift</linktext></link></related-links></style><style enumeration="useDominantBaseline,roman,ascent,descent,ideographicTop,ideographicCenter,ideographicBottom" inherit="yes" name="alignmentBaseline" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  指定主要基线对齐到的基线。
  
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline。</b></p>
   <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/alignmentBaseline"><linktext>flashx.textLayout.formats.ITextLayoutFormat.alignmentBaseline</linktext></link></related-links></style><style enumeration="top,middle,bottom,justify" inherit="no" name="verticalAlign" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  垂直对齐或两端对齐。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.verticalAlign。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/verticalAlign"><linktext>flashx.textLayout.formats.ITextLayoutFormat.verticalAlign</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  顶部边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingRight。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingRight" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  右侧边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingRight。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingRight"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingRight</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingLeft" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  左侧边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingLeft。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingLeft"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingLeft</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingBottom" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="Number">
<description>
  底部边界区，以像素为单位。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.paddingBottom。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/paddingBottom"><linktext>flashx.textLayout.formats.ITextLayoutFormat.paddingBottom</linktext></link></related-links></style><style enumeration="toFit,explicit" inherit="no" name="lineBreak" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" type="String">
<description>
  控制容器内的文字换行。
 
  <p><b>有关 Spark 主题，请参阅 flashx.textLayout.formats.ITextLayoutFormat.blockProgression。</b></p>
 
  <p><b>对于 Mobile 主题，它不受支持。</b></p>
 
  </description>

<playerversion>AIR 1.5
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flashx.textLayout.formats.xml#ITextLayoutFormat/lineBreak"><linktext>flashx.textLayout.formats.ITextLayoutFormat.lineBreak</linktext></link></related-links></style></styles><skinParts><SkinPart name="promptDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.core:IDisplayText">
<description>
      在指定给此组件的任何外观中可能会存在的标签或其它 IDisplayText。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The Label or other IDisplayText that might be present
      in any skin assigned to this component.</shortdesc></SkinPart><SkinPart name="textDisplay" owner="spark.components.supportClasses:SkinnableTextBase" playerVersion="Flash10" required="false" var_type="spark.core:IEditableText">
<description>
      在指定给此组件的任何外观中可能会存在的 IEditableText。对于 Spark 主题，这是 RichEditableText；对于 Mobile 主题，这是 StyleableStageText。
      
      </description>

<playerversion>AIR 1.5
      </playerversion>
	<prolog><asCustoms><langversion>3.0
      </langversion><productversion>Flex 4
     </productversion></asCustoms></prolog><shortdesc>
      The IEditableText that may be present
      in any skin assigned to this component.</shortdesc></SkinPart></skinParts></asMetadata><asCustoms><mxml><![CDATA[  <p>The <code>&lt;s:SkinnableTextBase&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
   <pre>
  &lt;s:SkinnableTextBase
    autoCapitalize="none"  <b>[Mobile theme only]</b>
    autoCorrect="true"  <b>[Mobile theme only]</b>
    displayAsPassword="false"
    editable="true"
    imeMode="null"  <b>[Spark theme only]</b>
    maxChars="0"
    prompt="null"
    restrict="null"
    returnLabelKey="default"  <b>[Mobile theme only]</b>
    selectable="true"
    selectionHighlighting="whenFocused"  <b>[Spark theme only]</b>
    softKeyBoardType="default"  <b>[Mobile theme only]</b>
    text=""
    typicalText="null"  <b>[Spark theme only]</b>
  
    <strong>Styles</strong>
    borderAlpha="1.0"
    borderColor="0x696969"
    borderVisible="true"
    contentBackgroundAlpha="1.0" 
    contentBackgroundColor="0xFFFFFF"
    focusAlpha="0.55"
    focusColor="0x70B2EE"
    showPromptWhenFocused="true"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    changing="<i>No default</i>"  <b>[Spark theme only]</b>
    selectionChange="<i>No default</i>"  <b>[Spark theme only]</b>
    textInput="<i>No default</i>"  <b>[Spark theme only]</b>
  /&gt;
  </pre>
   ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>spark.core:ISoftKeyboardHintClient</apiBaseInterface><apiBaseClassifier>spark.components.supportClasses:SkinnableComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  在其外观中包含 IEditableText 的实例以提供文本显示、滚动、选择和编辑等功能的、可设置外观的组件（如 Spark TextInput 和 TextArea）的基类。默认情况下，对于 Spark 主题，IEditableText 是 RichEditableText；对于 Mobile 主题，是 StyleableStageText。StyleableTextField 也可用于 Mobile 主题。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
  将要在组件中存在输入击键动作时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  将要在组件中存在输入击键动作时分派。
   <p><b>对于 Mobile 主题，不调度此项。</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  在用户编辑操作完成后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGE</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在用户编辑操作完成后分派。
   </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_spark.events.TextOperationEvent.CHANGING_changing"><apiName>changing</apiName><shortdesc>
  在用户编辑操作发生前分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>spark.events.TextOperationEvent.CHANGING</apiEventType><adobeApiEventClassifier>spark.events.TextOperationEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在用户编辑操作发生前分派。可以更改该操作，或取消该事件以防止该操作被处理。
   <p><b>对于 Mobile 主题，不调度此项。</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="spark.components.supportClasses:SkinnableTextBase_mx.events.FlexEvent.SELECTION_CHANGE_selectionChange"><apiName>selectionChange</apiName><shortdesc>
  在 selectionAnchorPosition 和/或 selectionActivePosition 属性因任意原因而更改后分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  出于任何原因在 <codeph>selectionAnchorPosition</codeph> 和/或 <codeph>selectionActivePosition</codeph> 属性已更改后分派。
   <p><b>对于 Mobile 主题，不调度此项。</b></p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="spark.components.supportClasses:SkinnableTextBase:SkinnableTextBase"><apiName>SkinnableTextBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。 
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="spark.components.supportClasses:SkinnableTextBase:appendText"><apiName>appendText</apiName><shortdesc conref="spark.core.IEditableText#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>要追加的文本。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#appendText()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/appendText()"><linktext>spark.components.RichEditableText.appendText()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/appendText()"><linktext>spark.components.supportClasses.StyleableStageText.appendText()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:insertText"><apiName>insertText</apiName><shortdesc conref="spark.core.IEditableText#insertText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>要插入的文本。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#insertText()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/insertText()"><linktext>spark.components.RichEditableText.insertText()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/insertText()"><linktext>spark.components.supportClasses.StyleableStageText.insertText()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectAll"><apiName>selectAll</apiName><shortdesc conref="spark.core.IEditableText#selectAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="spark.core.IEditableText#selectAll()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/selectAll()"><linktext>spark.components.RichEditableText.selectAll()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectAll()"><linktext>spark.components.supportClasses.StyleableStageText.selectAll()</linktext></link></related-links></apiOperation><apiOperation id="spark.components.supportClasses:SkinnableTextBase:selectRange"><apiName>selectRange</apiName><shortdesc conref="spark.core.IEditableText#selectRange()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/><apiDesc>字符位置，用于指定扩展选区时保持固定的选区的未端。
           </apiDesc></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/><apiDesc>字符位置，用于指定扩展选区时移动的选区的未端。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="spark.core.IEditableText#selectRange()">
      </apiDesc></apiOperationDetail><related-links><link href="spark.components.xml#RichEditableText/selectRange()"><linktext>spark.components.RichEditableText.selectRange()</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectRange()"><linktext>spark.components.supportClasses.StyleableStageText.selectRange()</linktext></link></related-links></apiOperation><apiValue id="spark.components.supportClasses:SkinnableTextBase:autoCapitalize:get"><apiName>autoCapitalize</apiName><shortdesc>
      提示，用于指示应使用的大写行为软键盘。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"none"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      提示，用于指示应使用的大写行为软键盘。 
           <p>支持的值在 flash.text.AutoCapitalize 中定义：</p>
     
      <ul>
          <li><codeph>“none”</codeph>- 不自动大写</li>
          <li><codeph>“word”</codeph>- 大写任何空格或标点符号后的第一个字母</li>
          <li><codeph>“sentence”</codeph>- 大写任何句号后的第一个字母</li>
          <li><codeph>“all”</codeph>- 大写每个字母</li>
      </ul>
           <p><b>对于 Spark 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.AutoCapitalize.xml"><linktext>flash.text.AutoCapitalize</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:autoCorrect:get"><apiName>autoCorrect</apiName><shortdesc>
      提示，用于指示软键盘是否应使用自动更正行为（如果支持）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      提示，用于指示软键盘是否应使用自动更正行为（如果支持）。
      <p><b>对于 Spark 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:editable:get"><apiName>editable</apiName><shortdesc>
      指定文本是否可编辑。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指定文本是否可编辑。
     
      <p><b>有关 Spark 主题，请参阅 spark.components.RichEditableText.editable。</b></p>
           <p><b>对于 Mobile 主题，请参阅 spark.components.supportClasses.StyleableStageText.editable</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/editable"><linktext>spark.components.RichEditableText.editable</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/editable"><linktext>spark.components.supportClasses.StyleableStageText.editable</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件获得焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件获得焦点时是否应启用 IME。
     
      <p><b>对于 Mobile 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/enableIME"><linktext>spark.components.RichEditableText.enableIME</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 IME（输入法编辑器）模式。
     
      <p><b>有关 Spark 主题，请参阅 spark.components.RichEditableText.imeMode。</b></p>
           <p><b>对于 Mobile 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/imeMode"><linktext>spark.components.RichEditableText.imeMode</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:prompt:get"><apiName>prompt</apiName><shortdesc>
      当实际 text 属性为空字符串时要显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10.2"/><apiPlatform description="" name="AIR" version="2.0"/><apiTool description="" name="Flex" version="4.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
           </apiDefaultValue></apiValueDef><apiDesc>
      当实际 text 属性为空字符串时要显示的文本。
     
      <p>先创建文本控件时将显示提示文本。控件获得焦点时或控件的 <codeph>text</codeph> 属性为非空字符串时，提示文本将消失。控件失去焦点时提示文本将重新显示，但仅当未输入文本时（如果文本字段的值为空字符串）。</p>
      
      <p>对于文本控件，如果用户输入文本，但随后又将其删除，则控件失去焦点后，提示文本将重新显示。您还可以通过编程方式将文本控件的 text 属性设置为空字符串使提示文本重新显示。</p>
      
      <p>您可以使用 CSS 更改提示文本的样式。如果控件具有提示文本且未处于禁用状态，<codeph>normalWithPrompt</codeph> 伪选择器将定义该样式。如果控件处于禁用状态，将使用 <codeph>disabledWithPrompt</codeph> 伪选择器所定义的样式。</p>
      
      <p>以下示例 CSS 更改了作为 SkinnableTextBase 子类的控件（包括 Spark TextInput 和 TextArea 控件）中的提示文本的颜色：
      <pre>
      @namespace s "library://ns.adobe.com/flex/spark";
      s|SkinnableTextBase:normalWithPrompt {
          color: #CCCCFF;
      }
      </pre>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:returnKeyLabel:get"><apiName>returnKeyLabel</apiName><shortdesc>
      提示，用于指示在软键盘上应使用哪个标签来显示回车键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"default"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      提示，用于指示在软键盘上应使用哪个标签来显示回车键。
           <p>支持的值在 flash.text.ReturnKeyLabel 中定义：</p>
     
      <ul>
          <li><codeph>“default”</codeph>- 默认的图标或标签文本</li>
          <li><codeph>“done”</codeph>- 表示文本输入完成的图标或标签文本</li>
          <li><codeph>“go”</codeph>- 表示操作应开始的图标或标签文本</li>
          <li><codeph>“next”</codeph>- 表示移动到下一字段的图标或标签文本</li>
          <li><codeph>“search”</codeph>- 表示应搜索输入的文本的图标或标签文本</li>
      </ul>
           <p><b>对于 Spark 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.ReturnKeyLabel.xml"><linktext>flash.text.ReturnKeyLabel</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectable:get"><apiName>selectable</apiName><shortdesc>
      一个标志，指示内容是否可选。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示内容是否可选。在桌面上，用户可以使用鼠标或键盘（如果控件含有键盘焦点）选择内容。在 touch 交互设备上，用户进入到文本组件的选择模式后，就可以使用他们的手指选择文本。
     
      <p><b>有关 Spark 主题，请参阅 spark.components.RichEditableText.selectable。</b></p>
           <p><b>对于 Mobile 主题，请参阅 spark.components.supportClasses.StyleableStageText.selectable</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectable"><linktext>spark.components.RichEditableText.selectable</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectable"><linktext>spark.components.supportClasses.StyleableStageText.selectable</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      相对于 text 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区的终点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      相对于 <codeph>text</codeph> 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区的终点。
     
      <p><b>有关 Spark 主题，请参阅 spark.components.RichEditableText.selectionActivePosition。</b></p>
           <p><b>对于 Mobile 主题，请参阅 spark.components.supportClasses.StyleableStageText.selectionActivePosition</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionActivePosition"><linktext>spark.components.RichEditableText.selectionActivePosition</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectionActivePosition"><linktext>spark.components.supportClasses.StyleableStageText.selectionActivePosition</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      相对于 text 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区保持固定的终点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true" name="selectionChange"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      相对于 <codeph>text</codeph> 字符串开头的字符位置，用于指定用箭头键扩展选区时该选区保持固定的终点。
     
      <p><b>有关 Spark 主题，请参阅 spark.components.RichEditableText.selectionAnchorPosition。</b></p>
           <p><b>对于 Mobile 主题，请参阅 spark.components.supportClasses.StyleableStageText.selectionAnchorPosition</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionAnchorPosition"><linktext>spark.components.RichEditableText.selectionAnchorPosition</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/selectionAnchorPosition"><linktext>spark.components.supportClasses.StyleableStageText.selectionAnchorPosition</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:selectionHighlighting:get"><apiName>selectionHighlighting</apiName><shortdesc>
      确定何时加亮选择的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>TextSelectionHighlighting.WHEN_FOCUSED
     
      </apiDefaultValue></apiValueDef><apiDesc>
      确定何时加亮选择的文本。
     
      <p><b>有关 Spark 主题，请参阅 spark.components.RichEditableText.selectionHighlighting。</b></p>
           <p><b>对于 Mobile 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/selectionHighlighting"><linktext>spark.components.RichEditableText.selectionHighlighting</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:softKeyboardType:get"><apiName>softKeyboardType</apiName><shortdesc>
      提示，用于指示应为此组件显示哪种类型的软键盘。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="3.0"/><apiTool description="" name="Flex" version="4.6"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"default" 
     
      </apiDefaultValue></apiValueDef><apiDesc>
      提示，用于指示应为此组件显示哪种类型的软键盘。
           <p>支持的值在 flash.text.SoftKeyboardType 中定义：</p>
     
      <ul>
          <li><codeph>“default”</codeph>- 默认键盘</li>
          <li><codeph>“punctuation”</codeph>- 将键盘包含在标点符号/符号输入模式中</li>
          <li><codeph>“url”</codeph>- 提供适用于 URL 输入的软键，如一个专用键用于插入“.com”</li>
          <li><codeph>“number”</codeph>- 将键盘包含在数字键盘模式中</li>
          <li><codeph>“contact”</codeph>- 将键盘包含在适用于输入联系人信息的模式中</li>
          <li><codeph>“email”</codeph>- 将键盘包含在电子邮件地址输入模式中，以使输入 @ 符号或“.com”更轻松</li>
      </ul>
           <p><b>对于 Spark 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.SoftKeyboardType.xml"><linktext>flash.text.SoftKeyboardType</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:text:get"><apiName>text</apiName><shortdesc>
      此文本组件所显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此文本组件所显示的文本。
     
      <p><b>有关 Spark 主题，请参阅 spark.components.RichEditableText.text。</b></p>
           <p><b>对于 Mobile 主题，请参阅 spark.components.supportClasses.StyleableStageText#text</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/text"><linktext>spark.components.RichEditableText.text</linktext></link><link href="" invalidHref="spark.components.supportClasses.xml#StyleableStageText/text"><linktext>spark.components.supportClasses.StyleableStageText.text</linktext></link></related-links></apiValue><apiValue id="spark.components.supportClasses:SkinnableTextBase:typicalText:get"><apiName>typicalText</apiName><shortdesc>
      用于不实际显示即可确定控件的默认宽度和高度的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool description="" name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      用于不实际显示即可确定控件的默认宽度和高度的文本。
     
      <p><b>有关 Spark 主题，请参阅 park.components.RichEditableText.typicalText。</b></p>
           <p><b>对于 Mobile 主题，它不受支持。</b></p>
     
      </apiDesc></apiValueDetail><related-links><link href="spark.components.xml#RichEditableText/typicalText"><linktext>spark.components.RichEditableText.typicalText</linktext></link></related-links></apiValue></apiClassifier></apiPackage>